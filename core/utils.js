// core/utils.js (VERSIÃ“N COMMONJS - COMPLETA CON GENERACIÃ“N DE IDS)

const { parsePhoneNumberFromString } = require('libphonenumber-js');
const ct = require('countries-and-timezones');
const moment = require('moment-timezone');
const chalk = require('chalk'); // AÃ±adimos chalk para logs internos

// =======================================================
// ðŸ”¥ FUNCIONES DE GENERACIÃ“N DE IDS (NUEVAS)
// =======================================================

/**
Â * Genera un nÃºmero aleatorio de 5 dÃ­gitos (para la wallet).
Â * @param {number} maxDigits El mÃ¡ximo de dÃ­gitos (por defecto 5).
Â * @returns {number} El ID numÃ©rico.
Â */
function generateWalletId(maxDigits = 5) {
Â  Â  // Asegura 5 dÃ­gitos: un nÃºmero entre 10000 y 99999
Â  Â  const min = Math.pow(10, maxDigits - 1);
Â  Â  const max = Math.pow(10, maxDigits) - 1;
Â  Â  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
Â * Genera un ID alfanumÃ©rico (ej., 3 letras + 6 nÃºmeros).
Â * @param {number} numLetters NÃºmero de letras al inicio (ej. 3).
Â * @param {number} numDigits NÃºmero de dÃ­gitos al final (ej. 6).
Â * @returns {string} El ID alfanumÃ©rico.
Â */
function generatePurchaseId(numLetters = 3, numDigits = 6) {
Â  Â  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
Â  Â  let result = '';

Â  Â  // Genera letras
Â  Â  for (let i = 0; i < numLetters; i++) {
Â  Â  Â  Â  result += letters.charAt(Math.floor(Math.random() * letters.length));
Â  Â  }
Â  Â  // Genera nÃºmeros
Â  Â  for (let i = 0; i < numDigits; i++) {
Â  Â  Â  Â  result += Math.floor(Math.random() * 10);
Â  Â  }
Â  Â  // Aseguramos mayÃºsculas
Â  Â  return result.toUpperCase();
}

// =======================================================
// FUNCIONES DE TELÃ‰FONO Y TIEMPO (ORIGINALES)
// =======================================================

/**
Â * Normaliza un string de telÃ©fono a solo dÃ­gitos (sin '+').
Â * @param {string} s El string a limpiar.
Â * @returns {string}
Â */
function onlyDigits(s) {
Â  Â  return String(s || '').replace(/\D/g, '');
}

/**
Â * Intenta obtener el cÃ³digo de paÃ­s ISO (alpha-2) desde un nÃºmero de telÃ©fono.
Â * @param {string} phone El nÃºmero de telÃ©fono (ej. '593987...').
Â * @returns {string|null} El cÃ³digo del paÃ­s (ej. 'EC') o null.
Â */
function getCountryAlpha2FromPhone(phone) {
Â  Â  const digits = onlyDigits(phone);
Â  Â  if (!digits) return null;
Â  Â  try {
Â  Â  Â  Â  const parsed = parsePhoneNumberFromString('+' + digits);
Â  Â  Â  Â  if (!parsed) return null;
Â  Â  Â  Â  return parsed.country || null;
Â  Â  } catch (e) {
Â  Â  Â  Â  console.error(chalk.red('Error en parsePhoneNumberFromString:'), e.message);
Â  Â  Â  Â  return null;
Â  Â  }
}

/**
Â * Obtiene la zona horaria (IANA) preferida para un nÃºmero de telÃ©fono.
Â * @param {string} phone El nÃºmero de telÃ©fono.
Â * @returns {string} La zona horaria (ej. 'America/Guayaquil') o 'UTC' como fallback.
Â */
function getTimezoneForPhone(phone) {
Â  Â  const alpha2 = getCountryAlpha2FromPhone(phone);
Â  Â  if (alpha2) {
Â  Â  Â  Â  const zones = ct.getTimezonesForCountry(alpha2);
Â  Â  Â  Â  if (zones && zones.length) return zones[0].name;
Â  Â  }
Â  Â  return 'UTC';
}

/**
Â * Obtiene la hora local formateada para un nÃºmero de telÃ©fono.
Â * @param {string} phone El nÃºmero de telÃ©fono.
Â * @param {string} fmt El formato de fecha y hora deseado.
Â * @returns {string} La hora local formateada.
Â */
function getLocalTimeForPhone(phone, fmt = 'HH:mm:ss â€” D MMM YYYY') {
Â  Â  try {
Â  Â  Â  Â  const tz = getTimezoneForPhone(phone) || 'UTC';
Â  Â  Â  Â  return moment().tz(tz).format(fmt);
Â  Â  } catch (e) {
Â  Â  Â  Â  console.error(chalk.red('Error al obtener la hora local:'), e.message);
Â  Â  Â  Â  return moment().utc().format(fmt);
Â  Â  }
}

// Exportamos las funciones usando module.exports
module.exports = {
Â  Â  getCountryAlpha2FromPhone,
Â  Â  getTimezoneForPhone,
Â  Â  getLocalTimeForPhone,
Â  Â  onlyDigits,
Â  Â  // ðŸ”¥ ExportaciÃ³n de las nuevas funciones de ID
Â  Â  generateWalletId,
Â  Â  generatePurchaseId
};