{
  "manifest": {
    "name": "centra",
    "version": "2.7.0",
    "description": "The core lightweight HTTP client for Node",
    "main": "createRequest.js",
    "scripts": {
      "test": "node test.js --test-force-exit",
      "prepublishOnly": "npm test"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ethanent/centra.git"
    },
    "files": [
      "model/CentraRequest.js",
      "model/CentraResponse.js",
      "createRequest.js"
    ],
    "keywords": [
      "http",
      "https",
      "request",
      "fetch",
      "url",
      "lightweight"
    ],
    "author": {
      "name": "Ethan Davis"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/ethanent/centra/issues"
    },
    "homepage": "https://github.com/ethanent/centra",
    "devDependencies": {
      "body-parser": "^1.20.2",
      "express": "^4.19.2"
    },
    "dependencies": {
      "follow-redirects": "^1.15.6"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-centra-2.7.0-integrity/node_modules/centra/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\" style=\"text-align: center;\"><img src=\"https://github.com/ethanent/centra/blob/master/media/centraLogo.png?raw=true\" width=\"400\"/></p>\n\n> The core lightweight HTTP client for Node\n\n[GitHub](https://github.com/ethanent/centra) | [NPM](https://npmjs.com/package/centra)\n\n## Install\n\n```shell\nnpm i centra\n```\n\n## Why centra?\n\ncentra is the best request library for developers; it provides a number of extremely useful features while still being one of the most lightweight Node.js HTTP client libraries available.\n\n## Use centra!\n\nFirst, require the library.\n\n```js\nconst c = require('centra')\n```\n\nThen let's make a request in an async function!\n\n```js\n;(async () => {\n\tconst res = await c('https://example.com').send()\n\n\tconsole.log(await res.text())\n})()\n```\n\n## More advanced usage\n\n### Send data in a JSON body\n\n```js\nc('https://example.com/nonexistentJSONAPI', 'POST').body({\n\t'name': 'Ethan'\n}, 'json').send().then((res) => {\n\t/*...*/\n})\n```\n\n### Send data in a form body\n\n```js\nc('https://example.com/nonexistentJSONAPI', 'POST').body({\n\t'name': 'Ethan'\n}, 'form').send().then((res) => {\n\t/*...*/\n})\n```\n\n### Set query string parameters\n\nOne at a time:\n\n```js\nc('https://example.com/user').query('id', 'u1817760').send().then((res) => {\n\t/*...*/\n})\n```\n\nMany at a time:\n\n```js\nc('https://example.com/user').query({\n\t'id', 'u1817760',\n\t'name': 'Ethan'\n}).send().then((res) => {\n\t/*...*/\n})\n```\n\n### Set a request timeout\n\n```js\nc('https://example.com').timeout(2000).send().then((res) => {\n\t// Success!\n}).catch((err) => {\n\t// Has the request timed out?\n})\n```\n\n### Stream a request's response\n\nIn this example, the [stream](https://nodejs.org/api/stream.html) is piped to a file:\n\n```js\n// require the fs module beforehand\n\nc('https://example.com').stream().send().then((stream) => stream.pipe(fs.createWriteStream(path.join(__dirname, 'logo.png'))))\n```\n\n### Follow redirects\n\n```js\nc('https://example.com/').followRedirects(5).send()\n```\n\n### Switch paths on the fly\n\n```js\nc('https://example.com/test').path('/hello').send()\n\n// This will make a request to https://example.com/test/hello\n```\n\n### Specify request headers\n\nOne at a time:\n\n```js\nc('https://example.com').header('Content-Type', 'application/json').send()\n```\n\nMany at a time:\n\n```js\nc('https://example.com').header({\n\t'Content-Type': 'application/json',\n\t'X-Connecting-With': 'centra'\n}).send()\n```\n\n### Modify core HTTP request options\n\nSee [http.request](https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_http_request_url_options_callback)'s options for more information about core HTTP request options.\nLet's change our localAddress as an example.\n\n```js\nc('https://example.com').option('localAddress', '127.0.0.2').send()\n```\n\n### Accept compressed responses\n\n```js\nc('https://example.com').compress().send()\n\n// This will cause centra to accept compressed content from the server. (gzip and deflate are currently supported)\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Ethan Davis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/centra/-/centra-2.7.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/centra/-/centra-2.7.0.tgz",
    "hash": "",
    "integrity": "sha512-PbFMgMSrmgx6uxCdm57RUos9Tc3fclMvhLSATYN39XsDV29B89zZ3KA89jmY0vwSGazyU+uerqwa6t+KaodPcg==",
    "registry": "npm",
    "packageName": "centra",
    "cacheIntegrity": "sha512-PbFMgMSrmgx6uxCdm57RUos9Tc3fclMvhLSATYN39XsDV29B89zZ3KA89jmY0vwSGazyU+uerqwa6t+KaodPcg== sha1-TIMSpYQ26KcYMCARVh235qKw7Bg="
  },
  "registry": "npm",
  "hash": "3db14c80c4ab9a0c7abb109d9b9ed1528b3d4dcddf72532f84b4804d8377f57b03576f41f3dcd9dca03cf63998d2fc1219acf253eb9eaeac1aeadf8a6a874f72"
}