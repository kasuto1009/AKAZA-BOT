{
  "manifest": {
    "name": "@whiskeysockets/baileys",
    "type": "module",
    "version": "6.7.20",
    "description": "A WebSockets library for interacting with WhatsApp Web",
    "keywords": [
      "whatsapp",
      "automation"
    ],
    "homepage": "https://github.com/WhiskeySockets/Baileys/",
    "repository": {
      "url": "git@github.com:WhiskeySockets/Baileys.git"
    },
    "license": "MIT",
    "author": {
      "name": "Rajeh Taher"
    },
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "files": [
      "lib/**/*",
      "WAProto/**/*",
      "engine-requirements.js"
    ],
    "scripts": {
      "build:all": "npm run build && npm run build:docs",
      "build:docs": "typedoc",
      "build": "tsc -P tsconfig.build.json && tsc-esm-fix --tsconfig=tsconfig.build.json --ext=.js",
      "changelog:last": "conventional-changelog -p angular -r 2",
      "changelog:preview": "conventional-changelog -p angular -u",
      "changelog:update": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0",
      "example": "tsx ./Example/example.ts",
      "gen:protobuf": "sh WAProto/GenerateStatics.sh",
      "format": "prettier --write \"src/**/*.{ts,js,json,md}\"",
      "lint": "tsc && eslint src --ext .js,.ts",
      "lint:fix": "npm run format && npm run lint --fix",
      "prepack": "npm run build",
      "prepare": "npm run build",
      "preinstall": "node ./engine-requirements.js",
      "release": "release-it",
      "test": "node --experimental-vm-modules ./node_modules/.bin/jest"
    },
    "dependencies": {
      "@cacheable/node-cache": "^1.4.0",
      "@hapi/boom": "^9.1.3",
      "async-mutex": "^0.5.0",
      "axios": "^1.6.0",
      "libsignal": "git+https://github.com/whiskeysockets/libsignal-node",
      "music-metadata": "^11.7.0",
      "pino": "^9.6",
      "protobufjs": "^7.2.4",
      "ws": "^8.13.0"
    },
    "devDependencies": {
      "@eslint/eslintrc": "^3.3.1",
      "@eslint/js": "^9.31.0",
      "@types/jest": "^30.0.0",
      "@types/node": "^16.0.0",
      "@types/ws": "^8.0.0",
      "@typescript-eslint/eslint-plugin": "^8.32.0",
      "@typescript-eslint/parser": "^8.32.0",
      "@whiskeysockets/eslint-config": "github:whiskeysockets/eslint-config",
      "conventional-changelog-cli": "^2.2.2",
      "esbuild-register": "^3.6.0",
      "eslint": "^9.31.0",
      "eslint-config-prettier": "^10.1.2",
      "eslint-plugin-prettier": "^5.4.0",
      "jest": "^30.0.5",
      "jimp": "^1.6.0",
      "jiti": "^2.4.2",
      "json": "^11.0.0",
      "link-preview-js": "^3.0.0",
      "open": "^8.4.2",
      "prettier": "^3.5.3",
      "protobufjs-cli": "^1.1.3",
      "release-it": "^15.10.3",
      "ts-jest": "^29.4.0",
      "tsc-esm-fix": "^3.1.2",
      "tsx": "^4.20.3",
      "typedoc": "^0.27.9",
      "typedoc-plugin-markdown": "4.4.2",
      "typescript": "^5.8.2"
    },
    "peerDependencies": {
      "audio-decode": "^2.1.3",
      "jimp": "^1.6.0",
      "link-preview-js": "^3.0.0",
      "sharp": "*"
    },
    "peerDependenciesMeta": {
      "audio-decode": {
        "optional": true
      },
      "jimp": {
        "optional": true
      },
      "link-preview-js": {
        "optional": true
      }
    },
    "packageManager": "yarn@4.9.2",
    "engines": {
      "node": ">=20.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-@whiskeysockets-baileys-6.7.20-integrity/node_modules/@whiskeysockets/baileys/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align='center'><img alt=\"Baileys logo\" src=\"https://raw.githubusercontent.com/WhiskeySockets/Baileys/refs/heads/master/Media/logo.png\" height=\"75\"/></h1>\n\n<div align='center'>Baileys is a WebSockets-based TypeScript library for interacting with the WhatsApp Web API.</div>\n\n\n\n> [!IMPORTANT]\n> I made a survey for users of the project to ask questions, and provide Baileys valuable insights regarding its users. I will be publishing the results of this form (after filtering) as well so we can study and understand where we need to work.\n> \n> The survey is anonymous and requires no personal info at all. You are required to sign-in with Google to keep responses to one person. You are able to edit your response after you submit. The deadline for this form is September 30, 2025.\n> \n> I encourage you to put the effort, all it takes is 5-10 minutes and you get to ask me any questions you have.\n> \n> \\- Rajeh (purpshell)\n> \n> Fill in the survey via the link: https://whiskey.so/survey \n\n\n# Important Note\nThis is a temporary README.md, the new guide is in development and will this file will be replaced with .github/README.md (already a default on GitHub).\n\nNew guide link: https://baileys.wiki\n\n# Sponsor\nIf you'd like to financially support this project, you can do so by supporting the current maintainer [here](https://purpshell.dev/sponsor).\n\n# Disclaimer\nThis project is not affiliated, associated, authorized, endorsed by, or in any way officially connected with WhatsApp or any of its subsidiaries or its affiliates.\nThe official WhatsApp website can be found at whatsapp.com. \"WhatsApp\" as well as related names, marks, emblems and images are registered trademarks of their respective owners.\n\nThe maintainers of Baileys do not in any way condone the use of this application in practices that violate the Terms of Service of WhatsApp. The maintainers of this application call upon the personal responsibility of its users to use this application in a fair way, as it is intended to be used.\nUse at your own discretion. Do not spam people with this. We discourage any stalkerware, bulk or automated messaging usage.\n\n##\n\n- Baileys does not require Selenium or any other browser to be interface with WhatsApp Web, it does so directly using a **WebSocket**. \n- Not running Selenium or Chromium saves you like **half a gig** of ram :/ \n- Baileys supports interacting with the multi-device & web versions of WhatsApp.\n- Thank you to [@pokearaujo](https://github.com/pokearaujo/multidevice) for writing his observations on the workings of WhatsApp Multi-Device. Also, thank you to [@Sigalor](https://github.com/sigalor/whatsapp-web-reveng) for writing his observations on the workings of WhatsApp Web and thanks to [@Rhymen](https://github.com/Rhymen/go-whatsapp/) for the __go__ implementation.\n\n> [!IMPORTANT]\n> The original repository had to be removed by the original author - we now continue development in this repository here.\nThis is the only official repository and is maintained by the community.\n> **Join the Discord [here](https://discord.gg/WeJM5FP9GG)**\n \n## Example\n\nDo check out & run [example.ts](Example/example.ts) to see an example usage of the library.\nThe script covers most common use cases.\nTo run the example script, download or clone the repo and then type the following in a terminal:\n1. ``` cd path/to/Baileys ```\n2. ``` yarn ```\n3. ``` yarn example ```\n\n## Install\n\nUse the stable version:\n```\nyarn add @whiskeysockets/baileys\n```\n\nUse the edge version (no guarantee of stability, but latest fixes + features)\n```\nyarn add github:WhiskeySockets/Baileys\n```\n\nThen import your code using:\n```ts \nimport makeWASocket from '@whiskeysockets/baileys'\n```\n\n# Links\n\n- [Discord](https://discord.gg/WeJM5FP9GG)\n- [Docs](https://guide.whiskeysockets.io/)\n\n# Index\n\n- [Connecting Account](#connecting-account)\n    - [Connect with QR-CODE](#starting-socket-with-qr-code)\n    - [Connect with Pairing Code](#starting-socket-with-pairing-code)\n    - [Receive Full History](#receive-full-history)\n- [Important Notes About Socket Config](#important-notes-about-socket-config)\n    - [Caching Group Metadata (Recommended)](#caching-group-metadata-recommended)\n    - [Improve Retry System & Decrypt Poll Votes](#improve-retry-system--decrypt-poll-votes)\n    - [Receive Notifications in Whatsapp App](#receive-notifications-in-whatsapp-app)\n\n- [Save Auth Info](#saving--restoring-sessions)\n- [Handling Events](#handling-events)\n    - [Example to Start](#example-to-start)\n    - [Decrypt Poll Votes](#decrypt-poll-votes)\n    - [Summary of Events on First Connection](#summary-of-events-on-first-connection)\n- [Implementing a Data Store](#implementing-a-data-store)\n- [Whatsapp IDs Explain](#whatsapp-ids-explain)\n- [Utility Functions](#utility-functions)\n- [Sending Messages](#sending-messages)\n    - [Non-Media Messages](#non-media-messages)\n        - [Text Message](#text-message)\n        - [Quote Message](#quote-message-works-with-all-types)\n        - [Mention User](#mention-user-works-with-most-types)\n        - [Forward Messages](#forward-messages)\n        - [Location Message](#location-message)\n        - [Contact Message](#contact-message)\n        - [Reaction Message](#reaction-message)\n        - [Pin Message](#pin-message)\n        - [Poll Message](#poll-message)\n    - [Sending with Link Preview](#sending-messages-with-link-previews)\n    - [Media Messages](#media-messages)\n        - [Gif Message](#gif-message)\n        - [Video Message](#video-message)\n        - [Audio Message](#audio-message)\n        - [Image Message](#image-message)\n        - [ViewOnce Message](#view-once-message)\n- [Modify Messages](#modify-messages)\n    - [Delete Messages (for everyone)](#deleting-messages-for-everyone)\n    - [Edit Messages](#editing-messages)\n- [Manipulating Media Messages](#manipulating-media-messages)\n    - [Thumbnail in Media Messages](#thumbnail-in-media-messages)\n    - [Downloading Media Messages](#downloading-media-messages)\n    - [Re-upload Media Message to Whatsapp](#re-upload-media-message-to-whatsapp)\n- [Reject Call](#reject-call)\n- [Send States in Chat](#send-states-in-chat)\n    - [Reading Messages](#reading-messages)\n    - [Update Presence](#update-presence)\n- [Modifying Chats](#modifying-chats)\n    - [Archive a Chat](#archive-a-chat)\n    - [Mute/Unmute a Chat](#muteunmute-a-chat)\n    - [Mark a Chat Read/Unread](#mark-a-chat-readunread)\n    - [Delete a Message for Me](#delete-a-message-for-me)\n    - [Delete a Chat](#delete-a-chat)\n    - [Star/Unstar a Message](#starunstar-a-message)\n    - [Disappearing Messages](#disappearing-messages)\n- [User Querys](#user-querys)\n    - [Check If ID Exists in Whatsapp](#check-if-id-exists-in-whatsapp)\n    - [Query Chat History (groups too)](#query-chat-history-groups-too)\n    - [Fetch Status](#fetch-status)\n    - [Fetch Profile Picture (groups too)](#fetch-profile-picture-groups-too)\n    - [Fetch Bussines Profile (such as description or category)](#fetch-bussines-profile-such-as-description-or-category)\n    - [Fetch Someone's Presence (if they're typing or online)](#fetch-someones-presence-if-theyre-typing-or-online)\n- [Change Profile](#change-profile)\n    - [Change Profile Status](#change-profile-status)\n    - [Change Profile Name](#change-profile-name)\n    - [Change Display Picture (groups too)](#change-display-picture-groups-too)\n    - [Remove display picture (groups too)](#remove-display-picture-groups-too)\n- [Groups](#groups)\n    - [Create a Group](#create-a-group)\n    - [Add/Remove or Demote/Promote](#addremove-or-demotepromote)\n    - [Change Subject (name)](#change-subject-name)\n    - [Change Description](#change-description)\n    - [Change Settings](#change-settings)\n    - [Leave a Group](#leave-a-group)\n    - [Get Invite Code](#get-invite-code)\n    - [Revoke Invite Code](#revoke-invite-code)\n    - [Join Using Invitation Code](#join-using-invitation-code)\n    - [Get Group Info by Invite Code](#get-group-info-by-invite-code)\n    - [Query Metadata (participants, name, description...)](#query-metadata-participants-name-description)\n    - [Join using groupInviteMessage](#join-using-groupinvitemessage)\n    - [Get Request Join List](#get-request-join-list)\n    - [Approve/Reject Request Join](#approvereject-request-join)\n    - [Get All Participating Groups Metadata](#get-all-participating-groups-metadata)\n    - [Toggle Ephemeral](#toggle-ephemeral)\n    - [Change Add Mode](#change-add-mode)\n- [Privacy](#privacy)\n    - [Block/Unblock User](#blockunblock-user)\n    - [Get Privacy Settings](#get-privacy-settings)\n    - [Get BlockList](#get-blocklist)\n    - [Update LastSeen Privacy](#update-lastseen-privacy)\n    - [Update Online Privacy](#update-online-privacy)\n    - [Update Profile Picture Privacy](#update-profile-picture-privacy)\n    - [Update Status Privacy](#update-status-privacy)\n    - [Update Read Receipts Privacy](#update-read-receipts-privacy)\n    - [Update Groups Add Privacy](#update-groups-add-privacy)\n    - [Update Default Disappearing Mode](#update-default-disappearing-mode)\n- [Broadcast Lists & Stories](#broadcast-lists--stories)\n    - [Send Broadcast & Stories](#send-broadcast--stories)\n    - [Query a Broadcast List's Recipients & Name](#query-a-broadcast-lists-recipients--name)\n- [Writing Custom Functionality](#writing-custom-functionality)\n    - [Enabling Debug Level in Baileys Logs](#enabling-debug-level-in-baileys-logs)\n    - [How Whatsapp Communicate With Us](#how-whatsapp-communicate-with-us)\n    - [Register a Callback for Websocket Events](#register-a-callback-for-websocket-events)\n\n## Connecting Account\n\nWhatsApp provides a multi-device API that allows Baileys to be authenticated as a second WhatsApp client by scanning a **QR code** or **Pairing Code** with WhatsApp on your phone.\n\n> [!NOTE]\n> **[Here](#example-to-start) is a simple example of event handling**\n\n> [!TIP]\n> **You can see all supported socket configs [here](https://baileys.whiskeysockets.io/types/SocketConfig.html) (Recommended)**\n\n### Starting socket with **QR-CODE**\n\n> [!TIP]\n> You can customize browser name if you connect with **QR-CODE**, with `Browser` constant, we have some browsers config, **see [here](https://baileys.whiskeysockets.io/types/BrowsersMap.html)**\n\n```ts\nimport makeWASocket from '@whiskeysockets/baileys'\n\nconst sock = makeWASocket({\n    // can provide additional config here\n    browser: Browsers.ubuntu('My App'),\n    printQRInTerminal: true\n})\n```\n\nIf the connection is successful, you will see a QR code printed on your terminal screen, scan it with WhatsApp on your phone and you'll be logged in!\n\n### Starting socket with **Pairing Code**\n\n\n> [!IMPORTANT]\n> Pairing Code isn't Mobile API, it's a method to connect Whatsapp Web without QR-CODE, you can connect only with one device, see [here](https://faq.whatsapp.com/1324084875126592/?cms_platform=web)\n\nThe phone number can't have `+` or `()` or `-`, only numbers, you must provide country code\n\n```ts\nimport makeWASocket from '@whiskeysockets/baileys'\n\nconst sock = makeWASocket({\n    // can provide additional config here\n    printQRInTerminal: false //need to be false\n})\n\nif (!sock.authState.creds.registered) {\n    const number = 'XXXXXXXXXXX'\n    const code = await sock.requestPairingCode(number)\n    console.log(code)\n}\n```\n\n### Receive Full History\n\n1. Set `syncFullHistory` as `true`\n2. Baileys, by default, use chrome browser config\n    - If you'd like to emulate a desktop connection (and receive more message history), this browser setting to your Socket config:\n\n```ts\nconst sock = makeWASocket({\n    ...otherOpts,\n    // can use Windows, Ubuntu here too\n    browser: Browsers.macOS('Desktop'),\n    syncFullHistory: true\n})\n```\n\n## Important Notes About Socket Config\n\n### Caching Group Metadata (Recommended)\n- If you use baileys for groups, we recommend you to set `cachedGroupMetadata` in socket config, you need to implement a cache like this:\n\n    ```ts\n    const groupCache = new NodeCache({stdTTL: 5 * 60, useClones: false})\n\n    const sock = makeWASocket({\n        cachedGroupMetadata: async (jid) => groupCache.get(jid)\n    })\n\n    sock.ev.on('groups.update', async ([event]) => {\n        const metadata = await sock.groupMetadata(event.id)\n        groupCache.set(event.id, metadata)\n    })\n\n    sock.ev.on('group-participants.update', async (event) => {\n        const metadata = await sock.groupMetadata(event.id)\n        groupCache.set(event.id, metadata)\n    })\n    ```\n\n### Improve Retry System & Decrypt Poll Votes\n- If you want to improve sending message, retrying when error occurs and decrypt poll votes, you need to have a store and set `getMessage` config in socket like this:\n    ```ts\n    const sock = makeWASocket({\n        getMessage: async (key) => await getMessageFromStore(key)\n    })\n    ```\n\n### Receive Notifications in Whatsapp App\n- If you want to receive notifications in whatsapp app, set `markOnlineOnConnect` to `false`\n    ```ts\n    const sock = makeWASocket({\n        markOnlineOnConnect: false\n    })\n    ```\n## Saving & Restoring Sessions\n\nYou obviously don't want to keep scanning the QR code every time you want to connect. \n\nSo, you can load the credentials to log back in:\n```ts\nimport makeWASocket, { useMultiFileAuthState } from '@whiskeysockets/baileys'\n\nconst { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys')\n\n// will use the given state to connect\n// so if valid credentials are available -- it'll connect without QR\nconst sock = makeWASocket({ auth: state })\n\n// this will be called as soon as the credentials are updated\nsock.ev.on('creds.update', saveCreds)\n```\n\n> [!IMPORTANT]\n> `useMultiFileAuthState` is a utility function to help save the auth state in a single folder, this function serves as a good guide to help write auth & key states for SQL/no-SQL databases, which I would recommend in any production grade system.\n\n> [!NOTE]\n> When a message is received/sent, due to signal sessions needing updating, the auth keys (`authState.keys`) will update. Whenever that happens, you must save the updated keys (`authState.keys.set()` is called). Not doing so will prevent your messages from reaching the recipient & cause other unexpected consequences. The `useMultiFileAuthState` function automatically takes care of that, but for any other serious implementation -- you will need to be very careful with the key state management.\n\n## Handling Events\n\n- Baileys uses the EventEmitter syntax for events. \nThey're all nicely typed up, so you shouldn't have any issues with an Intellisense editor like VS Code.\n\n> [!IMPORTANT]\n> **The events are [these](https://baileys.whiskeysockets.io/types/BaileysEventMap.html)**, it's important you see all events\n\nYou can listen to these events like this:\n```ts\nconst sock = makeWASocket()\nsock.ev.on('messages.upsert', ({ messages }) => {\n    console.log('got messages', messages)\n})\n```\n\n### Example to Start\n\n> [!NOTE]\n> This example includes basic auth storage too\n\n```ts\nimport makeWASocket, { DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys'\nimport { Boom } from '@hapi/boom'\n\nasync function connectToWhatsApp () {\n    const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys')\n    const sock = makeWASocket({\n        // can provide additional config here\n        auth: state,\n        printQRInTerminal: true\n    })\n    sock.ev.on('connection.update', (update) => {\n        const { connection, lastDisconnect } = update\n        if(connection === 'close') {\n            const shouldReconnect = (lastDisconnect.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut\n            console.log('connection closed due to ', lastDisconnect.error, ', reconnecting ', shouldReconnect)\n            // reconnect if not logged out\n            if(shouldReconnect) {\n                connectToWhatsApp()\n            }\n        } else if(connection === 'open') {\n            console.log('opened connection')\n        }\n    })\n    sock.ev.on('messages.upsert', event => {\n        for (const m of event.messages) {\n            console.log(JSON.stringify(m, undefined, 2))\n\n            console.log('replying to', m.key.remoteJid)\n            await sock.sendMessage(m.key.remoteJid!, { text: 'Hello Word' })\n        }\n    })\n\n    // to storage creds (session info) when it updates\n    sock.ev.on('creds.update', saveCreds)\n}\n// run in main file\nconnectToWhatsApp()\n```\n\n> [!IMPORTANT]\n> In `messages.upsert` it's recommended to use a loop like `for (const message of event.messages)` to handle all messages in array\n\n### Decrypt Poll Votes\n\n- By default poll votes are encrypted and handled in `messages.update`\n- That's a simple example\n```ts\nsock.ev.on('messages.update', event => {\n    for(const { key, update } of event) {\n        if(update.pollUpdates) {\n            const pollCreation = await getMessage(key)\n            if(pollCreation) {\n                console.log(\n                    'got poll update, aggregation: ',\n                    getAggregateVotesInPollMessage({\n                        message: pollCreation,\n                        pollUpdates: update.pollUpdates,\n                    })\n                )\n            }\n        }\n    }\n})\n```\n\n- `getMessage` is a [store](#implementing-a-data-store) implementation (in your end)\n\n### Summary of Events on First Connection\n\n1. When you connect first time, `connection.update` will be fired requesting you to restart sock\n2. Then, history messages will be received in `messaging.history-set`\n\n## Implementing a Data Store\n\n- Baileys does not come with a defacto storage for chats, contacts, or messages. However, a simple in-memory implementation has been provided. The store listens for chat updates, new messages, message updates, etc., to always have an up-to-date version of the data.\n\n> [!IMPORTANT]\n> I highly recommend building your own data store, as storing someone's entire chat history in memory is a terrible waste of RAM.\n\nIt can be used as follows:\n\n```ts\nimport makeWASocket, { makeInMemoryStore } from '@whiskeysockets/baileys'\n// the store maintains the data of the WA connection in memory\n// can be written out to a file & read from it\nconst store = makeInMemoryStore({ })\n// can be read from a file\nstore.readFromFile('./baileys_store.json')\n// saves the state to a file every 10s\nsetInterval(() => {\n    store.writeToFile('./baileys_store.json')\n}, 10_000)\n\nconst sock = makeWASocket({ })\n// will listen from this socket\n// the store can listen from a new socket once the current socket outlives its lifetime\nstore.bind(sock.ev)\n\nsock.ev.on('chats.upsert', () => {\n    // can use 'store.chats' however you want, even after the socket dies out\n    // 'chats' => a KeyedDB instance\n    console.log('got chats', store.chats.all())\n})\n\nsock.ev.on('contacts.upsert', () => {\n    console.log('got contacts', Object.values(store.contacts))\n})\n\n```\n\nThe store also provides some simple functions such as `loadMessages` that utilize the store to speed up data retrieval.\n\n## Whatsapp IDs Explain\n\n- `id` is the WhatsApp ID, called `jid` too, of the person or group you're sending the message to. \n    - It must be in the format ```[country code][phone number]@s.whatsapp.net```\n\t    - Example for people: ```+19999999999@s.whatsapp.net```. \n\t    - For groups, it must be in the format ``` 123456789-123345@g.us ```. \n    - For broadcast lists, it's `[timestamp of creation]@broadcast`.\n    - For stories, the ID is `status@broadcast`.\n\n## Utility Functions\n\n- `getContentType`, returns the content type for any message\n- `getDevice`, returns the device from message\n- `makeCacheableSignalKeyStore`, make auth store more fast\n- `downloadContentFromMessage`, download content from any message\n\n## Sending Messages\n\n- Send all types of messages with a single function\n    - **[Here](https://baileys.whiskeysockets.io/types/AnyMessageContent.html) you can see all message contents supported, like text message**\n    - **[Here](https://baileys.whiskeysockets.io/types/MiscMessageGenerationOptions.html) you can see all options supported, like quote message**\n\n    ```ts\n    const jid: string\n    const content: AnyMessageContent\n    const options: MiscMessageGenerationOptions\n\n    sock.sendMessage(jid, content, options)\n    ```\n\n### Non-Media Messages\n\n#### Text Message\n```ts\nawait sock.sendMessage(jid, { text: 'hello word' })\n```\n\n#### Quote Message (works with all types)\n```ts\nawait sock.sendMessage(jid, { text: 'hello word' }, { quoted: message })\n```\n\n#### Mention User (works with most types)\n- @number is to mention in text, it's optional\n```ts\nawait sock.sendMessage(\n    jid,\n    {\n        text: '@12345678901',\n        mentions: ['12345678901@s.whatsapp.net']\n    }\n)\n```\n\n#### Forward Messages\n- You need to have message object, can be retrieved from [store](#implementing-a-data-store) or use a [message](https://baileys.whiskeysockets.io/types/WAMessage.html) object\n```ts\nconst msg = getMessageFromStore() // implement this on your end\nawait sock.sendMessage(jid, { forward: msg }) // WA forward the message!\n```\n\n#### Location Message\n```ts\nawait sock.sendMessage(\n    jid, \n    {\n        location: {\n            degreesLatitude: 24.121231,\n            degreesLongitude: 55.1121221\n        }\n    }\n)\n```\n#### Contact Message\n```ts\nconst vcard = 'BEGIN:VCARD\\n' // metadata of the contact card\n            + 'VERSION:3.0\\n' \n            + 'FN:Jeff Singh\\n' // full name\n            + 'ORG:Ashoka Uni;\\n' // the organization of the contact\n            + 'TEL;type=CELL;type=VOICE;waid=911234567890:+91 12345 67890\\n' // WhatsApp ID + phone number\n            + 'END:VCARD'\n\nawait sock.sendMessage(\n    id,\n    { \n        contacts: { \n            displayName: 'Jeff', \n            contacts: [{ vcard }] \n        }\n    }\n)\n```\n\n#### Reaction Message\n- You need to pass the key of message, you can retrieve from [store](#implementing-a-data-store) or use a [key](https://baileys.whiskeysockets.io/types/WAMessageKey.html) object\n```ts\nawait sock.sendMessage(\n    jid,\n    {\n        react: {\n            text: '💖', // use an empty string to remove the reaction\n            key: message.key\n        }\n    }\n)\n```\n\n#### Pin Message\n- You need to pass the key of message, you can retrieve from [store](#implementing-a-data-store) or use a [key](https://baileys.whiskeysockets.io/types/WAMessageKey.html) object\n\n- Time can be:\n\n| Time  | Seconds        |\n|-------|----------------|\n| 24h    | 86.400        |\n| 7d     | 604.800       |\n| 30d    | 2.592.000     |\n\n```ts\nawait sock.sendMessage(\n    jid,\n    {\n        pin: {\n            type: 1, // 0 to remove\n            time: 86400\n            key: message.key\n        }\n    }\n)\n```\n\n#### Poll Message\n```ts\nawait sock.sendMessage(\n    jid,\n    {\n        poll: {\n            name: 'My Poll',\n            values: ['Option 1', 'Option 2', ...],\n            selectableCount: 1,\n            toAnnouncementGroup: false // or true\n        }\n    }\n)\n```\n\n### Sending Messages with Link Previews\n\n1. By default, wa does not have link generation when sent from the web\n2. Baileys has a function to generate the content for these link previews\n3. To enable this function's usage, add `link-preview-js` as a dependency to your project with `yarn add link-preview-js`\n4. Send a link:\n```ts\nawait sock.sendMessage(\n    jid,\n    {\n        text: 'Hi, this was sent using https://github.com/whiskeysockets/baileys'\n    }\n)\n```\n\n### Media Messages\n\nSending media (video, stickers, images) is easier & more efficient than ever.\n\n> [!NOTE]\n> In media messages, you can pass `{ stream: Stream }` or `{ url: Url }` or `Buffer` directly, you can see more [here](https://baileys.whiskeysockets.io/types/WAMediaUpload.html)\n\n- When specifying a media url, Baileys never loads the entire buffer into memory; it even encrypts the media as a readable stream.\n\n> [!TIP]\n> It's recommended to use Stream or Url to save memory\n\n#### Gif Message\n- Whatsapp doesn't support `.gif` files, that's why we send gifs as common `.mp4` video with `gifPlayback` flag\n```ts\nawait sock.sendMessage(\n    jid, \n    { \n        video: fs.readFileSync('Media/ma_gif.mp4'),\n        caption: 'hello word',\n        gifPlayback: true\n    }\n)\n```\n\n#### Video Message\n```ts\nawait sock.sendMessage(\n    id, \n    { \n        video: {\n            url: './Media/ma_gif.mp4'\n        },\n        caption: 'hello word',\n\t    ptv: false // if set to true, will send as a `video note`\n    }\n)\n```\n\n#### Audio Message\n- To audio message work in all devices you need to convert with some tool like `ffmpeg` with this flags:\n    ```bash\n        codec: libopus //ogg file\n        ac: 1 //one channel\n        avoid_negative_ts\n        make_zero\n    ```\n    - Example:\n    ```bash\n    ffmpeg -i input.mp4 -avoid_negative_ts make_zero -ac 1 output.ogg\n    ```\n```ts\nawait sock.sendMessage(\n    jid, \n    {\n        audio: {\n            url: './Media/audio.mp3'\n        },\n        mimetype: 'audio/mp4'\n    }\n)\n```\n\n#### Image Message\n```ts\nawait sock.sendMessage(\n    id, \n    { \n        image: {\n            url: './Media/ma_img.png'\n        },\n        caption: 'hello word'\n    }\n)\n```\n\n#### View Once Message\n\n- You can send all messages above as `viewOnce`, you only need to pass `viewOnce: true` in content object\n\n```ts\nawait sock.sendMessage(\n    id, \n    { \n        image: {\n            url: './Media/ma_img.png'\n        },\n        viewOnce: true, //works with video, audio too\n        caption: 'hello word'\n    }\n)\n```\n\n## Modify Messages\n\n### Deleting Messages (for everyone)\n\n```ts\nconst msg = await sock.sendMessage(jid, { text: 'hello word' })\nawait sock.sendMessage(jid, { delete: msg.key })\n```\n\n**Note:** deleting for oneself is supported via `chatModify`, see in [this section](#modifying-chats)\n\n### Editing Messages\n\n- You can pass all editable contents here\n```ts\nawait sock.sendMessage(jid, {\n      text: 'updated text goes here',\n      edit: response.key,\n    });\n```\n\n## Manipulating Media Messages\n\n### Thumbnail in Media Messages\n- For media messages, the thumbnail can be generated automatically for images & stickers provided you add `jimp` or `sharp` as a dependency in your project using `yarn add jimp` or `yarn add sharp`.\n- Thumbnails for videos can also be generated automatically, though, you need to have `ffmpeg` installed on your system.\n\n### Downloading Media Messages\n\nIf you want to save the media you received\n```ts\nimport { createWriteStream } from 'fs'\nimport { downloadMediaMessage, getContentType } from '@whiskeysockets/baileys'\n\nsock.ev.on('messages.upsert', async ({ [m] }) => {\n    if (!m.message) return // if there is no text or media message\n    const messageType = getContentType(m) // get what type of message it is (text, image, video...)\n\n    // if the message is an image\n    if (messageType === 'imageMessage') {\n        // download the message\n        const stream = await downloadMediaMessage(\n            m,\n            'stream', // can be 'buffer' too\n            { },\n            { \n                logger,\n                // pass this so that baileys can request a reupload of media\n                // that has been deleted\n                reuploadRequest: sock.updateMediaMessage\n            }\n        )\n        // save to file\n        const writeStream = createWriteStream('./my-download.jpeg')\n        stream.pipe(writeStream)\n    }\n}\n```\n\n### Re-upload Media Message to Whatsapp\n\n- WhatsApp automatically removes old media from their servers. For the device to access said media -- a re-upload is required by another device that has it. This can be accomplished using: \n```ts\nawait sock.updateMediaMessage(msg)\n```\n\n## Reject Call\n\n- You can obtain `callId` and `callFrom` from `call` event\n\n```ts\nawait sock.rejectCall(callId, callFrom)\n```\n\n## Send States in Chat\n\n### Reading Messages\n- A set of message [keys](https://baileys.whiskeysockets.io/types/WAMessageKey.html) must be explicitly marked read now.\n- You cannot mark an entire 'chat' read as it were with Baileys Web.\nThis means you have to keep track of unread messages.\n\n```ts\nconst key: WAMessageKey\n// can pass multiple keys to read multiple messages as well\nawait sock.readMessages([key])\n```\n\nThe message ID is the unique identifier of the message that you are marking as read. \nOn a `WAMessage`, the `messageID` can be accessed using ```messageID = message.key.id```.\n\n### Update Presence\n\n- ``` presence ``` can be one of [these](https://baileys.whiskeysockets.io/types/WAPresence.html)\n- The presence expires after about 10 seconds.\n- This lets the person/group with `jid` know whether you're online, offline, typing etc. \n\n```ts\nawait sock.sendPresenceUpdate('available', jid) \n```\n\n> [!NOTE]\n> If a desktop client is active, WA doesn't send push notifications to the device. If you would like to receive said notifications -- mark your Baileys client offline using `sock.sendPresenceUpdate('unavailable')`\n\n## Modifying Chats\n\nWA uses an encrypted form of communication to send chat/app updates. This has been implemented mostly and you can send the following updates:\n\n> [!IMPORTANT]\n> If you mess up one of your updates, WA can log you out of all your devices and you'll have to log in again.\n\n### Archive a Chat\n```ts\nconst lastMsgInChat = await getLastMessageInChat(jid) // implement this on your end\nawait sock.chatModify({ archive: true, lastMessages: [lastMsgInChat] }, jid)\n```\n### Mute/Unmute a Chat\n\n- Supported times:\n\n| Time  | Miliseconds     |\n|-------|-----------------|\n| Remove | null           |\n| 8h     | 86.400.000     |\n| 7d     | 604.800.000    |\n\n```ts\n// mute for 8 hours\nawait sock.chatModify({ mute: 8 * 60 * 60 * 1000 }, jid)\n// unmute\nawait sock.chatModify({ mute: null }, jid)\n```\n### Mark a Chat Read/Unread\n```ts\nconst lastMsgInChat = await getLastMessageInChat(jid) // implement this on your end\n// mark it unread\nawait sock.chatModify({ markRead: false, lastMessages: [lastMsgInChat] }, jid)\n```\n\n### Delete a Message for Me\n```ts\nawait sock.chatModify(\n    {\n        clear: {\n            messages: [\n                {\n                    id: 'ATWYHDNNWU81732J',\n                    fromMe: true, \n                    timestamp: '1654823909'\n                }\n            ]\n        }\n    }, \n    jid\n)\n\n```\n### Delete a Chat\n```ts\nconst lastMsgInChat = await getLastMessageInChat(jid) // implement this on your end\nawait sock.chatModify({\n        delete: true,\n        lastMessages: [\n            {\n                key: lastMsgInChat.key,\n                messageTimestamp: lastMsgInChat.messageTimestamp\n            }\n        ]\n    },\n    jid\n)\n```\n### Pin/Unpin a Chat\n```ts\nawait sock.chatModify({\n        pin: true // or `false` to unpin\n    },\n    jid\n)\n```\n### Star/Unstar a Message\n```ts\nawait sock.chatModify({\n        star: {\n            messages: [\n                {\n                    id: 'messageID',\n                    fromMe: true // or `false`\n                }\n            ],\n            star: true // - true: Star Message; false: Unstar Message\n        }\n    },\n    jid\n)\n```\n\n### Disappearing Messages\n\n- Ephemeral can be:\n\n| Time  | Seconds        |\n|-------|----------------|\n| Remove | 0          |\n| 24h    | 86.400     |\n| 7d     | 604.800    |\n| 90d    | 7.776.000  |\n\n- You need to pass in **Seconds**, default is 7 days\n\n```ts\n// turn on disappearing messages\nawait sock.sendMessage(\n    jid, \n    // this is 1 week in seconds -- how long you want messages to appear for\n    { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL }\n)\n\n// will send as a disappearing message\nawait sock.sendMessage(jid, { text: 'hello' }, { ephemeralExpiration: WA_DEFAULT_EPHEMERAL })\n\n// turn off disappearing messages\nawait sock.sendMessage(\n    jid, \n    { disappearingMessagesInChat: false }\n)\n```\n\n## User Querys\n\n### Check If ID Exists in Whatsapp\n```ts\nconst [result] = await sock.onWhatsApp(jid)\nif (result.exists) console.log (`${jid} exists on WhatsApp, as jid: ${result.jid}`)\n```\n\n### Query Chat History (groups too)\n\n- You need to have oldest message in chat\n```ts\nconst msg = await getOldestMessageInChat(jid) // implement this on your end\nawait sock.fetchMessageHistory(\n    50, //quantity (max: 50 per query)\n    msg.key,\n    msg.messageTimestamp\n)\n```\n- Messages will be received in `messaging.history-set` event\n\n### Fetch Status\n```ts\nconst status = await sock.fetchStatus(jid)\nconsole.log('status: ' + status)\n```\n\n### Fetch Profile Picture (groups too)\n- To get the display picture of some person/group\n```ts\n// for low res picture\nconst ppUrl = await sock.profilePictureUrl(jid)\nconsole.log(ppUrl)\n\n// for high res picture\nconst ppUrl = await sock.profilePictureUrl(jid, 'image')\n```\n\n### Fetch Bussines Profile (such as description or category)\n```ts\nconst profile = await sock.getBusinessProfile(jid)\nconsole.log('business description: ' + profile.description + ', category: ' + profile.category)\n```\n\n### Fetch Someone's Presence (if they're typing or online)\n```ts\n// the presence update is fetched and called here\nsock.ev.on('presence.update', console.log)\n\n// request updates for a chat\nawait sock.presenceSubscribe(jid) \n```\n\n## Change Profile\n\n### Change Profile Status\n```ts\nawait sock.updateProfileStatus('Hello World!')\n```\n### Change Profile Name\n```ts\nawait sock.updateProfileName('My name')\n```\n### Change Display Picture (groups too)\n- To change your display picture or a group's\n\n> [!NOTE]\n> Like media messages, you can pass `{ stream: Stream }` or `{ url: Url }` or `Buffer` directly, you can see more [here](https://baileys.whiskeysockets.io/types/WAMediaUpload.html)\n\n```ts\nawait sock.updateProfilePicture(jid, { url: './new-profile-picture.jpeg' })\n```\n### Remove display picture (groups too)\n```ts\nawait sock.removeProfilePicture(jid)\n```\n\n## Groups\n\n- To change group properties you need to be admin\n\n### Create a Group\n```ts\n// title & participants\nconst group = await sock.groupCreate('My Fab Group', ['1234@s.whatsapp.net', '4564@s.whatsapp.net'])\nconsole.log('created group with id: ' + group.gid)\nawait sock.sendMessage(group.id, { text: 'hello there' }) // say hello to everyone on the group\n```\n### Add/Remove or Demote/Promote\n```ts\n// id & people to add to the group (will throw error if it fails)\nawait sock.groupParticipantsUpdate(\n    jid, \n    ['abcd@s.whatsapp.net', 'efgh@s.whatsapp.net'],\n    'add' // replace this parameter with 'remove' or 'demote' or 'promote'\n)\n```\n### Change Subject (name)\n```ts\nawait sock.groupUpdateSubject(jid, 'New Subject!')\n```\n### Change Description\n```ts\nawait sock.groupUpdateDescription(jid, 'New Description!')\n```\n### Change Settings\n```ts\n// only allow admins to send messages\nawait sock.groupSettingUpdate(jid, 'announcement')\n// allow everyone to send messages\nawait sock.groupSettingUpdate(jid, 'not_announcement')\n// allow everyone to modify the group's settings -- like display picture etc.\nawait sock.groupSettingUpdate(jid, 'unlocked')\n// only allow admins to modify the group's settings\nawait sock.groupSettingUpdate(jid, 'locked')\n```\n### Leave a Group\n```ts\n// will throw error if it fails\nawait sock.groupLeave(jid)\n```\n### Get Invite Code\n- To create link with code use `'https://chat.whatsapp.com/' + code`\n```ts\nconst code = await sock.groupInviteCode(jid)\nconsole.log('group code: ' + code)\n```\n### Revoke Invite Code\n```ts\nconst code = await sock.groupRevokeInvite(jid)\nconsole.log('New group code: ' + code)\n```\n### Join Using Invitation Code\n- Code can't have `https://chat.whatsapp.com/`, only code\n```ts\nconst response = await sock.groupAcceptInvite(code)\nconsole.log('joined to: ' + response)\n```\n### Get Group Info by Invite Code\n```ts\nconst response = await sock.groupGetInviteInfo(code)\nconsole.log('group information: ' + response)\n```\n### Query Metadata (participants, name, description...)\n```ts\nconst metadata = await sock.groupMetadata(jid) \nconsole.log(metadata.id + ', title: ' + metadata.subject + ', description: ' + metadata.desc)\n```\n### Join using `groupInviteMessage`\n```ts\nconst response = await sock.groupAcceptInviteV4(jid, groupInviteMessage)\nconsole.log('joined to: ' + response)\n```\n### Get Request Join List\n```ts\nconst response = await sock.groupRequestParticipantsList(jid)\nconsole.log(response)\n```\n### Approve/Reject Request Join\n```ts\nconst response = await sock.groupRequestParticipantsUpdate(\n    jid, // group id\n    ['abcd@s.whatsapp.net', 'efgh@s.whatsapp.net'],\n    'approve' // or 'reject' \n)\nconsole.log(response)\n```\n### Get All Participating Groups Metadata\n```ts\nconst response = await sock.groupFetchAllParticipating()\nconsole.log(response)\n```\n### Toggle Ephemeral\n\n- Ephemeral can be:\n\n| Time  | Seconds        |\n|-------|----------------|\n| Remove | 0          |\n| 24h    | 86.400     |\n| 7d     | 604.800    |\n| 90d    | 7.776.000  |\n\n```ts\nawait sock.groupToggleEphemeral(jid, 86400)\n```\n\n### Change Add Mode\n```ts\nawait sock.groupMemberAddMode(\n    jid,\n    'all_member_add' // or 'admin_add'\n)\n```\n\n## Privacy\n\n### Block/Unblock User\n```ts\nawait sock.updateBlockStatus(jid, 'block') // Block user\nawait sock.updateBlockStatus(jid, 'unblock') // Unblock user\n```\n### Get Privacy Settings\n```ts\nconst privacySettings = await sock.fetchPrivacySettings(true)\nconsole.log('privacy settings: ' + privacySettings)\n```\n### Get BlockList\n```ts\nconst response = await sock.fetchBlocklist()\nconsole.log(response)\n```\n### Update LastSeen Privacy\n```ts\nconst value = 'all' // 'contacts' | 'contact_blacklist' | 'none'\nawait sock.updateLastSeenPrivacy(value)\n```\n### Update Online Privacy\n```ts\nconst value = 'all' // 'match_last_seen'\nawait sock.updateOnlinePrivacy(value)\n```\n### Update Profile Picture Privacy\n```ts\nconst value = 'all' // 'contacts' | 'contact_blacklist' | 'none'\nawait sock.updateProfilePicturePrivacy(value)\n```\n### Update Status Privacy\n```ts\nconst value = 'all' // 'contacts' | 'contact_blacklist' | 'none'\nawait sock.updateStatusPrivacy(value)\n```\n### Update Read Receipts Privacy\n```ts\nconst value = 'all' // 'none'\nawait sock.updateReadReceiptsPrivacy(value)\n```\n### Update Groups Add Privacy\n```ts\nconst value = 'all' // 'contacts' | 'contact_blacklist'\nawait sock.updateGroupsAddPrivacy(value)\n```\n### Update Default Disappearing Mode\n\n- Like [this](#disappearing-messages), ephemeral can be:\n\n| Time  | Seconds        |\n|-------|----------------|\n| Remove | 0          |\n| 24h    | 86.400     |\n| 7d     | 604.800    |\n| 90d    | 7.776.000  |\n\n```ts\nconst ephemeral = 86400 \nawait sock.updateDefaultDisappearingMode(ephemeral)\n```\n\n## Broadcast Lists & Stories\n\n### Send Broadcast & Stories\n- Messages can be sent to broadcasts & stories. You need to add the following message options in sendMessage, like this:\n```ts\nawait sock.sendMessage(\n    jid,\n    {\n        image: {\n            url: url\n        },\n        caption: caption\n    },\n    {\n        backgroundColor: backgroundColor,\n        font: font,\n        statusJidList: statusJidList,\n        broadcast: true\n    }\n)\n```\n- Message body can be a `extendedTextMessage` or `imageMessage` or `videoMessage` or `voiceMessage`, see [here](https://baileys.whiskeysockets.io/types/AnyRegularMessageContent.html)\n- You can add `backgroundColor` and other options in the message options, see [here](https://baileys.whiskeysockets.io/types/MiscMessageGenerationOptions.html)\n- `broadcast: true` enables broadcast mode\n- `statusJidList`: a list of people that you can get which you need to provide, which are the people who will get this status message.\n\n- You can send messages to broadcast lists the same way you send messages to groups & individual chats.\n- Right now, WA Web does not support creating broadcast lists, but you can still delete them.\n- Broadcast IDs are in the format `12345678@broadcast`\n### Query a Broadcast List's Recipients & Name\n```ts\nconst bList = await sock.getBroadcastListInfo('1234@broadcast')\nconsole.log (`list name: ${bList.name}, recps: ${bList.recipients}`)\n```\n\n## Writing Custom Functionality\nBaileys is written with custom functionality in mind. Instead of forking the project & re-writing the internals, you can simply write your own extensions.\n\n### Enabling Debug Level in Baileys Logs\nFirst, enable the logging of unhandled messages from WhatsApp by setting:\n```ts\nconst sock = makeWASocket({\n    logger: P({ level: 'debug' }),\n})\n```\nThis will enable you to see all sorts of messages WhatsApp sends in the console. \n\n### How Whatsapp Communicate With Us\n\n> [!TIP]\n> If you want to learn whatsapp protocol, we recommend to study about Libsignal Protocol and Noise Protocol\n\n- **Example:** Functionality to track the battery percentage of your phone. You enable logging and you'll see a message about your battery pop up in the console: \n    ```\n    {\n        \"level\": 10,\n        \"fromMe\": false,\n        \"frame\": {\n            \"tag\": \"ib\",\n            \"attrs\": {\n                \"from\": \"@s.whatsapp.net\"\n            },\n            \"content\": [\n                {\n                    \"tag\": \"edge_routing\",\n                    \"attrs\": {},\n                    \"content\": [\n                        {\n                            \"tag\": \"routing_info\",\n                            \"attrs\": {},\n                            \"content\": {\n                                \"type\": \"Buffer\",\n                                \"data\": [8,2,8,5]\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        \"msg\":\"communication\"\n    }\n    ``` \n\nThe `'frame'` is what the message received is, it has three components:\n- `tag` -- what this frame is about (eg. message will have 'message')\n- `attrs` -- a string key-value pair with some metadata (contains ID of the message usually)\n- `content` -- the actual data (eg. a message node will have the actual message content in it)\n- read more about this format [here](/src/WABinary/readme.md)\n\n### Register a Callback for Websocket Events\n\n> [!TIP]\n> Recommended to see `onMessageReceived` function in `socket.ts` file to understand how websockets events are fired\n\n```ts\n// for any message with tag 'edge_routing'\nsock.ws.on('CB:edge_routing', (node: BinaryNode) => { })\n\n// for any message with tag 'edge_routing' and id attribute = abcd\nsock.ws.on('CB:edge_routing,id:abcd', (node: BinaryNode) => { })\n\n// for any message with tag 'edge_routing', id attribute = abcd & first content node routing_info\nsock.ws.on('CB:edge_routing,id:abcd,routing_info', (node: BinaryNode) => { })\n```\n\n# License\nCopyright (c) 2025 Rajeh Taher/WhiskeySockets\n\nLicensed under the MIT License:\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThus, the maintainers of the project can't be held liable for any potential misuse of this project.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2025 Rajeh Taher/WhiskeySockets\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@whiskeysockets/baileys/-/baileys-6.7.20.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@whiskeysockets/baileys/-/baileys-6.7.20.tgz",
    "hash": "",
    "integrity": "sha512-KH/jaCSlZbnAnQZhSORIJ9VCuh6aLgYlLo9YZIAbGeL5ovm0S/mx2UNJiPotu+dsno9AwGLIaciGI6BU8twhdA==",
    "registry": "npm",
    "packageName": "@whiskeysockets/baileys",
    "cacheIntegrity": "sha512-KH/jaCSlZbnAnQZhSORIJ9VCuh6aLgYlLo9YZIAbGeL5ovm0S/mx2UNJiPotu+dsno9AwGLIaciGI6BU8twhdA== sha1-aj5EzfWlgHWcZdmd7ZQ9umf3GLU="
  },
  "registry": "npm",
  "hash": "287fe36824a565b9c09d066148e44827d542ba1e9a2e06252e8f5864801b19e2f9a2f9b44bf9b1d9434988fa2dbbe76c9e8f40c062c869c88623a054f2dc2174"
}