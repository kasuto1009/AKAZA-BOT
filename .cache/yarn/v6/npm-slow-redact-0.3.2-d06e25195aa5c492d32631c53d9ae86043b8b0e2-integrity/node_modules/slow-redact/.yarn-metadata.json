{
  "manifest": {
    "name": "slow-redact",
    "version": "0.3.2",
    "description": "Redact JS objects",
    "main": "index.js",
    "types": "index.d.ts",
    "scripts": {
      "test": "node --test && npm run test:types",
      "test:integration": "node --test test/integration.test.js",
      "test:types": "tsd",
      "test:all": "node --test test/*.test.js",
      "lint": "eslint .",
      "lint:fix": "eslint . --fix",
      "bench": "node benchmarks/basic.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/pinojs/slow-redact.git"
    },
    "keywords": [
      "redact"
    ],
    "author": {
      "name": "Matteo Collina",
      "email": "hello@matteocollina.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pinojs/slow-redact/issues"
    },
    "homepage": "https://github.com/pinojs/slow-redact#readme",
    "devDependencies": {
      "eslint": "^9.36.0",
      "fast-redact": "^3.5.0",
      "mitata": "^1.0.34",
      "neostandard": "^0.12.2",
      "tsd": "^0.33.0",
      "typescript": "^5.9.2"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-slow-redact-0.3.2-d06e25195aa5c492d32631c53d9ae86043b8b0e2-integrity/node_modules/slow-redact/package.json",
    "readmeFilename": "README.md",
    "readme": "# slow-redact\n\n> Smart object redaction for JavaScript applications - safe AND fast!\n\nRedact JS objects with the same API as [fast-redact](https://github.com/davidmarkclements/fast-redact), but uses innovative **selective cloning** instead of mutating the original. This provides immutability guarantees with **performance competitive** to fast-redact for real-world usage patterns.\n\n## Install\n\n```bash\nnpm install slow-redact\n```\n\n## Usage\n\n```js\nconst slowRedact = require('slow-redact')\n\nconst redact = slowRedact({\n  paths: ['headers.cookie', 'headers.authorization', 'user.password']\n})\n\nconst obj = {\n  headers: {\n    cookie: 'secret-session-token',\n    authorization: 'Bearer abc123',\n    'x-forwarded-for': '192.168.1.1'\n  },\n  user: {\n    name: 'john',\n    password: 'secret123'\n  }\n}\n\nconsole.log(redact(obj))\n// Output: {\"headers\":{\"cookie\":\"[REDACTED]\",\"authorization\":\"[REDACTED]\",\"x-forwarded-for\":\"192.168.1.1\"},\"user\":{\"name\":\"john\",\"password\":\"[REDACTED]\"}}\n\n// Original object is completely unchanged:\nconsole.log(obj.headers.cookie) // 'secret-session-token'\n```\n\n## API\n\n### slowRedact(options) → Function\n\nCreates a redaction function with the specified options.\n\n#### Options\n\n- **paths** `string[]` (required): An array of strings describing the nested location of a key in an object\n- **censor** `any` (optional, default: `'[REDACTED]'`): The value to replace sensitive data with. Can be a static value or function.\n- **serialize** `Function|boolean` (optional, default: `JSON.stringify`): Serialization function. Set to `false` to return the redacted object.\n- **remove** `boolean` (optional, default: `false`): Remove redacted keys from serialized output\n- **strict** `boolean` (optional, default: `true`): Throw on non-object values or pass through primitives\n\n#### Path Syntax\n\nSupports the same path syntax as fast-redact:\n\n- **Dot notation**: `'user.name'`, `'headers.cookie'`\n- **Bracket notation**: `'user[\"password\"]'`, `'headers[\"X-Forwarded-For\"]'`\n- **Array indices**: `'users[0].password'`, `'items[1].secret'`\n- **Wildcards**:\n  - Terminal: `'users.*.password'` (redacts password for all users)\n  - Intermediate: `'*.password'` (redacts password at any level)\n  - Array wildcard: `'items.*'` (redacts all array elements)\n\n#### Examples\n\n**Custom censor value:**\n```js\nconst redact = slowRedact({\n  paths: ['password'],\n  censor: '***HIDDEN***'\n})\n```\n\n**Dynamic censor function:**\n```js\nconst redact = slowRedact({\n  paths: ['password'],\n  censor: (value, path) => `REDACTED:${path}`\n})\n```\n\n**Return object instead of JSON string:**\n```js\nconst redact = slowRedact({\n  paths: ['secret'],\n  serialize: false\n})\n\nconst result = redact({ secret: 'hidden', public: 'data' })\nconsole.log(result.secret) // '[REDACTED]'\nconsole.log(result.public) // 'data'\n\n// Restore original values\nconst restored = result.restore()\nconsole.log(restored.secret) // 'hidden'\n```\n\n**Custom serialization:**\n```js\nconst redact = slowRedact({\n  paths: ['password'],\n  serialize: obj => JSON.stringify(obj, null, 2)\n})\n```\n\n**Remove keys instead of redacting:**\n```js\nconst redact = slowRedact({\n  paths: ['password', 'user.secret'],\n  remove: true\n})\n\nconst obj = { username: 'john', password: 'secret123', user: { name: 'Jane', secret: 'hidden' } }\nconsole.log(redact(obj))\n// Output: {\"username\":\"john\",\"user\":{\"name\":\"Jane\"}}\n// Note: 'password' and 'user.secret' are completely absent, not redacted\n```\n\n**Wildcard patterns:**\n```js\n// Redact all properties in secrets object\nconst redact1 = slowRedact({ paths: ['secrets.*'] })\n\n// Redact password for any user\nconst redact2 = slowRedact({ paths: ['users.*.password'] })\n\n// Redact all items in an array\nconst redact3 = slowRedact({ paths: ['items.*'] })\n\n// Remove all secrets instead of redacting them\nconst redact4 = slowRedact({ paths: ['secrets.*'], remove: true })\n```\n\n## Key Differences from fast-redact\n\n### Safety First\n- **No mutation**: Original objects are never modified\n- **Selective cloning**: Only clones paths that need redaction, shares references for everything else\n- **Restore capability**: Can restore original values when `serialize: false`\n\n### Feature Compatibility\n- **Remove option**: Full compatibility with fast-redact's `remove: true` option to completely omit keys from output\n- **All path patterns**: Supports same syntax including wildcards, bracket notation, and array indices\n- **Censor functions**: Dynamic censoring with path information passed as arrays\n- **Serialization**: Custom serializers and `serialize: false` mode\n\n### Smart Performance Approach\n- **Selective cloning**: Analyzes redaction paths and only clones necessary object branches\n- **Reference sharing**: Non-redacted properties maintain original object references\n- **Memory efficiency**: Dramatically reduced memory usage for large objects with minimal redaction\n- **Setup-time optimization**: Path analysis happens once during setup, not per redaction\n\n### When to Use slow-redact\n- When immutability is critical\n- When you need to preserve original objects\n- When objects are shared across multiple contexts\n- In functional programming environments\n- When debugging and you need to compare before/after\n- **Large objects with selective redaction** (now performance-competitive!)\n- When memory efficiency with reference sharing is important\n\n### When to Use fast-redact\n- When absolute maximum performance is critical\n- In extremely high-throughput scenarios (>100,000 ops/sec)\n- When you control the object lifecycle and mutation is acceptable\n- Very small objects where setup overhead matters\n\n## Performance Benchmarks\n\nslow-redact uses **selective cloning** that provides good performance while maintaining immutability guarantees:\n\n### Performance Results\n\n| Operation Type | slow-redact | fast-redact | Performance Ratio |\n|---------------|-------------|-------------|-------------------|\n| **Small objects** | ~690ns | ~200ns | ~3.5x slower |\n| **Large objects (minimal redaction)** | **~18μs** | ~17μs | **~same performance** |\n| **Large objects (wildcards)** | **~48μs** | ~37μs | **~1.3x slower** |\n| **No redaction (large objects)** | **~18μs** | ~17μs | **~same performance** |\n\n### Performance Improvements\n\nslow-redact is performance-competitive with fast-redact for large objects.\n\n1. **Selective cloning approach**: Only clones object paths that need redaction\n2. **Reference sharing**: Non-redacted properties share original object references\n3. **Setup-time optimization**: Path analysis happens once, not per redaction\n4. **Memory efficiency**: Dramatically reduced memory usage for typical use cases\n\n### Benchmark Details\n\n**Small Objects (~180 bytes)**:\n- slow-redact: **690ns** per operation\n- fast-redact: **200ns** per operation\n- **Slight setup overhead for small objects**\n\n**Large Objects (~18KB, minimal redaction)**:\n- slow-redact: **18μs** per operation\n- fast-redact: **17μs** per operation\n- Near-identical performance\n\n**Large Objects (~18KB, wildcard patterns)**:\n- slow-redact: **48μs** per operation\n- fast-redact: **37μs** per operation\n- Competitive performance for complex patterns\n\n**Memory Considerations**:\n- slow-redact: **Selective reference sharing** (much lower memory usage than before)\n- fast-redact: Mutates in-place (lowest memory usage)\n- Large objects with few redacted paths now share most references\n\n### When Performance Matters\n\nChoose **fast-redact** when:\n- Absolute maximum performance is critical (>100,000 ops/sec)\n- Working with very small objects frequently\n- Mutation is acceptable and controlled\n- Every microsecond counts\n\nChoose **slow-redact** when:\n- Immutability is required (with competitive performance)\n- Objects are shared across contexts\n- Large objects with selective redaction\n- Memory efficiency through reference sharing is important\n- Safety and functionality are priorities\n- Most production applications (performance gap is minimal)\n\nRun benchmarks yourself:\n```bash\nnpm run bench\n```\n\n## How Selective Cloning Works\n\nslow-redact uses an innovative **selective cloning** approach that provides immutability guarantees while dramatically improving performance:\n\n### Traditional Approach (before optimization)\n```js\n// Old approach: Deep clone entire object, then redact\nconst fullClone = deepClone(originalObject)  // Clone everything\nredact(fullClone, paths)                     // Then redact specific paths\n```\n\n### Selective Cloning Approach (current)\n```js\n// New approach: Analyze paths, clone only what's needed\nconst pathStructure = buildPathStructure(paths)  // One-time setup\nconst selectiveClone = cloneOnlyNeededPaths(obj, pathStructure)  // Smart cloning\nredact(selectiveClone, paths)  // Redact pre-identified paths\n```\n\n### Key Innovations\n\n1. **Path Analysis**: Pre-processes redaction paths into an efficient tree structure\n2. **Selective Cloning**: Only creates new objects for branches that contain redaction targets\n3. **Reference Sharing**: Non-redacted properties maintain exact same object references\n4. **Setup Optimization**: Path parsing happens once during redactor creation, not per redaction\n\n### Example: Reference Sharing in Action\n\n```js\nconst largeConfig = {\n  database: { /* large config object */ },\n  api: { /* another large config */ },\n  secrets: { password: 'hidden', apiKey: 'secret' }\n}\n\nconst redact = slowRedact({ paths: ['secrets.password'] })\nconst result = redact(largeConfig)\n\n// Only secrets object is cloned, database and api share original references\nconsole.log(result.database === largeConfig.database)  // true - shared reference!\nconsole.log(result.api === largeConfig.api)            // true - shared reference!\nconsole.log(result.secrets === largeConfig.secrets)    // false - cloned for redaction\n```\n\nThis approach provides **immutability where it matters** while **sharing references where it's safe**.\n\n## Remove Option\n\nThe `remove: true` option provides full compatibility with fast-redact's key removal functionality:\n\n```js\nconst redact = slowRedact({\n  paths: ['password', 'secrets.*', 'users.*.credentials'],\n  remove: true\n})\n\nconst data = {\n  username: 'john',\n  password: 'secret123',\n  secrets: { apiKey: 'abc', token: 'xyz' },\n  users: [\n    { name: 'Alice', credentials: { password: 'pass1' } },\n    { name: 'Bob', credentials: { password: 'pass2' } }\n  ]\n}\n\nconsole.log(redact(data))\n// Output: {\"username\":\"john\",\"secrets\":{},\"users\":[{\"name\":\"Alice\"},{\"name\":\"Bob\"}]}\n```\n\n### Remove vs Redact Behavior\n\n| Option | Behavior | Output Example |\n|--------|----------|----------------|\n| Default (redact) | Replaces values with censor | `{\"password\":\"[REDACTED]\"}` |\n| `remove: true` | Completely omits keys | `{}` |\n\n### Compatibility Notes\n\n- **Same output as fast-redact**: Identical JSON output when using `remove: true`\n- **Wildcard support**: Works with all wildcard patterns (`*`, `users.*`, `items.*.secret`)\n- **Array handling**: Array items are set to `undefined` (omitted in JSON output)\n- **Nested paths**: Supports deep removal (`users.*.credentials.password`)\n- **Serialize compatibility**: Only works with `JSON.stringify` serializer (like fast-redact)\n\n## Testing\n\n```bash\n# Run unit tests\nnpm test\n\n# Run integration tests comparing with fast-redact\nnpm run test:integration\n\n# Run all tests (unit + integration)\nnpm run test:all\n\n# Run benchmarks\nnpm run bench\n```\n\n### Test Coverage\n\n- **16 unit tests**: Core functionality and edge cases\n- **16 integration tests**: Output compatibility with fast-redact\n- **All major features**: Paths, wildcards, serialization, custom censors\n- **Performance benchmarks**: Direct comparison with fast-redact\n\n## License\n\nMIT\n\n## Contributing\n\nPull requests welcome! Please ensure all tests pass and add tests for new features.",
    "licenseText": "MIT License\n\nCopyright (c) 2025 pinojs contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/slow-redact/-/slow-redact-0.3.2.tgz#d06e25195aa5c492d32631c53d9ae86043b8b0e2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/slow-redact/-/slow-redact-0.3.2.tgz",
    "hash": "d06e25195aa5c492d32631c53d9ae86043b8b0e2",
    "integrity": "sha512-MseHyi2+E/hBRqdOi5COy6wZ7j7DxXRz9NkseavNYSvvWC06D8a5cidVZX3tcG5eCW3NIyVU4zT63hw0Q486jw==",
    "registry": "npm",
    "packageName": "slow-redact",
    "cacheIntegrity": "sha512-MseHyi2+E/hBRqdOi5COy6wZ7j7DxXRz9NkseavNYSvvWC06D8a5cidVZX3tcG5eCW3NIyVU4zT63hw0Q486jw== sha1-0G4lGVqlxJLTJjHFPZroYEO4sOI="
  },
  "registry": "npm",
  "hash": "d06e25195aa5c492d32631c53d9ae86043b8b0e2"
}