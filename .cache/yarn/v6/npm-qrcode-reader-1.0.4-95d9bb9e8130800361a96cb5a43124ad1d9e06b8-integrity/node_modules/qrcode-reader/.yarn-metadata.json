{
  "manifest": {
    "name": "qrcode-reader",
    "version": "1.0.4",
    "description": "fork of lazarsoft's jsqrcode for node",
    "main": "dist/index.js",
    "module": "src/index.js",
    "jsnext:main": "src/index.js",
    "scripts": {
      "build": "rollup -c",
      "watch": "rollup -c -w",
      "minify": "uglifyjs dist/index.js -o dist/index.min.js --compress --mangle",
      "lint": "eslint src test",
      "pretest": "npm run lint",
      "test": "mocha",
      "build-and-test": "npm run build && npm test",
      "preversion": "npm run lint && npm run build && npm run minify && npm test"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/edi9999/jsqrcode.git"
    },
    "author": {},
    "license": "Apache-2.0",
    "bugs": {
      "url": "https://github.com/edi9999/jsqrcode/issues"
    },
    "homepage": "https://github.com/edi9999/jsqrcode",
    "devDependencies": {
      "chai": "^4.1.2",
      "eslint": "^4.7.2",
      "image-parser": "^1.2.5",
      "jimp": "^0.2.28",
      "mocha": "^3.5.3",
      "rollup": "^0.50.0",
      "uglify-js": "^3.1.2"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-qrcode-reader-1.0.4-95d9bb9e8130800361a96cb5a43124ad1d9e06b8-integrity/node_modules/qrcode-reader/package.json",
    "readmeFilename": "README.md",
    "readme": "JavaScript QRCode reader for HTML5 enabled browser.\n===================================================\n\nThis was started as a port of Lazarsoftâ€™s qrcode reader.\n\nIt is a maintained fork, so feel free to open issues or PR !\n\n[![Build Status](https://travis-ci.org/edi9999/jsqrcode.svg?branch=master&style=flat)](https://travis-ci.org/edi9999/jsqrcode)\n\nInstallation\n============\n\n```\nnpm install qrcode-reader\n```\n\nUsage\n=====\n\n```\nvar QrCode = require('qrcode-reader');\n```\n\nCreate a new instance of QrCode:\n\n```\nvar qr = new QrCode();\n```\n\nSet its callback to a custom function:\n\n```\nqr.callback = function(error, result) {\n  if(error) {\n    console.log(error)\n    return;\n  }\n  console.log(result)\n}\n```\n\nPassing image data in node\n==========================\n\nYou have to use an external imageparser\n\n1.\tYou can use `npm install --save jimp` which doesn't have any dependency (runs in pure node).\n\n\t```javascript\n\tvar Jimp = require(\"jimp\");\n\tvar buffer = fs.readFileSync(__dirname + '/image.png');\n\tJimp.read(buffer, function(err, image) {\n\t    if (err) {\n\t        console.error(err);\n\t        // TODO handle error\n\t    }\n\t    var qr = new QrCode();\n\t    qr.callback = function(err, value) {\n\t        if (err) {\n\t            console.error(err);\n\t            // TODO handle error\n\t        }\n\t        console.log(value.result);\n\t        console.log(value);\n\t    };\n\t    qr.decode(image.bitmap);\n\t});\n\t```\n\n2.\tYou can use `npm install --save image-parser`, which depends on lwip or graphicsmagick\n\n\t```javascript\n\tvar ImageParser = require(\"image-parser\");\n\tvar buffer = fs.readFileSync(__dirname + '/image.png');\n\tvar img = new ImageParser(img);\n\timg.parse(function(err) {\n\t    if (err) {\n\t        console.error(err);\n\t        // TODO handle error\n\t    }\n\t    var qr = new QrCode();\n\t    qr.callback = function(err, value) {\n\t        if (err) {\n\t            console.error(err);\n\t            // TODO handle error\n\t            return done(err);\n\t        }\n\t        console.log(value.result);\n\t        console.log(value);\n\t    };\n\t    qr.decode({width: img.width(), height: img.height()}, img._imgBuffer);\n\t});\n\t```\n\nPassing image data in the browser\n=================================\n\nSince the browser contains the Image global, we can use it to open images with URL, Data URI, ...\n\nDecode an image by its URL or Data URI:\n\n```\n\nqr.decode(url or DataURL);\n\n```\n\nDecode an image by context.getImageData: Works with [web workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers).\n\n```\n\nvar context = canvas.getContext(\"2d\"); var data = context.getImageData(0, 0, width, height);\n\nqr.decode(data);\n\n```\n\n====================\n\nIf you want, you can build the script yourself.\n\nFirst clone the repository, then from the directory of this repository, do:\n\n```\n\nnpm install\n\n```\n\nTo run the build process and generate a JavaScript file called `dist/index.js` you can run from node:\n\n```\n\nnpm run build\n\n```\n\nTo run the tests:\n\n```\n\nnpm test\n\n```\n\nMake it work in the browser\n===========================\n\nThe generated file `dist/index.js` works in the browser.\n\nYou will have access to the global variable `QrCode` if you do the following in your HTML:\n\n\\`\\`\\`\n\n<script src=\"dist/index.js\"></script> \\`\\`\\`\n\nSee [examples/browser-upload/index.html](examples/browser-upload/index.html) for a very basic example using a file upload.\n\nChangelog\n=========\n\nSee [`CHANGELOG.md`](CHANGELOG.md)\\.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/qrcode-reader/-/qrcode-reader-1.0.4.tgz#95d9bb9e8130800361a96cb5a43124ad1d9e06b8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/qrcode-reader/-/qrcode-reader-1.0.4.tgz",
    "hash": "95d9bb9e8130800361a96cb5a43124ad1d9e06b8",
    "integrity": "sha512-rRjALGNh9zVqvweg1j5OKIQKNsw3bLC+7qwlnead5K/9cb1cEIAGkwikt/09U0K+2IDWGD9CC6SP7tHAjUeqvQ==",
    "registry": "npm",
    "packageName": "qrcode-reader",
    "cacheIntegrity": "sha512-rRjALGNh9zVqvweg1j5OKIQKNsw3bLC+7qwlnead5K/9cb1cEIAGkwikt/09U0K+2IDWGD9CC6SP7tHAjUeqvQ== sha1-ldm7noEwgANhqWy1pDEkrR2eBrg="
  },
  "registry": "npm",
  "hash": "95d9bb9e8130800361a96cb5a43124ad1d9e06b8"
}