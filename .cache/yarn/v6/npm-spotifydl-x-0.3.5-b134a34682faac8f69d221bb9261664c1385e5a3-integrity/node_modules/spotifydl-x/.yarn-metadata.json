{
  "manifest": {
    "name": "spotifydl-x",
    "version": "0.3.5",
    "description": "Spotify downloader for node",
    "main": "dist/index.js",
    "files": [
      "dist/**/*"
    ],
    "types": "dist",
    "scripts": {
      "build": "tsc -p .",
      "test": "node tests",
      "docs": "typedoc",
      "prepare": "npm run build",
      "prettier-format": "prettier --config .prettierrc \"src/**/*.ts\" --write"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/alensaito1/spotifydl-core.git"
    },
    "keywords": [
      "spotify",
      "spotify-downloader",
      "music"
    ],
    "author": {
      "name": "Alen Yohannan"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/alensaito1/spotifydl-core/issues"
    },
    "homepage": "https://github.com/alensaito1/spotifydl-core#readme",
    "devDependencies": {
      "@types/fluent-ffmpeg": "^2.1.21",
      "@types/fs-extra": "^11.0.1",
      "@types/node": "^15.3.0",
      "@types/spotify-web-api-node": "^5.0.7",
      "@types/yt-search": "^2.3.2",
      "@typescript-eslint/eslint-plugin": "^5.57.1",
      "@typescript-eslint/parser": "^5.57.1",
      "eslint": "^8.38.0",
      "prettier": "^2.8.7",
      "typedoc": "^0.24.0",
      "typescript": "^5.0.4"
    },
    "dependencies": {
      "axios": "^1.3.5",
      "fluent-ffmpeg": "^2.1.2",
      "fs-extra": "^11.1.1",
      "spotify-web-api-node": "^5.0.2",
      "youtubedl-core": "^4.11.4",
      "yt-search": "^2.10.4"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-spotifydl-x-0.3.5-b134a34682faac8f69d221bb9261664c1385e5a3-integrity/node_modules/spotifydl-x/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=center>\n\n# Spotifydl-Core\n\n<img src=\"https://img.icons8.com/nolan/256/spotify.png\" alt=\"Never gonna give up, never gonna let you down\"/>\n\n### A simple package to download music tracks from spotify üéµ\n</div>\n\n## Installation \n\n```sh\n> npm i spotifydl-core\n```\n\n## Intialization \n\nYou need to intialize the `Spotify` Class before acessing the methods inside it.\n\n```js\nconst Spotify = require('spotifydl-core').default\n//import Spotify from 'spotifydl-core'\n\nconst credentials = {\n    clientId: 'your-client-id',\n    clientSecret: 'your-client-secret'\n}\nconst spotify = new Spotify(credentials)\n```\n\n## Methods \n> **NOTE: Only some methods are shown here. Checkout the [docs](https://alensaito1.github.io/spotifydl-core/) for a more in-depth documentation**\n\n**Get Track ‚è≠Ô∏è**\n```JS\nawait spotify.getTrack(track_url) \n\n// For Example: track_url = 'https://open.spotify.com/track/1Ub6VfiTXgyV8HnsfzrZzC?si=4412ef4ebd8141ab'\n\n// Input: url of the track, Type: string\n```\n**Download Track/Song ‚¨áÔ∏è**\n```JS\nawait spotify.downloadTrack(track_url, file_name)\n\n// For Example: track_url = 'https://open.spotify.com/track/1Ub6VfiTXgyV8HnsfzrZzC?si=4412ef4ebd8141ab' & file_name = 'song.mp3'\n\n// Input: url of the track and name of the filename, Both Type: string\n\n// It'll return buffer (promise) if you don't provide any filename\n\n```\n\n**Get Artist üë©‚Äçüé§üßë‚Äçüé§**\n```JS\nawait spotify.getArtist(artist_url)\n\n// For Example: artist_url = 'https://open.spotify.com/artist/3B9O5mYYw89fFXkwKh7jCS'\n\n// Input: url of the artist, Type: string\n```\n\n**Get Album üíΩ**\n```JS\nawait spotify.getAlbum(album_url)\n\n// For Example: album_url = 'https://open.spotify.com/album/3u3WsbVPLT0fXiClx9GYD9?si=pfGAdL3VRiid0M3Ln_0DNg'\n\n// Input: url of the album, Type: string\n```\n\n**Get Playlist üéß**\n\n```JS\nawait spotify.getPlylist(playlist_url)\n\n// Input: url of the playlist, Type: string\n```\n\n**Download an Entire playlist**\n\n```JS\nawait spotify.downloadPlaylist(playlist_url)\n\n//It'll return an array containing the Buffer of the songs in the playlist\n```\n\n## Usage Example\n```JS\nconst fs = require('fs-extra') \n// Initialization and Authentication \nconst Spotify = require('spotifydl-core').default // Import the library \nconst spotify = new Spotify({ // Authentication\n    clientId: 'acc6302297e040aeb6e4ac1fbdfd62c3', // <-- add your own clientId \n    clientSecret: '0e8439a1280a43aba9a5bc0a16f3f009', // <-- add your own clientSecret \n})\n/* To learn more about clientId and Secret  , \nvisit https://developer.spotify.com/documentation/general/guides/app-settings/ \n*/\n\n// Declaring the respective url in 'links' object \nconst links = {\n    artist: 'https://open.spotify.com/artist/7ky9g1jEjCsjNjZbYuflUJ?si=2To3fmc-T9KuyyrQ-Qp5KQ', // Url of the artist you want to gather info about\n    album: 'https://open.spotify.com/album/3u3WsbVPLT0fXiClx9GYD9?si=pfGAdL3VRiid0M3Ln_0DNg', // Url of the album you want to gather info about\n    song: 'https://open.spotify.com/track/1Ub6VfiTXgyV8HnsfzrZzC?si=4412ef4ebd8141ab' // Url of the song you want to gather info about or download\n};\n\n// Engine \n(async () => {\n    const data = await spotify.getTrack(links.song) // Waiting for the data ü•±\n    console.log('Downloading: ', data.name, 'by:', data.artists.join(' ')) // Keep an eye on the progress\n    const song = await spotify.downloadTrack(links.song) // Downloading goes brr brr \n    fs.writeFileSync('song.mp3', song) // Let's write the buffer to the woofer (i mean file, hehehe) \n})()\n\n//spotify.verifyCredentials().then(() => Promise.all([spotify.getTrack(links.song), spotify.getAlbum(links.album), spotify.getArtistAlbums(links.artist)]).then(console.log))\n```\n\n# üôá‚Äç Special Thanks\n\n- Swapnil Soni: [Spotify-dl](https://github.com/SwapnilSoni1999/spotify-dl)\n- Fent: [Ytdl-core](https://github.com/fent/node-ytdl-core)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Alen Yohannan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/spotifydl-x/-/spotifydl-x-0.3.5.tgz#b134a34682faac8f69d221bb9261664c1385e5a3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/spotifydl-x/-/spotifydl-x-0.3.5.tgz",
    "hash": "b134a34682faac8f69d221bb9261664c1385e5a3",
    "integrity": "sha512-N8KQdkd+EBL/owdvVmkUHDI7Qsm4ZgfUviQqBRRHQt9RYegPMnwL/kEh+QpYlcVgwbbxf9aTeqvve8g20A8ldQ==",
    "registry": "npm",
    "packageName": "spotifydl-x",
    "cacheIntegrity": "sha512-N8KQdkd+EBL/owdvVmkUHDI7Qsm4ZgfUviQqBRRHQt9RYegPMnwL/kEh+QpYlcVgwbbxf9aTeqvve8g20A8ldQ== sha1-sTSjRoL6rI9p0iG7kmFmTBOF5aM="
  },
  "registry": "npm",
  "hash": "b134a34682faac8f69d221bb9261664c1385e5a3"
}