{
  "manifest": {
    "name": "bmp-ts",
    "version": "1.0.9",
    "description": "A pure typescript BMP encoder and decoder",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/hipstersmoothie/bmp-ts"
    },
    "files": [
      "dist",
      "types"
    ],
    "author": {
      "name": "Andrew lisowski",
      "email": "lisowski54@gmail.com"
    },
    "scripts": {
      "build": "tshy",
      "test": "vitest",
      "release": "auto shipit"
    },
    "devDependencies": {
      "@types/node": "^10.11.7",
      "auto": "^11.1.2",
      "prettier": "^3.2.5",
      "tshy": "^1.12.0",
      "typescript": "^5.4.3",
      "vitest": "^1.4.0"
    },
    "prettier": {
      "singleQuote": true
    },
    "keywords": [
      "bmp",
      "1bit",
      "4bit",
      "8bit",
      "16bit",
      "24bit",
      "32bit",
      "encoder",
      "decoder",
      "image",
      "javascript",
      "js"
    ],
    "tshy": {
      "exclude": [
        "**/__test__/**"
      ],
      "exports": {
        "./package.json": "./package.json",
        ".": "./src/index.ts"
      }
    },
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "import": {
          "types": "./dist/esm/index.d.ts",
          "default": "./dist/esm/index.js"
        },
        "require": {
          "types": "./dist/commonjs/index.d.ts",
          "default": "./dist/commonjs/index.js"
        }
      }
    },
    "main": "./dist/commonjs/index.js",
    "types": "./dist/commonjs/index.d.ts",
    "type": "module",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-bmp-ts-1.0.9-0fd124ba812be9b786b29e5b186ee76d74ff5538-integrity/node_modules/bmp-ts/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"./logo.png\">\n  <h1>bmp-ts</h1>\n  <p>A pure typescript <code>bmp</code> encoder and decoder.</p>\n</div\n\n[![Codecov](https://img.shields.io/codecov/c/github/hipstersmoothie/bmp-ts.svg?style=for-the-badge)](https://codecov.io/gh/hipstersmoothie/bmp-ts)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=for-the-badge)](https://github.com/prettier/prettier)\n\nSupports decoding and encoding in all bit depths (1, 4, 8, 16, 24, 32).\n\n## Install\n\n```sh\nnpm install bmp-ts\n```\n\n## Usage\n\n### Decoding\n\n`decode` will return an object that includes all the header properties of the `bmp` image file and the data. See header definition [below](#header).\n\n```js\nconst bmp = require('bmp-ts').default;\nconst bmpBuffer = fs.readFileSync('bit24.bmp');\nconst bmpData = bmp.decode(bmpBuffer);\n```\n\n#### Options\n\n- toRGBA - switch the output to big endian RGBA, making it compatible with other libraries like `pngjs`\n\n```js\nconst bmp = require('bmp-ts').default;\nconst bmpBuffer = fs.readFileSync('bit24.bmp');\nconst bmpData = bmp.decode(bmpBuffer, { toRGBA: true });\n```\n\n#### Supported Compression Methods\n\nCurrently compression is only supported during decoding. The following methods are implemented:\n\n- NONE - Most common\n- BI_RLE8 - Can be used only with 8-bit/pixel bitmap\n- BI_RLE4 - Can be used only with 4-bit/pixel bitmaps\n- BI_BIT_FIELDS - Huffman 1D - BITMAPV2INFOHEADER: RGB bit field masks, BITMAPV3INFOHEADER+: RGBA\n- BI_ALPHA_BIT_FIELDS - RGBA bit field masks - only Windows CE 5.0 with .NET 4.0 or later\n\n### Encoding\n\nTo encode an image all you need is a buffer with the image data, the height and the width. You can specify the bit depth of the output image by modifying `bitPP`. If you do not provide a value, the output image defaults to 24-bit.\n\nAll header fields are valid options to `encode` and will be encoded into the header.\n\n```js\nconst bmp = require('bmp-ts').default;\nconst fs = require('fs');\nconst bmpData = {\n  data, // Buffer\n  bitPP: 1 | 2 | 4 | 16 | 24 | 32, // The number of bits per pixel\n  width, // Number\n  height, // Number\n};\n\n// Compression is not supported\nconst rawData = bmp.encode(bmpData);\nfs.writeFileSync('./image.bmp', rawData.data);\n```\n\n## Header\n\n| Property        | Type    | Purpose                                                                                                |\n| --------------- | ------- | ------------------------------------------------------------------------------------------------------ |\n| fileSize        | number  | The size of the BMP file in bytes                                                                      |\n| reserve1        | number  | Reserved; actual value depends on the application that creates the image                               |\n| reserve2        | number  | Reserved; actual value depends on the application that creates the image                               |\n| offset          | number  | The offset, i.e. starting address, of the byte where the bitmap image data (pixel array) can be found. |\n| headerSize      | number  | The size of this header (12 bytes)                                                                     |\n| width           | number  | The bitmap width in pixels (unsigned 16-bit)                                                           |\n| height          | number  | The bitmap height in pixels (unsigned 16-bit)                                                          |\n| planes          | number  | The number of color planes, must be 1                                                                  |\n| bitPP           | number  | The number of bits per pixel                                                                           |\n| compress        | number  | The compression method being used. See the supported compression methods                               |\n| rawSize         | number  | The image size. This is the size of the raw bitmap data; a dummy 0 can be given for BI_RGB bitmaps.    |\n| hr              | number  | The horizontal resolution of the image. (pixel per metre, signed integer)                              |\n| vr              | number  | The vertical resolution of the image. (pixel per metre, signed integer)                                |\n| colors          | number  | The number of colors in the color palette, or 0 to default to 2n                                       |\n| importantColors | number  | The number of important colors used, or 0 when every color is important; generally ignored             |\n| palette         | Color[] | The colors used to render the image. only used for 1, 4, and 8 bitPP images                            |\n| data            | Byte[]  | The data in ABGR                                                                                       |\n\n### Color\n\nThe color palette is returned when decoding a 1, 4, or 8 bit image.\n\nColor Format:\n\n```json\n{\n  \"red\": 255,\n  \"green\": 255,\n  \"blue\": 255,\n  \"quad\": 255\n}\n```\n\nTo encode to 4 or 8 bit a color palette must be provided. 1 bit defaults to black and white but you can override this via palette.\n\n```js\nconst rawData = bmp.encode({\n  data,\n  bitPP: 8,\n  width,\n  height,\n  palette: [\n    { red: 255, green: 255, blue: 255, quad: 0 },\n    { red: 255, green: 255, blue: 0, quad: 0 },\n    { red: 255, green: 0, blue: 255, quad: 0 },\n    { red: 255, green: 0, blue: 0, quad: 0 },\n    { red: 0, green: 255, blue: 255, quad: 0 },\n    { red: 0, green: 255, blue: 0, quad: 0 },\n    { red: 0, green: 0, blue: 255, quad: 0 },\n    { red: 0, green: 0, blue: 0, quad: 0 },\n  ],\n});\n\nfs.writeFileSync('./image.bmp', rawData.data);\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 Andrew Lisowski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/bmp-ts/-/bmp-ts-1.0.9.tgz#0fd124ba812be9b786b29e5b186ee76d74ff5538",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/bmp-ts/-/bmp-ts-1.0.9.tgz",
    "hash": "0fd124ba812be9b786b29e5b186ee76d74ff5538",
    "integrity": "sha512-cTEHk2jLrPyi+12M3dhpEbnnPOsaZuq7C45ylbbQIiWgDFZq4UVYPEY5mlqjvsj/6gJv9qX5sa+ebDzLXT28Vw==",
    "registry": "npm",
    "packageName": "bmp-ts",
    "cacheIntegrity": "sha512-cTEHk2jLrPyi+12M3dhpEbnnPOsaZuq7C45ylbbQIiWgDFZq4UVYPEY5mlqjvsj/6gJv9qX5sa+ebDzLXT28Vw== sha1-D9EkuoEr6beGsp5bGG7nbXT/VTg="
  },
  "registry": "npm",
  "hash": "0fd124ba812be9b786b29e5b186ee76d74ff5538"
}