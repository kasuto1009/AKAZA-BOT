{
  "manifest": {
    "name": "zod",
    "version": "3.25.76",
    "type": "module",
    "author": {
      "name": "Colin McDonnell",
      "email": "zod@colinhacks.com"
    },
    "description": "TypeScript-first schema declaration and validation library with static type inference",
    "files": [
      "src",
      "**/*.js",
      "**/*.mjs",
      "**/*.cjs",
      "**/*.d.ts",
      "**/*.d.mts",
      "**/*.d.cts"
    ],
    "funding": "https://github.com/sponsors/colinhacks",
    "homepage": "https://zod.dev/",
    "keywords": [
      "typescript",
      "schema",
      "validation",
      "type",
      "inference"
    ],
    "license": "MIT",
    "sideEffects": false,
    "main": "./index.cjs",
    "types": "./index.d.cts",
    "module": "./index.js",
    "zshy": {
      "exports": {
        "./package.json": "./package.json",
        ".": "./src/index.ts",
        "./v3": "./src/v3/index.ts",
        "./v4": "./src/v4/index.ts",
        "./v4-mini": "./src/v4-mini/index.ts",
        "./v4/mini": "./src/v4/mini/index.ts",
        "./v4/core": "./src/v4/core/index.ts",
        "./v4/locales": "./src/v4/locales/index.ts",
        "./v4/locales/*": "./src/v4/locales/*"
      },
      "sourceDialects": [
        "@zod/source"
      ]
    },
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "@zod/source": "./src/index.ts",
        "types": "./index.d.cts",
        "import": "./index.js",
        "require": "./index.cjs"
      },
      "./v3": {
        "@zod/source": "./src/v3/index.ts",
        "types": "./v3/index.d.cts",
        "import": "./v3/index.js",
        "require": "./v3/index.cjs"
      },
      "./v4": {
        "@zod/source": "./src/v4/index.ts",
        "types": "./v4/index.d.cts",
        "import": "./v4/index.js",
        "require": "./v4/index.cjs"
      },
      "./v4-mini": {
        "@zod/source": "./src/v4-mini/index.ts",
        "types": "./v4-mini/index.d.cts",
        "import": "./v4-mini/index.js",
        "require": "./v4-mini/index.cjs"
      },
      "./v4/mini": {
        "@zod/source": "./src/v4/mini/index.ts",
        "types": "./v4/mini/index.d.cts",
        "import": "./v4/mini/index.js",
        "require": "./v4/mini/index.cjs"
      },
      "./v4/core": {
        "@zod/source": "./src/v4/core/index.ts",
        "types": "./v4/core/index.d.cts",
        "import": "./v4/core/index.js",
        "require": "./v4/core/index.cjs"
      },
      "./v4/locales": {
        "@zod/source": "./src/v4/locales/index.ts",
        "types": "./v4/locales/index.d.cts",
        "import": "./v4/locales/index.js",
        "require": "./v4/locales/index.cjs"
      },
      "./v4/locales/*": {
        "@zod/source": "./src/v4/locales/*",
        "types": "./v4/locales/*",
        "import": "./v4/locales/*",
        "require": "./v4/locales/*"
      }
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/colinhacks/zod.git"
    },
    "bugs": {
      "url": "https://github.com/colinhacks/zod/issues"
    },
    "support": {
      "backing": {
        "npm-funding": true
      }
    },
    "scripts": {
      "clean": "git clean -xdf . -e node_modules",
      "build": "zshy --project tsconfig.build.json",
      "postbuild": "pnpm biome check --write .",
      "test:watch": "pnpm vitest",
      "test": "pnpm vitest run",
      "bump:beta": "pnpm version \"v$(pnpm pkg get version | jq -r)-beta.$(date +%Y%m%dT%H%M%S)\"",
      "pub:beta": "pnpm bump:beta && pnpm publish --tag next --publish-branch v4 --no-git-checks --dry-run"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-zod-3.25.76-26841c3f6fd22a6a2760e7ccb719179768471e34-integrity/node_modules/zod/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <img src=\"logo.svg\" width=\"200px\" align=\"center\" alt=\"Zod logo\" />\n  <h1 align=\"center\">Zod</h1>\n  <p align=\"center\">\n    TypeScript-first schema validation with static type inference\n    <br/>\n    by <a href=\"https://x.com/colinhacks\">@colinhacks</a>\n  </p>\n</p>\n<br/>\n\n<p align=\"center\">\n<a href=\"https://github.com/colinhacks/zod/actions?query=branch%3Amaster\"><img src=\"https://github.com/colinhacks/zod/actions/workflows/test.yml/badge.svg?event=push&branch=master\" alt=\"Zod CI status\" /></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/license/colinhacks/zod\" alt=\"License\"></a>\n<a href=\"https://www.npmjs.com/package/zod\" rel=\"nofollow\"><img src=\"https://img.shields.io/npm/dw/zod.svg\" alt=\"npm\"></a>\n<a href=\"https://discord.gg/KaSRdyX2vc\" rel=\"nofollow\"><img src=\"https://img.shields.io/discord/893487829802418277?label=Discord&logo=discord&logoColor=white\" alt=\"discord server\"></a>\n<a href=\"https://github.com/colinhacks/zod\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/colinhacks/zod\" alt=\"stars\"></a>\n</p>\n\n<div align=\"center\">\n  <a href=\"https://zod.dev/api\">Docs</a>\n  <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span>\n  <a href=\"https://discord.gg/RcG33DQJdf\">Discord</a>\n  <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span>\n  <a href=\"https://twitter.com/colinhacks\">ùïè</a>\n  <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span>\n  <a href=\"https://bsky.app/profile/zod.dev\">Bluesky</a>\n  <br />\n</div>\n\n<br/>\n<br/>\n\n<h2 align=\"center\">Featured sponsor: Jazz</h2>\n\n<div align=\"center\">\n  <a href=\"https://jazz.tools/?utm_source=zod\">\n    <picture width=\"85%\" >\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/garden-co/jazz/938f6767e46cdfded60e50d99bf3b533f4809c68/homepage/homepage/public/Zod%20sponsor%20message.png\">\n      <img alt=\"jazz logo\" src=\"https://raw.githubusercontent.com/garden-co/jazz/938f6767e46cdfded60e50d99bf3b533f4809c68/homepage/homepage/public/Zod%20sponsor%20message.png\" width=\"85%\">\n    </picture>\n  </a>\n  <br/>\n  <p><sub>Learn more about <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:sponsorship@colinhacks.com\">featured sponsorships</a></sub></p>\n</div>\n\n<br/>\n<br/>\n<br/>\n\n### [Read the docs ‚Üí](https://zod.dev/api)\n\n<br/>\n<br/>\n\n## What is Zod?\n\nZod is a TypeScript-first validation library. Define a schema and parse some data with it. You'll get back a strongly typed, validated result.\n\n```ts\nimport * as z from \"zod/v4\";\n\nconst User = z.object({\n  name: z.string(),\n});\n\n// some untrusted data...\nconst input = {\n  /* stuff */\n};\n\n// the parsed result is validated and type safe!\nconst data = User.parse(input);\n\n// so you can use it with confidence :)\nconsole.log(data.name);\n```\n\n<br/>\n\n## Features\n\n- Zero external dependencies\n- Works in Node.js and all modern browsers\n- Tiny: `2kb` core bundle (gzipped)\n- Immutable API: methods return a new instance\n- Concise interface\n- Works with TypeScript and plain JS\n- Built-in JSON Schema conversion\n- Extensive ecosystem\n\n<br/>\n\n## Installation\n\n```sh\nnpm install zod\n```\n\n<br/>\n\n## Basic usage\n\nBefore you can do anything else, you need to define a schema. For the purposes of this guide, we'll use a simple object schema.\n\n```ts\nimport * as z from \"zod/v4\";\n\nconst Player = z.object({\n  username: z.string(),\n  xp: z.number(),\n});\n```\n\n### Parsing data\n\nGiven any Zod schema, use `.parse` to validate an input. If it's valid, Zod returns a strongly-typed _deep clone_ of the input.\n\n```ts\nPlayer.parse({ username: \"billie\", xp: 100 });\n// => returns { username: \"billie\", xp: 100 }\n```\n\n**Note** ‚Äî If your schema uses certain asynchronous APIs like `async` [refinements](#refine) or [transforms](#transform), you'll need to use the `.parseAsync()` method instead.\n\n```ts\nconst schema = z.string().refine(async (val) => val.length <= 8);\n\nawait schema.parseAsync(\"hello\");\n// => \"hello\"\n```\n\n### Handling errors\n\nWhen validation fails, the `.parse()` method will throw a `ZodError` instance with granular information about the validation issues.\n\n```ts\ntry {\n  Player.parse({ username: 42, xp: \"100\" });\n} catch (err) {\n  if (err instanceof z.ZodError) {\n    err.issues;\n    /* [\n      {\n        expected: 'string',\n        code: 'invalid_type',\n        path: [ 'username' ],\n        message: 'Invalid input: expected string'\n      },\n      {\n        expected: 'number',\n        code: 'invalid_type',\n        path: [ 'xp' ],\n        message: 'Invalid input: expected number'\n      }\n    ] */\n  }\n}\n```\n\nTo avoid a `try/catch` block, you can use the `.safeParse()` method to get back a plain result object containing either the successfully parsed data or a `ZodError`. The result type is a [discriminated union](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions), so you can handle both cases conveniently.\n\n```ts\nconst result = Player.safeParse({ username: 42, xp: \"100\" });\nif (!result.success) {\n  result.error; // ZodError instance\n} else {\n  result.data; // { username: string; xp: number }\n}\n```\n\n**Note** ‚Äî If your schema uses certain asynchronous APIs like `async` [refinements](#refine) or [transforms](#transform), you'll need to use the `.safeParseAsync()` method instead.\n\n```ts\nconst schema = z.string().refine(async (val) => val.length <= 8);\n\nawait schema.safeParseAsync(\"hello\");\n// => { success: true; data: \"hello\" }\n```\n\n### Inferring types\n\nZod infers a static type from your schema definitions. You can extract this type with the `z.infer<>` utility and use it however you like.\n\n```ts\nconst Player = z.object({\n  username: z.string(),\n  xp: z.number(),\n});\n\n// extract the inferred type\ntype Player = z.infer<typeof Player>;\n\n// use it in your code\nconst player: Player = { username: \"billie\", xp: 100 };\n```\n\nIn some cases, the input & output types of a schema can diverge. For instance, the `.transform()` API can convert the input from one type to another. In these cases, you can extract the input and output types independently:\n\n```ts\nconst mySchema = z.string().transform((val) => val.length);\n\ntype MySchemaIn = z.input<typeof mySchema>;\n// => string\n\ntype MySchemaOut = z.output<typeof mySchema>; // equivalent to z.infer<typeof mySchema>\n// number\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2025 Colin McDonnell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/zod/-/zod-3.25.76.tgz#26841c3f6fd22a6a2760e7ccb719179768471e34",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/zod/-/zod-3.25.76.tgz",
    "hash": "26841c3f6fd22a6a2760e7ccb719179768471e34",
    "integrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==",
    "registry": "npm",
    "packageName": "zod",
    "cacheIntegrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ== sha1-JoQcP2/SKmonYOfMtxkXl2hHHjQ="
  },
  "registry": "npm",
  "hash": "26841c3f6fd22a6a2760e7ccb719179768471e34"
}