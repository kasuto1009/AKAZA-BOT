{
  "manifest": {
    "name": "qified",
    "version": "0.5.0",
    "description": "Task and Message Queues with Multiple Providers",
    "type": "module",
    "main": "./dist/index.cjs",
    "module": "./dist/index.js",
    "types": "./dist/index.d.ts",
    "exports": {
      ".": {
        "require": "./dist/index.cjs",
        "import": "./dist/index.js"
      }
    },
    "engines": {
      "node": ">=20"
    },
    "keywords": [
      "queue",
      "task",
      "message",
      "provider",
      "qified"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jaredwray/qified.git"
    },
    "author": {
      "name": "Jared Wray",
      "email": "me@jaredwray.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jaredwray/qified/issues"
    },
    "homepage": "https://github.com/jaredwray/qified#readme",
    "devDependencies": {
      "@biomejs/biome": "^2.2.5",
      "@vitest/coverage-v8": "^3.2.4",
      "rimraf": "^6.0.1",
      "tsup": "^8.5.0",
      "typescript": "^5.9.3",
      "vitest": "^3.2.4"
    },
    "files": [
      "dist",
      "LICENSE"
    ],
    "dependencies": {
      "hookified": "^1.12.1"
    },
    "scripts": {
      "lint": "biome check --write --error-on-warnings",
      "test": "pnpm lint && vitest run --coverage",
      "test:ci": "biome check --error-on-warnings && vitest run --coverage",
      "clean": "rimraf ./dist ./coverage ./site/dist",
      "build": "rimraf ./dist && tsup src/index.ts --format cjs,esm --dts --clean --minify",
      "build:publish": "pnpm build && pnpm publish --access public --no-git-checks"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-qified-0.5.0-2e0a1f8bdf2321764b976402da9fbfc1a205785f-integrity/node_modules/qified/package.json",
    "readmeFilename": "README.md",
    "readme": "[![logo.svg](https://qified.org/logo.svg)](https://qified.org)\n\n[![tests](https://github.com/jaredwray/qified/actions/workflows/tests.yaml/badge.svg)](https://github.com/jaredwray/qified/actions/workflows/tests.yaml)\n[![GitHub license](https://img.shields.io/github/license/jaredwray/qified)](https://github.com/jaredwray/qified/blob/master/LICENSE)\n[![codecov](https://codecov.io/gh/jaredwray/qified/graph/badge.svg?token=jcRdy8SkOG)](https://codecov.io/gh/jaredwray/qified)\n[![npm](https://img.shields.io/npm/dm/qified)](https://npmjs.com/package/qified)\n[![npm](https://img.shields.io/npm/v/qified)](https://npmjs.com/package/qified)\n\n# qified\nTask and Message Queues with Multiple Providers\n\n## NOTE: This is a work in progress and not ready for production use. Please wait till v1.0.0 is released.\n\n# Features\n\n* Simple Message Queue for Processing Messages\n* Simple Message Format `Message`\n* Easily Send a Message `publish()`\n* Easily Subscribe to a message Queue `subscribe()`\n* Simple Task Format `Task` (Coming in v1.0.0)\n* Easily Send a Task `enqueue()` (Coming in v1.0.0)\n* Easily Subscribe to a Task Queue `dequeue()` (Coming in v1.0.0)\n* Simple Acknowledge `Acknowledge()` in handler (Coming in v1.0.0)\n* Async/Await Built In By Default\n* Written in Typescript, Nodejs Last Two Versions, ESM and CJS\n* Events and Hooks for all major actions via [Hookified](https://hookified.org)\n* Customizable Serialize / Deserialize Handlers (Coming in v1.0.0)\n* Customizable Compress / Decompress Handlers (Coming in v1.0.0)\n* Provider Fail Over Support\n\n\n# Installation\n\n```bash\npnpm add qified\n```\n\n# Quick Start\n\n```js\nimport { Qified, MemoryMessageProvider } from 'qified';\n\n// Create a new Qified instance with a memory provider\nconst qified = new Qified({\n  messageProviders: [new MemoryMessageProvider()]\n});\n\n// Subscribe to a topic\nawait qified.subscribe('notifications', {\n  id: 'notificationHandler',\n  handler: async (message) => {\n    console.log('Received:', message.data);\n  }\n});\n\n// Publish a message\nawait qified.publish('notifications', {\n  id: 'msg-1',\n  data: { text: 'Hello, World!' }\n});\n\n// Clean up\nawait qified.disconnect();\n```\n\n# Constructor\n\n```js\nnew Qified(options?: QifiedOptions)\n```\n\n**Options:**\n- `messageProviders?: MessageProvider[]` - Array of message providers to use\n- `taskProviders?: TaskProvider[]` - Array of task providers to use\n\n**Example:**\n```js\nimport { Qified, MemoryMessageProvider } from 'qified';\n\nconst qified = new Qified({\n  messageProviders: [new MemoryMessageProvider()]\n});\n```\n\n# Properties\n\n### `messageProviders: MessageProvider[]`\n\nGet or set the array of message providers. This property allows you to dynamically manage which message providers are active in your Qified instance.\n\n**Type:** `MessageProvider[]`\n\n**Access:** Read/Write\n\n**Description:**\n- **Getter**: Returns the current array of message providers being used\n- **Setter**: Replaces all current message providers with a new array\n\n**Use Cases:**\n- Inspect which providers are currently configured\n- Add or remove providers dynamically at runtime\n- Replace all providers with a new set\n- Migrate from one provider to another\n\n**Example:**\n```typescript\nimport { Qified, MemoryMessageProvider } from 'qified';\nimport { NatsMessageProvider } from '@qified/nats';\nimport { RedisMessageProvider } from '@qified/redis';\n\nconst qified = new Qified({\n  messageProviders: [new MemoryMessageProvider()]\n});\n\n// Get current providers\nconst providers = qified.messageProviders;\nconsole.log(`Currently using ${providers.length} provider(s)`);\n\n// Add another provider\nqified.messageProviders = [\n  new MemoryMessageProvider(),\n  new NatsMessageProvider()\n];\n\n// Replace all providers\nqified.messageProviders = [\n  new RedisMessageProvider({ uri: 'redis://localhost:6379' })\n];\n\n// Access provider properties\nqified.messageProviders.forEach(provider => {\n  console.log('Provider ID:', provider.id);\n});\n```\n\n**Important Notes:**\n- Setting this property does **not** automatically disconnect existing providers\n- You should call `disconnect()` on old providers before replacing them to clean up resources\n- All operations (`subscribe`, `publish`, `unsubscribe`) will execute across all providers in this array\n\n# Methods\n\n## subscribe\n\nSubscribe to a topic to receive messages. If multiple message providers are configured, this will subscribe on all of them.\n\n**Parameters:**\n- `topic: string` - The topic to subscribe to\n- `handler: TopicHandler` - Object containing an optional `id` and a `handler` function\n\n**Example:**\n```js\nawait qified.subscribe('user-events', {\n  id: 'userEventHandler',\n  handler: async (message) => {\n    console.log('User event:', message.data);\n  }\n});\n```\n\n## publish\n\nPublish a message to a topic. If multiple message providers are configured, this will publish to all of them.\n\n**Parameters:**\n- `topic: string` - The topic to publish to\n- `message: Message` - The message object to publish\n\n**Example:**\n```js\nawait qified.publish('user-events', {\n  id: 'evt-123',\n  data: {\n    userId: 'user-456',\n    action: 'login',\n    timestamp: Date.now()\n  },\n  headers: {\n    'content-type': 'application/json'\n  }\n});\n```\n\n## unsubscribe\n\nUnsubscribe from a topic. If an `id` is provided, only that handler is unsubscribed. Otherwise, all handlers for the topic are unsubscribed.\n\n**Parameters:**\n- `topic: string` - The topic to unsubscribe from\n- `id?: string` - Optional handler ID. If not provided, all handlers are unsubscribed\n\n**Example:**\n```js\n// Unsubscribe a specific handler\nawait qified.unsubscribe('user-events', 'userEventHandler');\n\n// Unsubscribe all handlers for a topic\nawait qified.unsubscribe('user-events');\n```\n\n## disconnect`\n\nDisconnect from all providers and clean up resources.\n\n**Example:**\n```js\nawait qified.disconnect();\n```\n\n# Events\n\nQified extends [Hookified](https://hookified.org) and emits events for all major operations. You can listen to these events to add custom logging, monitoring, or error handling.\n\n# Available Events\n\nThe following events are available via the `QifiedEvents` enum:\n\n- `QifiedEvents.publish` - Emitted after a message is successfully published\n- `QifiedEvents.subscribe` - Emitted after successfully subscribing to a topic\n- `QifiedEvents.unsubscribe` - Emitted after successfully unsubscribing from a topic\n- `QifiedEvents.disconnect` - Emitted after successfully disconnecting from all providers\n- `QifiedEvents.error` - Emitted when an error occurs during any operation\n- `QifiedEvents.info` - Emitted for informational messages\n- `QifiedEvents.warn` - Emitted for warning messages\n\n# Listening to Events\n\nUse the `on()` method to listen to events:\n\n```js\nimport { Qified, MemoryMessageProvider, QifiedEvents } from 'qified';\n\nconst qified = new Qified({\n  messageProviders: [new MemoryMessageProvider()]\n});\n\n// Listen for publish events\nawait qified.on(QifiedEvents.publish, async (data) => {\n  console.log('Message published to topic:', data.topic);\n  console.log('Message:', data.message);\n});\n\n// Listen for subscribe events\nawait qified.on(QifiedEvents.subscribe, async (data) => {\n  console.log('Subscribed to topic:', data.topic);\n  console.log('Handler ID:', data.handler.id);\n});\n\n// Listen for unsubscribe events\nawait qified.on(QifiedEvents.unsubscribe, async (data) => {\n  console.log('Unsubscribed from topic:', data.topic);\n  if (data.id) {\n    console.log('Handler ID:', data.id);\n  }\n});\n\n// Listen for disconnect events\nawait qified.on(QifiedEvents.disconnect, async () => {\n  console.log('Disconnected from all providers');\n});\n\n// Listen for errors\nawait qified.on(QifiedEvents.error, async (error) => {\n  console.error('Error occurred:', error);\n});\n\n// Now perform operations\nawait qified.subscribe('events', {\n  id: 'handler1',\n  handler: async (message) => {\n    console.log('Received:', message.data);\n  }\n});\n\nawait qified.publish('events', {\n  id: 'msg-1',\n  data: { text: 'Hello!' }\n});\n\nawait qified.unsubscribe('events', 'handler1');\nawait qified.disconnect();\n```\n\n### Error Handling with Events\n\nEvents provide a centralized way to handle errors across all operations:\n\n```js\nimport { Qified, QifiedEvents } from 'qified';\nimport { NatsMessageProvider } from '@qified/nats';\n\nconst qified = new Qified({\n  messageProviders: [new NatsMessageProvider()]\n});\n\n// Centralized error handler\nawait qified.on(QifiedEvents.error, async (error) => {\n  console.error('Qified error:', error.message);\n  // Send to error tracking service\n  // Log to file\n  // Send alert\n});\n\n// Errors from publish, subscribe, etc. will be caught and emitted\nawait qified.publish('topic', { id: '1', data: { test: true } });\n```\n\n# Providers\n\nThere are multiple providers available to use:\n\n* Memory - this is built into the current `qified` library as `MemoryMessageProvider`.\n* [@qified/redis](packages/redis/README.md) - Redis Provider\n* [@qified/rabbitmq](packages/rabbitmq/README.md) - RabbitMQ Provider\n* [@qified/nats](packages/nats/README.md) - NATS Provider\n* [@qified/zeromq](packages/zeromq/README.md) - ZeroMQ Provider\n\n# Development and Testing\n\nQified is written in TypeScript and tests are written in `vitest`. To run the tests, use the following command:\n\n1. `pnpm install` - This will install all the dependencies\n2. `pnpm test:services:start` - This will start the services needed for testing (Redis, RabbitMQ, etc)\n3. `pnpm test` - This will run the tests\n\nTo contribute follow the [Contributing Guidelines](CONTRIBUTING.md) and [Code of Conduct](CODE_OF_CONDUCT.md).\n\n# License\n\n[MIT & © Jared Wray](LICENSE)",
    "licenseText": "MIT License & © Jared Wray\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/qified/-/qified-0.5.0.tgz#2e0a1f8bdf2321764b976402da9fbfc1a205785f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/qified/-/qified-0.5.0.tgz",
    "hash": "2e0a1f8bdf2321764b976402da9fbfc1a205785f",
    "integrity": "sha512-Zj6Q/Vc/SQ+Fzc87N90jJUzBzxD7MVQ2ZvGyMmYtnl2u1a07CejAhvtk4ZwASos+SiHKCAIylyGHJKIek75QBw==",
    "registry": "npm",
    "packageName": "qified",
    "cacheIntegrity": "sha512-Zj6Q/Vc/SQ+Fzc87N90jJUzBzxD7MVQ2ZvGyMmYtnl2u1a07CejAhvtk4ZwASos+SiHKCAIylyGHJKIek75QBw== sha1-Lgofi98jIXZLl2QC2p+/waIFeF8="
  },
  "registry": "npm",
  "hash": "2e0a1f8bdf2321764b976402da9fbfc1a205785f"
}