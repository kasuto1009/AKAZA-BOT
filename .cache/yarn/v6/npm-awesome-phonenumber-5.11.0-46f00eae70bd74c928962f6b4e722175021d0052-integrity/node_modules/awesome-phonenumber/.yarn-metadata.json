{
  "manifest": {
    "name": "awesome-phonenumber",
    "description": "Google's libphonenumber pre-compiled with the closure compiler",
    "license": "MIT",
    "version": "5.11.0",
    "author": {
      "name": "Gustaf Räntilä",
      "email": "g.rantila@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/grantila/awesome-phonenumber.git"
    },
    "engines": {
      "node": ">=14"
    },
    "main": "./index.js",
    "types": "./index.d.ts",
    "exports": {
      ".": {
        "types": "./index.d.ts",
        "require": "./index.js",
        "default": "./index-esm.mjs"
      },
      "./package.json": "./package.json"
    },
    "scripts": {
      "build:libphonenumber": "node_modules/.bin/gulp",
      "build:rewrite": "ts-node scripts/rewrite.ts",
      "build:esm:build": "rollup -c ./rollup.config.mjs",
      "build:esm:rewrite": "ts-node scripts/rewrite-esm.ts",
      "build:esm": "yarn build:esm:build && yarn build:esm:rewrite",
      "build": "yarn build:libphonenumber && yarn build:rewrite && yarn build:esm",
      "test:compile": "scripts/test.sh",
      "test": "yarn test:compile && NODE_OPTIONS=--experimental-vm-modules jest",
      "test-dist-webpack": "cd webpack && yarn build && yarn test",
      "test-dist-esm-test": "cd esm-test && yarn build && yarn test",
      "test-dist-cjs-test": "cd cjs-test && yarn build && yarn test",
      "test-dist": "yarn test-dist-webpack && yarn test-dist-esm-test && yarn test-dist-cjs-test",
      "cz": "git-cz",
      "semantic-release": "semantic-release"
    },
    "pre-commit": [
      "test"
    ],
    "workspaces": [
      "webpack",
      "cjs-test",
      "esm-test"
    ],
    "files": [
      "lib",
      "index.js",
      "index-esm.mjs",
      "index.d.ts"
    ],
    "keywords": [
      "libphonenumber",
      "phonenumber",
      "phone",
      "number",
      "closure",
      "web",
      "browser",
      "browserify",
      "awesome"
    ],
    "devDependencies": {
      "@babel/preset-env": "^7.21.4",
      "@babel/preset-typescript": "^7.21.4",
      "@rollup/plugin-commonjs": "^24.1.0",
      "@types/jest": "^29.5.0",
      "@types/mkdirp": "^2.0.0",
      "@types/node": "^18.15.11",
      "commitizen": "^4.3.0",
      "cz-conventional-changelog": "^3.3.0",
      "google-closure-compiler": "^20221102.0.0",
      "google-closure-library": "^20221102.0.0",
      "gulp": "^4.0.2",
      "jest": "^29.5.0",
      "mkdirp": "^3.0.0",
      "pre-commit": "^1.2.2",
      "replace": "^1.2.2",
      "rmfr": "^2.0.0",
      "rollup": "3.20.4",
      "ts-jest-resolver": "^2.0.1",
      "ts-node": "^10.9.1",
      "typescript": "^5.0.4"
    },
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "packageManager": "yarn@3.2.4",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-awesome-phonenumber-5.11.0-46f00eae70bd74c928962f6b4e722175021d0052-integrity/node_modules/awesome-phonenumber/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm version][npm-image]][npm-url]\n[![downloads][downloads-image]][npm-url]\n[![build status][build-image]][build-url]\n[![minzipped size][bundlephobia-image]][bundlephobia-url]\n[![Dependency count][depcount-image]][npm-url]\n\n\n# Awesome phonenumber parser\n\nThis library is a pre-compiled version of Google's `libphonenumber`, with a slightly simpler interface. It has a minimal footprint - is by far the smallest libphonenumber-based library available on npmjs, and has no dependencies.\n\nTypeScript typings are provided within the package.\n\nUses libphonenumber v8.13.21\n\n\n### Versions\n\n - v3:\n   - Changed API (although with backwards compatible ABI)\n   - Added ESM export\n - v4:\n   - Changed API to be much cleaner\n     - No constructor\n     - No functions on returned object\n     - No errors being thrown\n   - Not backwards compatible, although like v3 except:\n     - The second argument to `parsePhoneNumber` is an object\n       - E.g. `{ regionCode: 'SE' }` instead of a region code string\n     - The return value is like `toJSON( )` on v3\n - v5:\n   - Dropped Node 12 support\n\n\n## Comparison with other libraries\n\nSince this library is pre-compiled, it doesn't depend on the closure compiler, and needs not load it on start. This makes the library faster and saves you a lot of space. It also means this library is trivial to use in any `webpack` project (or using any other means to run in the browser).\n\nAmong all the popular phone number using Google's `libphonenumber` (or mimicing it), only this one, `google-libphonenumber` and `libphonenumber-js` have decent README's with examples. *This may have changed since first doing these benchmarks*.\n\nA library should be quick to load (`require()`), quick to parse first time and all consecutive times. It shouldn't bloat your `node_modules`, and it should have a small memory footprint, if possible.\n\nThe following is the result of a test program which loads the library, then parses a phone number, and then once again. It's called 100 times for each library and the mean values are shown here. Parsing a phone number first time might be slower because of initially compiling/optimizing regular expressions and whatnot. Parsing a phone number a second time will show the speed of likely all future parsing within that process.\n\nAction                    | awesome-phonenumber<br/>2.56.0<br/>(lib 8.12.29) | google-libphonenumber<br/>3.2.22<br/>(lib 8.12.27) | libphonenumber-js<br/>1.9.23<br/>(lib -)\n------------------------- | ------------------- | --------------------- | ----------------\nLoad library first time         | 11.0 ms ✅          | 29.67 ms              | 32.87 ms\nParse first phone number        | 4.3 ms              | 4.01 ms               | 3.43 ms ✅\n**⇒ Load + parse first number** | 15.3 ms ✅          | 33.68 ms              | 36.3 ms\nParse second phone number       | 0.78 ms ✅          | 0.97 ms               | 0.92 ms\nIncreased memory usage          | 5.12 M ✅           | 9.99 M                | 5.86 M\nnode_modules size               | 296 K ✅            | 600 K                 | 7.6 M\nnode_modules files              | 8                   | 7 ✅                  | 653\n\n\n## Basic usage\n```ts\nimport { parsePhoneNumber } from 'awesome-phonenumber'\n\nconst pn = parsePhoneNumber( '0707123456', { regionCode: 'SE' } );\n// or on e164 format:\nconst pn = parsePhoneNumber( '+46707123456' );\n\n// pn is now the same as:\nconst pn = {\n\tvalid: true,\n\n\tnumber: {\n\t\tinput: '0707123456',\n\t\te164: '+46707123456',\n\t\tinternational: '+46 70 712 34 56',\n\t\tnational: '070-712 34 56',\n\t\trfc3966: 'tel:+46-70-712-34-56',\n\t\tsignificant: '707123456',\n\t},\n\tpossibility: 'is-possible',\n\tregionCode: 'SE',\n\tpossible: true,\n\tcanBeInternationallyDialled: true,\n\ttype: 'mobile',\n\tcountryCode: 46,\n\ttypeIsMobile: true,\n\ttypeIsFixedLine: false,\n};\n```\n\nThe return type is `ParsedPhoneNumber` which is either a `ParsedPhoneNumberValid` or a `ParsedPhoneNumberInvalid`. The `valid` property identifies whether the parsing was successful or not, hence which type is returned.\n\nThe format of a successful parsing is:\n\n```ts\ninterface ParsedPhoneNumberValid {\n\tvalid: true;\n\n\tnumber: {\n\t\tinput: string;\n\t\tinternational: string;\n\t\tnational: string;\n\t\te164: string;\n\t\trfc3966: string;\n\t\tsignificant: string;\n\t};\n\tpossibility: PhoneNumberPossibility; // a string union, see below\n\tregionCode: string;\n\tpossible: boolean;\n\tcanBeInternationallyDialled: boolean;\n\ttype: PhoneNumberTypes; // a string union, see below\n\tcountryCode: number;\n\ttypeIsMobile: boolean;\n\ttypeIsFixedLine: boolean;\n}\n```\n\nIf the number failed to be parsed, or there was another error, the return type is:\n\n```ts\ninterface ParsedPhoneNumberInvalid {\n\tvalid: false;\n\n\tpossible: false;\n\tpossibility: 'invalid';\n\terror?: unknown;\n};\n```\n\n\n## API\n\n```ts\nimport {\n\tparsePhoneNumber,\n\tgetNumberFrom,\n\tgetExample,\n\tgetCountryCodeForRegionCode,\n\tgetRegionCodeForCountryCode,\n\tgetSupportedCallingCodes,\n\tgetSupportedRegionCodes,\n\tgetAsYouType,\n} from 'awesome-phonenumber'\n```\n\n\n### parsePhoneNumber\n\n`parsePhoneNumber( phoneNumber, { regionCode: string } )` parses a phone number as described above.\n\nThe first argument is the phone number to parse, on either _national_ or _international_ (e164, i.e. prefixed with a `+`) form. If _national_ form, the second argument is required to contain a `regionCode` string property, e.g. 'SE' for Sweden, 'CH' for Switzerland, etc.\n\n\n### getNumberFrom\n\n```ts\nimport { parsePhoneNumber, getNumberFrom } from 'awesome-phonenumber'\n\nconst pn = parsePhoneNumber( '0707654321', { regionCode: 'SE' } );\nif ( pn.valid ) {\n\tconst fromJp = getNumberFrom( pn, 'JP' );\n\t// fromJp is the number to call from Japan:\n\tfromJp.number === \"010 46 70 765 43 21\";\n}\n```\n\nThe return value from `getNumberFrom` is a `PhoneNumberFrom` which is either a `PhoneNumberFromValid` or a `PhoneNumberFromInvalid`.\n\nThe `PhoneNumberFromValid` is defined as:\n\n```ts\ninterface PhoneNumberFromValid\n{\n\tvalid: true;\n\tnumber: string;\n}\n```\n\nThe `PhoneNumberFromInvalid` is defined as:\n\n```ts\ninterface PhoneNumberFromInvalid\n{\n\tvalid: false;\n\terror?: unknown;\n}\n```\n\n\n## <a name=\"example\"></a>getExample\n\nSometimes you want to display a formatted example phone number for a certain country (and maybe also a certain type of phone number). The `getExample` function is used for this.\n\n```ts\nimport { getExample } from 'awesome-phonenumber'\n\ngetExample( regionCode[, phoneNumberType] ); // Parsed phone number\n```\n\nThe `phoneNumberType` is any of the [types defined above](#phone-number-types).\n\n### Example\n\n```ts\nimport { getExample } from 'awesome-phonenumber'\n\n// Get an example Swedish phone number\nconst example = getExample( 'SE' ); // A ParsedPhoneNumberValid\nconst exampleMobile = getExample( 'SE', 'mobile' ); // A ParsedPhoneNumberValid\n\nexample.number.e164;           // e.g. '+468123456'\nexampleMobile.number.e164;     // e.g. '+46701234567'\nexampleMobile.number.national; // e.g. '070 123 45 67'\n```\n\n\n## Country codes\n\nThere are conversion functions between the 2-character ISO 3166-1 region codes (e.g. 'SE' for Sweden) and the corresponding country calling codes.\n\n```ts\nimport {\n\tgetCountryCodeForRegionCode,\n\tgetRegionCodeForCountryCode,\n\tgetSupportedCallingCodes,\n\tgetSupportedRegionCodes,\n} from 'awesome-phonenumber'\n\ngetCountryCodeForRegionCode( regionCode );  // -> countryCode\ngetRegionCodeForCountryCode( countryCode ); // -> regionCode\n```\n\n### Example\n\n```ts\ngetCountryCodeForRegionCode( 'SE' ); // -> 46\ngetRegionCodeForCountryCode( 46 );   // -> 'SE'\n```\n\n### Supported calling codes\n\n```ts\ngetSupportedCallingCodes( ); // -> [ calling codes... ]\n```\n\n### Supported region codes\n\n```ts\ngetSupportedRegionCodes( ); // -> [ region codes... ]\n```\n\n\n## API types\n\nThe API consists of the `PhoneNumber` class which sometimes uses *enums*. These are:\n\n### <a name=\"phone-number-types\"></a>Phone number types\n```ts\ntype PhoneNumberTypes =\n\t| 'fixed-line'\n\t| 'fixed-line-or-mobile'\n\t| 'mobile'\n\t| 'pager'\n\t| 'personal-number'\n\t| 'premium-rate'\n\t| 'shared-cost'\n\t| 'toll-free'\n\t| 'uan'\n\t| 'voip'\n\t| 'unknown'\n```\n\n### Phone number possibilities\n\n```ts\ntype PhoneNumberPossibility =\n\t| 'is-possible'\n\t| 'invalid-country-code'\n\t| 'too-long'\n\t| 'too-short'\n\t| 'unknown'\n```\n\n### Phone number formats\n\n```ts\n'international'\n'national'\n'e164'\n'rfc3966'\n'significant'\n```\n\n\n\n\n## As-you-type formatting\n\nYou can create an `AsYouType` class with `getAsYouType()` to format a phone number as it is being typed.\n\n```ts\nimport { getAsYouType } from 'awesome-phonenumber'\n\nconst ayt = getAsYouType( 'SE' );\n```\n\nThe returned class instance has the following methods\n\n```ts\n// Add a character to the end of the number\nayt.addChar( nextChar: string );\n\n// Get the current formatted number\nayt.number( );\n\n// Remove the last character\nayt.removeChar( );\n\n// Replace the whole number with a new number (or an empty number if undefined)\nayt.reset( number?: string );\n\n// Get a ParsedPhoneNumber object representing the current number\nayt.getPhoneNumber( );\n```\n\nAll the functions above except `getPhoneNumber( )` return the current formatted number as a string.\n\n#### Example\n\n```ts\nimport { getAsYouType } from 'awesome-phonenumber'\n\nconst ayt = getAsYouType( 'SE' );\nayt.addChar( '0' ); // -> '0'\nayt.addChar( '7' ); // -> '07'\nayt.addChar( '0' ); // -> '070'\nayt.addChar( '7' ); // -> '070 7'\nayt.addChar( '1' ); // -> '070 71'\nayt.addChar( '2' ); // -> '070 712'\nayt.addChar( '3' ); // -> '070 712 3'\nayt.addChar( '4' ); // -> '070 712 34'\nayt.addChar( '5' ); // -> '070 712 34 5'\nayt.addChar( '6' ); // -> '070 712 34 56'\nayt.removeChar( );  // -> '070 712 34 5'\nayt.addChar( '7' ); // -> '070 712 34 57'\n```\n\n[npm-image]: https://img.shields.io/npm/v/awesome-phonenumber.svg\n[npm-url]: https://npmjs.org/package/awesome-phonenumber\n[downloads-image]: https://img.shields.io/npm/dm/awesome-phonenumber.svg\n[build-image]: https://img.shields.io/github/actions/workflow/status/grantila/awesome-phonenumber/master.yml?branch=master\n[build-url]: https://github.com/grantila/awesome-phonenumber/actions?query=workflow%3AMaster\n[bundlephobia-image]: https://badgen.net/bundlephobia/minzip/awesome-phonenumber\n[bundlephobia-url]: https://bundlephobia.com/package/awesome-phonenumber\n[depcount-image]: https://badgen.net/bundlephobia/dependency-count/awesome-phonenumber\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Gustaf Räntilä\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/awesome-phonenumber/-/awesome-phonenumber-5.11.0.tgz#46f00eae70bd74c928962f6b4e722175021d0052",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/awesome-phonenumber/-/awesome-phonenumber-5.11.0.tgz",
    "hash": "46f00eae70bd74c928962f6b4e722175021d0052",
    "integrity": "sha512-25GfikMIo6CBQIqvjoewo4uiu5Ai7WqEC8gxesH3LDwCY43oEdkLaT15a+8adC7uWIJCGh+YQiBY5bjmDpoQcg==",
    "registry": "npm",
    "packageName": "awesome-phonenumber",
    "cacheIntegrity": "sha512-25GfikMIo6CBQIqvjoewo4uiu5Ai7WqEC8gxesH3LDwCY43oEdkLaT15a+8adC7uWIJCGh+YQiBY5bjmDpoQcg== sha1-RvAOrnC9dMkoli9rTnIhdQIdAFI="
  },
  "registry": "npm",
  "hash": "46f00eae70bd74c928962f6b4e722175021d0052"
}