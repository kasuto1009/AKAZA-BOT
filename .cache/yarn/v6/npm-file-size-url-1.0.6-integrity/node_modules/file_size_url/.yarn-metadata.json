{
  "manifest": {
    "name": "file_size_url",
    "version": "1.0.6",
    "description": "A lightweight Node.js library to fetch the file size from a remote URL without downloading the file. Zero dependencies. Returns a Promise with the file size formatted as 'B', 'KB', 'MB', 'GB', or 'TB'.",
    "main": "index.js",
    "type": "module",
    "scripts": {
      "push": "npm publish",
      "test": "node example/test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/rn0x/file_size_url.git"
    },
    "publishConfig": {
      "registry": "https://registry.npmjs.org/"
    },
    "keywords": [
      "url",
      "file",
      "size",
      "remote",
      "fetch",
      "file size",
      "http",
      "https",
      "head request",
      "filesize",
      "nodejs",
      "utility"
    ],
    "author": {
      "name": "Rayan Almalki",
      "url": "rn0x"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/rn0x/file_size_url/issues"
    },
    "homepage": "https://github.com/rn0x/file_size_url#readme",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-file-size-url-1.0.6-integrity/node_modules/file_size_url/package.json",
    "readmeFilename": "README.md",
    "readme": "# file_size_url\n\n[![NPM version](https://img.shields.io/npm/v/file_size_url.svg?style=flat)](https://www.npmjs.com/package/file_size_url)\n\n [![NPM monthly downloads](https://img.shields.io/npm/dm/file_size_url.svg?style=flat)](https://npmjs.org/package/file_size_url) \n \n [![NPM total downloads](https://img.shields.io/npm/dt/file_size_url.svg?style=flat)](https://npmjs.org/package/file_size_url) \n \n\n`file_size_url` is a simple Node.js library for fetching the size of a file from a given URL using either `HTTP` or `HTTPS` protocols. It returns the file size in a human-readable format such as \"1.23 MB\".\n\n**0 dependencies.**\n\n## Installation\n\nYou can install the library via npm:\n\n```bash\nnpm install file_size_url\n```\n\nAlternatively, if you have the source code, you can directly use the function in your Node.js project:\n\n```bash\n# Simply copy the source code file to your project directory\n```\n\n## Usage\n\n### Importing and Using the Library\n\n```javascript\nimport fileSizeUrl from 'file_size_url';\n\nfileSizeUrl(\"https://example.com/file.zip\")\n  .then(size => console.log(`File size: ${size}`))\n  .catch(error => console.error(`Error: ${error.message}`));\n```\n\n### Example with `telegraf` (Telegram Bot)\n\nYou can integrate `file_size_url` with `telegraf` to fetch and display file sizes in your Telegram bot:\n\n```javascript\nimport { Telegraf } from 'telegraf';\nimport fileSizeUrl from 'file_size_url';\n\nconst bot = new Telegraf('<YOUR_BOT_TOKEN>');\n\nbot.command('filesize', async (ctx) => {\n  const url = ctx.message.text.split(' ')[1];\n  if (!url) return ctx.reply('Please provide a URL.');\n\n  try {\n    const size = await fileSizeUrl(url);\n    ctx.reply(`File size: ${size}`);\n  } catch (error) {\n    ctx.reply(`Error: ${error.message}`);\n  }\n});\n\nbot.launch();\n```\n\n### Example with `express.js`\n\nYou can use `file_size_url` in an `express.js` server to get file sizes via an API:\n\n```javascript\nimport express from 'express';\nimport fileSizeUrl from 'file_size_url';\n\nconst app = express();\n\napp.get('/filesize', (req, res) => {\n  const { url } = req.query;\n  if (!url) return res.status(400).send('URL parameter is required');\n\n  fileSizeUrl(url)\n    .then(size => res.send(`File size: ${size}`))\n    .catch(error => res.status(500).send(`Error: ${error.message}`));\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n### Using `file_size_url` in a Loop\n\nYou can easily use `file_size_url` inside a loop to fetch file sizes from multiple URLs:\n\n```javascript\nimport fileSizeUrl from './file_size_url.js';\n\nconst urls = [\n  'https://example.com/file1.zip',\n  'https://example.com/file2.zip',\n  'https://example.com/file3.zip'\n];\n\nurls.forEach(async (url) => {\n  try {\n    const size = await fileSizeUrl(url);\n    console.log(`File size for ${url}: ${size}`);\n  } catch (error) {\n    console.error(`Error fetching size for ${url}: ${error.message}`);\n  }\n});\n```\n\n### Using `file_size_url` with `Promise.all`\n\nFetch file sizes concurrently for multiple URLs using `Promise.all`:\n\n```javascript\nimport fileSizeUrl from './file_size_url.js';\n\nconst urls = [\n  'https://example.com/file1.zip',\n  'https://example.com/file2.zip',\n  'https://example.com/file3.zip'\n];\n\nPromise.all(urls.map(url => fileSizeUrl(url)))\n  .then(sizes => {\n    sizes.forEach((size, index) => {\n      console.log(`File size for ${urls[index]}: ${size}`);\n    });\n  })\n  .catch(error => console.error(`Error: ${error.message}`));\n```\n\n## API Reference\n\n### `fileSizeUrl(url)`\n\nFetches the file size from a given URL.\n\n#### Parameters\n\n- **url** (`string`): The URL of the file.\n\n#### Returns\n\n- **Promise<string>**: Resolves with the file size as a formatted string (e.g., \"1.23 MB\"). If an error occurs, the promise is rejected with an error message.\n\n#### Example\n\n```javascript\nfileSizeUrl(\"https://example.com/file.zip\")\n  .then(size => console.log(`File size: ${size}`))\n  .catch(error => console.error(`Error: ${error.message}`));\n```\n\n### Error Handling\n\n- `Invalid URL`: If the URL is invalid or missing.\n- `The address should be http or https`: If the protocol is not supported.\n- `Failed to get file size, status code: <statusCode>`: If the HTTP status code is not 200.\n- `Couldn't retrieve file size from headers`: If the `content-length` header is missing or invalid.\n\n### `formatBytes(bytes)`\n\nFormats bytes into a human-readable string.\n\n#### Parameters\n\n- **bytes** (`number`): The number of bytes.\n\n#### Returns\n\n- **string**: The formatted size string (e.g., \"1.23 MB\").\n\n#### Example\n\n```javascript\nconsole.log(formatBytes(12345678)); // Output: \"11.77 MB\"\n```\n\n## Notes\n\n- Make sure the URL starts with `http://` or `https://`.\n- The library is designed to work only in Node.js environments that support the native `http` and `https` modules.\n\n## License\n\nThis library is available under the [MIT License](https://opensource.org/licenses/MIT).\n\n---\n\n[Arabic Documentation](/AR.md)",
    "licenseText": "MIT License\n\nCopyright (c) 2024 rn0x\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/file_size_url/-/file_size_url-1.0.6.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/file_size_url/-/file_size_url-1.0.6.tgz",
    "hash": "",
    "integrity": "sha512-lN41gCBrlsOM1BKujO/bPYpF75dlWbZHYSunfjHqyEPVEtjWWa7oGAdE68q+KWVXiElrNMfaRttb6IUaSkC8Pg==",
    "registry": "npm",
    "packageName": "file_size_url",
    "cacheIntegrity": "sha512-lN41gCBrlsOM1BKujO/bPYpF75dlWbZHYSunfjHqyEPVEtjWWa7oGAdE68q+KWVXiElrNMfaRttb6IUaSkC8Pg== sha1-qVT/P6eelr4qjRYNotBwbizASI8="
  },
  "registry": "npm",
  "hash": "94de3580206b96c38cd412ae8cefdb3d8a45ef976559b647612ba77e31eac843d512d8d659aee8180744ebcabe29655788496b34c7da46db5be8851a4a40bc3e"
}