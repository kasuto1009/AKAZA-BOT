{
  "manifest": {
    "name": "figlet",
    "version": "1.9.3",
    "description": "Creates ASCII Art from text. A full implementation of the FIGfont spec.",
    "keywords": [
      "figlet",
      "ascii",
      "art",
      "banner",
      "ansi"
    ],
    "bin": {
      "figlet": "bin/index.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/patorjk/figlet.js.git"
    },
    "bugs": {
      "url": "https://github.com/patorjk/figlet.js/issues"
    },
    "author": {
      "name": "Patrick Gillespie",
      "email": "patorjk@gmail.com",
      "url": "http://patorjk.com/"
    },
    "license": "MIT",
    "type": "module",
    "main": "./dist/node-figlet.cjs",
    "module": "./dist/figlet.mjs",
    "browser": "./dist/figlet.mjs",
    "types": "./dist/types/cjs/node-figlet.d.cts",
    "exports": {
      ".": {
        "browser": {
          "import": {
            "types": "./dist/types/esm/figlet.d.ts",
            "default": "./dist/figlet.mjs"
          },
          "require": {
            "types": "./dist/types/cjs/figlet.d.cts",
            "default": "./dist/figlet.cjs"
          }
        },
        "node": {
          "import": {
            "types": "./dist/types/esm/node-figlet.d.ts",
            "default": "./dist/node-figlet.mjs"
          },
          "require": {
            "types": "./dist/types/cjs/node-figlet.d.cts",
            "default": "./dist/node-figlet.cjs"
          }
        },
        "import": {
          "types": "./dist/types/esm/figlet.d.ts",
          "default": "./dist/figlet.mjs"
        },
        "require": {
          "types": "./dist/types/cjs/figlet.d.cts",
          "default": "./dist/figlet.js"
        }
      },
      "./node": {
        "import": {
          "types": "./dist/types/esm/node-figlet.d.ts",
          "default": "./dist/node-figlet.mjs"
        },
        "require": {
          "types": "./dist/types/cjs/node-figlet.d.cts",
          "default": "./dist/node-figlet.cjs"
        }
      },
      "./browser": {
        "import": {
          "types": "./dist/types/esm/figlet.d.ts",
          "default": "./dist/figlet.mjs"
        },
        "require": {
          "types": "./dist/types/cjs/figlet.d.cts",
          "default": "./dist/figlet.js"
        }
      },
      "./fonts/*": {
        "types": "./importable-fonts/*.d.ts",
        "default": "./importable-fonts/*.js"
      },
      "./importable-fonts/*": "./importable-fonts/*"
    },
    "files": [
      "dist",
      "fonts",
      "importable-fonts",
      "README.md"
    ],
    "scripts": {
      "pre-build-scripts": "node utils/create-font-list.js && node utils/flf-to-strings.js",
      "prebuild": "npm run pre-build-scripts",
      "build": "vite build && npm run commonJSFixes",
      "dev": "vite build --watch",
      "test": "vitest run",
      "commonJSFixes": "node utils/copy-cjs-types.js",
      "type-check": "tsc --noEmit",
      "clean": "rm -rf dist",
      "prepublishOnly": "npm run clean && npm run build",
      "prepare": "husky install"
    },
    "devDependencies": {
      "@types/node": "^24.2.0",
      "@vitest/ui": "^3.2.4",
      "async": "~3.2.4",
      "husky": "^9.1.7",
      "lint-staged": "^16.1.5",
      "typescript": "^5.9.2",
      "vite": "^7.0.6",
      "vite-plugin-dts": "^4.5.4",
      "vitest": "^3.2.4"
    },
    "engines": {
      "node": ">= 17.0.0"
    },
    "lint-staged": {
      "src/**/*": "prettier --write --ignore-unknown"
    },
    "dependencies": {
      "commander": "^14.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-figlet-1.9.3-integrity/node_modules/figlet/package.json",
    "readmeFilename": "README.md",
    "readme": "```\n___________.___  ________.__          __          __             /\\   __          \n\\_   _____/|   |/  _____/|  |   _____/  |_       |__| ______    / / _/  |_  ______\n |    __)  |   /   \\  ___|  | _/ __ \\   __\\      |  |/  ___/   / /  \\   __\\/  ___/\n |     \\   |   \\    \\_\\  \\  |_\\  ___/|  |        |  |\\___ \\   / /    |  |  \\___ \\ \n \\___  /   |___|\\______  /____/\\___  >__| /\\ /\\__|  /____  > / /     |__| /____  >\n     \\/                \\/          \\/     \\/ \\______|    \\/  \\/                \\/ \n```\n\n[![NPM Downloads](https://img.shields.io/npm/dt/figlet.svg?style=flat)](https://npmcharts.com/compare/figlet?minimal=true)\n\nThis project aims to fully implement the FIGfont spec in TypeScript (compiles to JavaScript). It works in the browser and with Node. You can see it in action here: http://patorjk.com/software/taag/ (this project was written to power that application)\n\n## Quick Start - Node\n\nInstall:\n\n```sh\nnpm install figlet\n```\n\nSimple usage:\n\n```js\nimport figlet from \"figlet\";\n\nasync function doStuff() {\n  const text = await figlet.text(\"Hello World!!\");\n  console.log(text);\n}\n\ndoStuff();\n```\n\nOr the classic callback version:\n\n```js\nconst figlet = require('figlet');\n\nfiglet(\"Hello World!!\", function (err, data) {\n  if (err) {\n    console.log(\"Something went wrong...\");\n    console.dir(err);\n    return;\n  }\n  console.log(data);\n});\n```\n\nThese will print out:\n\n```\n  _   _      _ _        __        __         _     _ _ _\n | | | | ___| | | ___   \\ \\      / /__  _ __| | __| | | |\n | |_| |/ _ \\ | |/ _ \\   \\ \\ /\\ / / _ \\| '__| |/ _` | | |\n |  _  |  __/ | | (_) |   \\ V  V / (_) | |  | | (_| |_|_|\n |_| |_|\\___|_|_|\\___/     \\_/\\_/ \\___/|_|  |_|\\__,_(_|_)\n```\n\n## Basic Usage - Node\n\n### text\n\nCalling the figlet object as a function is shorthand for calling the text function. This method allows you to create ASCII Art from text. It takes in 3 parameters:\n\n- Input Text - A string of text to turn into ASCII Art.\n- Options - Either a string indicating the font name or an options object (description below).\n- Callback - Optional function to execute with the generated ASCII Art.\n\nThe return value is a **promise** that resolves to the generated ASCII Art.\n\nExample:\n\n```js\nfiglet.text(\n  \"Boo!\",\n  {\n    font: \"Ghost\",\n    horizontalLayout: \"default\",\n    verticalLayout: \"default\",\n    width: 80,\n    whitespaceBreak: true,\n  },\n  function (err, data) {\n    if (err) {\n      console.log(\"Something went wrong...\");\n      console.dir(err);\n      return;\n    }\n    console.log(data);\n  }\n);\n```\n\nThat will print out:\n\n```\n.-. .-')                            ,---.\n\\  ( OO )                           |   |\n ;-----.\\  .-'),-----.  .-'),-----. |   |\n | .-.  | ( OO'  .-.  '( OO'  .-.  '|   |\n | '-' /_)/   |  | |  |/   |  | |  ||   |\n | .-. `. \\_) |  |\\|  |\\_) |  |\\|  ||  .'\n | |  \\  |  \\ |  | |  |  \\ |  | |  |`--'\n | '--'  /   `'  '-'  '   `'  '-'  '.--.\n `------'      `-----'      `-----' '--'\n```\n\nSimilarly, you can use Promise API:\n\n```js\ntry {\n  console.log(\n    await figlet.text(\"Boo!\", {\n      font: \"Ghost\",\n      horizontalLayout: \"default\",\n      verticalLayout: \"default\",\n      width: 80,\n      whitespaceBreak: true,\n    })\n  );\n} catch (err) {\n  console.log(\"Something went wrong...\");\n  console.dir(err);\n}\n```\n\nThis will print the same output.\n\n### textSync\n\nThis method is the synchronous version of the method above.\n\n- Input Text - A string of text to turn into ASCII Art.\n- Font Options - Either a string indicating the font name or an options object (description below).\n\nExample:\n\n```js\nconsole.log(\n  figlet.textSync(\"Boo!\", {\n    font: \"Ghost\",\n    horizontalLayout: \"default\",\n    verticalLayout: \"default\",\n    width: 80,\n    whitespaceBreak: true,\n  })\n);\n```\n\nThat will print out:\n\n```\n.-. .-')                            ,---.\n\\  ( OO )                           |   |\n ;-----.\\  .-'),-----.  .-'),-----. |   |\n | .-.  | ( OO'  .-.  '( OO'  .-.  '|   |\n | '-' /_)/   |  | |  |/   |  | |  ||   |\n | .-. `. \\_) |  |\\|  |\\_) |  |\\|  ||  .'\n | |  \\  |  \\ |  | |  |  \\ |  | |  |`--'\n | '--'  /   `'  '-'  '   `'  '-'  '.--.\n `------'      `-----'      `-----' '--'\n```\n\n### Options\n\nThe options object has several parameters which you can set:\n\n#### font\n\nType: `String`\nDefault value: `'Standard'`\n\nA string value that indicates the FIGlet font to use.\n\n#### horizontalLayout\n\nType: `String`\nDefault value: `'default'`\n\nA string value that indicates the horizontal layout to use. 5 possible values for this: \"default\", \"full\", \"fitted\", \"controlled smushing\", and \"universal smushing\". \"default\" does the kerning the way the font designer intended, \"full\" uses full letter spacing, \"fitted\" moves the letters together until they almost touch, and \"controlled smushing\" and \"universal smushing\" are common FIGlet kerning setups.\n\n#### verticalLayout\n\nType: `String`\nDefault value: `'default'`\n\nA string value that indicates the vertical layout to use. 5 possible values for this: \"default\", \"full\", \"fitted\", \"controlled smushing\", and \"universal smushing\". \"default\" does the kerning the way the font designer intended, \"full\" uses full letter spacing, \"fitted\" moves the letters together until they almost touch, and \"controlled smushing\" and \"universal smushing\" are common FIGlet kerning setups.\n\n#### width\n\nType: `Number`\nDefault value: `undefined`\n\nThis option allows you to limit the width of the output. For example, if you want your output to be a max of 80 characters wide, you would set this option to 80. [Example](https://github.com/patorjk/figlet.js/blob/master/examples/front-end/index.htm)\n\n#### whitespaceBreak\n\nType: `Boolean`\nDefault value: `false`\n\nThis option works in conjunction with \"width\". If this option is set to true, then the library will attempt to break text up on whitespace when limiting the width. [Example](https://github.com/patorjk/figlet.js/blob/master/examples/front-end/index.htm)\n\n### Understanding Kerning\n\nThe 2 layout options allow you to override a font's default \"kerning\". Below you can see how this effects the text. The string \"Kerning\" was printed using the \"Standard\" font with horizontal layouts of \"default\", \"fitted\" and then \"full\".\n\n```\n  _  __               _\n | |/ /___ _ __ _ __ (_)_ __   __ _\n | ' // _ \\ '__| '_ \\| | '_ \\ / _` |\n | . \\  __/ |  | | | | | | | | (_| |\n |_|\\_\\___|_|  |_| |_|_|_| |_|\\__, |\n                              |___/\n  _  __                   _\n | |/ / ___  _ __  _ __  (_) _ __    __ _\n | ' / / _ \\| '__|| '_ \\ | || '_ \\  / _` |\n | . \\|  __/| |   | | | || || | | || (_| |\n |_|\\_\\\\___||_|   |_| |_||_||_| |_| \\__, |\n                                    |___/\n  _  __                        _\n | |/ /   ___   _ __   _ __   (_)  _ __     __ _\n | ' /   / _ \\ | '__| | '_ \\  | | | '_ \\   / _` |\n | . \\  |  __/ | |    | | | | | | | | | | | (_| |\n |_|\\_\\  \\___| |_|    |_| |_| |_| |_| |_|  \\__, |\n                                           |___/\n```\n\nIn most cases you'll either use the default setting or the \"fitted\" setting. Most fonts don't support vertical kerning, but a hand full of them do (like the \"Standard\" font).\n\n### metadata\n\nThe metadata function allows you to retrieve a font's default options and header comment. Example usage:\n\n```js\nfiglet.metadata(\"Standard\", function (err, options, headerComment) {\n  if (err) {\n    console.log(\"something went wrong...\");\n    console.dir(err);\n    return;\n  }\n  console.dir(options);\n  console.log(headerComment);\n});\n```\n\nThe function also return a promise that return an array with two values:\n\n```js\ntry {\n  const [options, headerComment] = await figlet.metadata(\"Standard\");\n  console.dir(options);\n  console.log(headerComment);\n} catch (err) {\n  console.log(\"something went wrong...\");\n  console.dir(err);\n}\n```\n\n### fonts\n\nThe fonts function allows you to get a list of all of the available fonts. Example usage:\n\n```js\nfiglet.fonts(function (err, fonts) {\n  if (err) {\n    console.log(\"something went wrong...\");\n    console.dir(err);\n    return;\n  }\n  console.dir(fonts);\n});\n```\n\nFor Node, it will look in the fonts folder and list all of the fonts there - this folder is configurable in case you want to use your own folder (see the `defaults` method).\n\nWhen dealing with this code in the browser, it will return a list of all of the fonts that come with this library. If you only want a list of the fonts that have been loaded into memory (ie, fetched and parsed and currently usable), use the `loadedFonts` method (this also returns a list of strings).\n\n### fontsSync\n\nThe synchronous version of the fonts method\n\n```js\nconsole.log(figlet.fontsSync());\n```\n\nAs with `fonts`, when used in the browser this will list all of the fonts that come with this library.\n\n### loadedFonts\n\nWhen you call `loadFont` or `parseFont`, the font information gets processed and put into an internal array. This method allows you to see all of the fonts that have been loaded. It returns an array of font names.\n\n### clearLoadedFonts\n\nResets the internal state so that no fonts have been loaded.\n\n### parseFont\n\nAllows you to use a font from another source.\n\n```js\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nlet data = fs.readFileSync(path.join(__dirname, \"myfont.flf\"), \"utf8\");\nfiglet.parseFont(\"myfont\", data);\nconsole.log(figlet.textSync(\"myfont!\", \"myfont\"));\n```\n\n### defaults\n\nAllows you to set a handful of default values for the library. Ex:\n\n```js\nfiglet.defaults({\n  font: \"Standard\", // default font\n  fontPath: \"some-random-place/fonts\", // default font path location\n  fetchFontIfMissing: true, // for the browser, fetch a font if its missing\n})\n```\n\n## Getting Started - Browser with ES modules\n\nHere's the basic ES module usage:\n\n```js\nimport figlet from \"figlet\";\nimport standard from \"figlet/fonts/Standard\";\n\nfiglet.parseFont(\"Standard\", standard);\n\nasync function doStuff() {\n  const text = await figlet.text(\"test\", { font: \"Standard\" });\n  console.log(text);\n}\n\ndoStuff();\n```\n\nIn previous versions you imported js files from an importable-fonts folder. This still works, but the new way is slightly cleaner.\n\nIf you attempt to access a font that doesn't exist, the library will attempt to fetch it. You can control the fetch location via the `fontPath` property in `defaults`. If you want to disable this behavior (fetching a font if it doesn't exist), set `fetchFontIfMissing` to false (with the `defaults` method).\n\n### textSync\n\nThe browser API supports synchronous mode as long as the fonts have been loaded or preloaded.\n\nExample:\n\n```js\nfiglet.defaults({ fontPath: \"assets/fonts\" });\n\nfiglet.preloadFonts([\"Standard\", \"Ghost\"], ready);\n\nfunction ready() {\n  console.log(figlet.textSync(\"ASCII\"));\n  console.log(figlet.textSync(\"Art\", \"Ghost\"));\n}\n```\n\nThat will print out:\n\n```\n     _     ____    ____  ___  ___\n    / \\   / ___|  / ___||_ _||_ _|\n   / _ \\  \\___ \\ | |     | |  | |\n  / ___ \\  ___) || |___  | |  | |\n /_/   \\_\\|____/  \\____||___||___|\n\n   ('-.     _  .-')   .-') _\n  ( OO ).-.( \\( -O ) (  OO) )\n  / . --. / ,------. /     '._\n  | \\-.  \\  |   /`. '|'--...__)\n.-'-'  |  | |  /  | |'--.  .--'\n \\| |_.'  | |  |_.' |   |  |\n  |  .-.  | |  .  '.'   |  |\n  |  | |  | |  |\\  \\    |  |\n  `--' `--' `--' '--'   `--'\n\n```\n\nSee the examples folder for a more robust front-end example.\n\n## Getting Started - Command Line\n\nTo use figlet.js on the command line, install globally:\n\n```sh\nnpm install -g figlet\n```\n\nAnd then you should be able run from the command line. Example:\n\n```sh\nfiglet -f \"Dancing Font\" \"Hi\"\n```\n\n## Contributors\n\nThanks goes to these people: ([emoji key](https://allcontributors.org/docs/en/emoji-key))\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://patorjk.com/\"><img src=\"https://avatars.githubusercontent.com/u/521224?v=4?s=100\" width=\"100px;\" alt=\"patorjk\"/><br /><sub><b>patorjk</b></sub></a><br /><a href=\"#code-patorjk\" title=\"Code\">💻</a> <a href=\"#doc-patorjk\" title=\"Documentation\">📖</a> <a href=\"#test-patorjk\" title=\"Tests\">⚠️</a> <a href=\"#infra-patorjk\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#example-patorjk\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jcu.bi\"><img src=\"https://avatars.githubusercontent.com/u/280241?v=4?s=100\" width=\"100px;\" alt=\"Jakub T. Jankiewicz\"/><br /><sub><b>Jakub T. Jankiewicz</b></sub></a><br /><a href=\"#code-jcubic\" title=\"Code\">💻</a> <a href=\"#doc-jcubic\" title=\"Documentation\">📖</a> <a href=\"#test-jcubic\" title=\"Tests\">⚠️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://tracker1.dev/\"><img src=\"https://avatars.githubusercontent.com/u/444316?v=4?s=100\" width=\"100px;\" alt=\"Michael J. Ryan\"/><br /><sub><b>Michael J. Ryan</b></sub></a><br /><a href=\"#code-tracker1\" title=\"Code\">💻</a> <a href=\"#doc-tracker1\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/seriousManual\"><img src=\"https://avatars.githubusercontent.com/u/1330022?v=4?s=100\" width=\"100px;\" alt=\"Manuel Ernst\"/><br /><sub><b>Manuel Ernst</b></sub></a><br /><a href=\"#code-seriousManual\" title=\"Code\">💻</a> <a href=\"#doc-seriousManual\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/eiriksm\"><img src=\"https://avatars.githubusercontent.com/u/865153?v=4?s=100\" width=\"100px;\" alt=\"Eirik Stanghelle Morland\"/><br /><sub><b>Eirik Stanghelle Morland</b></sub></a><br /><a href=\"#infra-eiriksm\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://und.ooo\"><img src=\"https://avatars.githubusercontent.com/u/46262811?v=4?s=100\" width=\"100px;\" alt=\"George\"/><br /><sub><b>George</b></sub></a><br /><a href=\"#example-Horhik\" title=\"Examples\">💡</a> <a href=\"#doc-Horhik\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://websemantics.ca\"><img src=\"https://avatars.githubusercontent.com/u/2190455?v=4?s=100\" width=\"100px;\" alt=\"Adnan M.Sagar, PhD\"/><br /><sub><b>Adnan M.Sagar, PhD</b></sub></a><br /><a href=\"#code-websemantics\" title=\"Code\">💻</a> <a href=\"#doc-websemantics\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://abhishekchoudhary.com.np\"><img src=\"https://avatars.githubusercontent.com/u/61597896?v=4?s=100\" width=\"100px;\" alt=\"Abhishek Choudhary\"/><br /><sub><b>Abhishek Choudhary</b></sub></a><br /><a href=\"#doc-shreemaan-abhishek\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JasonGoemaat\"><img src=\"https://avatars.githubusercontent.com/u/114062?v=4?s=100\" width=\"100px;\" alt=\"Jason\"/><br /><sub><b>Jason</b></sub></a><br /><a href=\"#code-JasonGoemaat\" title=\"Code\">💻</a> <a href=\"#doc-JasonGoemaat\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mbodomi\"><img src=\"https://avatars.githubusercontent.com/u/390802?v=4?s=100\" width=\"100px;\" alt=\"mbodomi\"/><br /><sub><b>mbodomi</b></sub></a><br /><a href=\"#design-mbodomi\" title=\"Design\">🎨</a> <a href=\"#code-mbodomi\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://orkhan-huseyn.github.io\"><img src=\"https://avatars.githubusercontent.com/u/21221412?v=4?s=100\" width=\"100px;\" alt=\"Orkhan Huseynli\"/><br /><sub><b>Orkhan Huseynli</b></sub></a><br /><a href=\"#code-orkhan-huseyn\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://melcher.io\"><img src=\"https://avatars.githubusercontent.com/u/35605787?v=4?s=100\" width=\"100px;\" alt=\"Domenic Melcher\"/><br /><sub><b>Domenic Melcher</b></sub></a><br /><a href=\"#doc-LetsMelon\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/a-raccoon\"><img src=\"https://avatars.githubusercontent.com/u/1052090?v=4?s=100\" width=\"100px;\" alt=\"a-raccoon\"/><br /><sub><b>a-raccoon</b></sub></a><br /><a href=\"#doc-a-raccoon\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://about.me/peterdehaan\"><img src=\"https://avatars.githubusercontent.com/u/557895?v=4?s=100\" width=\"100px;\" alt=\"Peter deHaan\"/><br /><sub><b>Peter deHaan</b></sub></a><br /><a href=\"#doc-pdehaan\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ionicabizau.net\"><img src=\"https://avatars.githubusercontent.com/u/2864371?v=4?s=100\" width=\"100px;\" alt=\"Ionică Bizău (Johnny B.)\"/><br /><sub><b>Ionică Bizău (Johnny B.)</b></sub></a><br /><a href=\"#doc-IonicaBizau\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars.githubusercontent.com/u/1469638?v=4?s=100\" width=\"100px;\" alt=\"t1st3\"/><br /><sub><b>t1st3</b></sub></a><br /><a href=\"#code-t1st3\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/timhudson\"><img src=\"https://avatars.githubusercontent.com/u/122594?v=4?s=100\" width=\"100px;\" alt=\"Tim Hudson\"/><br /><sub><b>Tim Hudson</b></sub></a><br /><a href=\"#code-timhudson\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Lev-Shapiro\"><img src=\"https://avatars.githubusercontent.com/u/96536068?v=4?s=100\" width=\"100px;\" alt=\"Lev-Shapiro\"/><br /><sub><b>Lev-Shapiro</b></sub></a><br /><a href=\"#code-Lev-Shapiro\" title=\"Code\">💻</a> <a href=\"#example-Lev-Shapiro\" title=\"Examples\">💡</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Release History\n\n- 2025.09.17 v1.9.3 Type fix for figlet module base call (when calling figlet as shorthand for figlet.text)\n- 2025.09.15 v1.9.2 Type fix for figlet module for TypeScript with Node\n- 2025.09.08 v1.9.1 Adjustment for older versions of node: Added if statement around structuredClone operation.\n- 2025.09.07 v1.9.0 TypeScript refactor. Added Toilet fonts.\n- 2025.07.11 v1.8.2 Added Terrace and Wavescape fonts. Fixed tag validation (https://github.com/patorjk/figlet.js/pull/134) thanks to @deverac\n- 2025.04.11 v1.8.1 Added miniwi font.\n- 2024.10.08 v1.8.0 Added support for promises for loadFont, preloadedFonts, and metadata methods. 5 fonts added: DiamFont, RubiFont, CosMike2, BlurVision ASCII, and Shaded Blocky.\n- 2023.10.01 v1.7.0 Added support for promises for text method.\n- 2023.04.08 v1.6.0 Added npx support (ex: npx figlet test).\n- 2021.08.11 v1.5.2 Minor bug fixes.\n- 2020.07.12 v1.5.1 Fixed with vertical smushing, updated lodash version.\n- 2020.07.12 v1.5.0 Added width and whitespaceBreak options.\n- 2020.04.26 v1.4.0 Removed jQuery from preloader and examples.\n- 2020.02.23 v1.3.0 Added the \"ANSI Regular\" font and updated the README with info on how to use with Webpack.\n- 2018.03.26 v1.2.1 parseFont works in node for adding fonts manually\n- 2016.09.27 v1.2.0 jQuery replaced with fetch API / polyfill.\n- 2016.04.28 v1.1.2 textSync now works in the browser with font pre-loading.\n- 2014.08.15 v1.1.0 Sync functions added.\n- 2014.07.31 v1.0.1 Bug fixes.\n- 2013.12.28 v1.0.7 README update and minor tweaks.\n- 2013.01.02 v1.0.8 Added tests and command line info.\n\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (C) 2014-present Patrick Gillespie and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/figlet/-/figlet-1.9.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/figlet/-/figlet-1.9.3.tgz",
    "hash": "",
    "integrity": "sha512-majPgOpVtrZN1iyNGbsUP6bOtZ6eaJgg5HHh0vFvm5DJhh8dc+FJpOC4GABvMZ/A7XHAJUuJujhgUY/2jPWgMA==",
    "registry": "npm",
    "packageName": "figlet",
    "cacheIntegrity": "sha512-majPgOpVtrZN1iyNGbsUP6bOtZ6eaJgg5HHh0vFvm5DJhh8dc+FJpOC4GABvMZ/A7XHAJUuJujhgUY/2jPWgMA== sha1-0wkGqmAXYI6STn+4LKbBGAL1VoA="
  },
  "registry": "npm",
  "hash": "99a8cf80ea55b6b64dd62c8d19bb143fa6ceb59e9e689820e471e1d2f16f9b90c9861f1d73e149a4e0b818006f319fc0ed71c0254b89ba3860518ff68cf5a030"
}