{
  "manifest": {
    "name": "peek-readable",
    "version": "5.4.2",
    "description": "Read and peek from a readable stream",
    "author": {
      "name": "Borewit",
      "url": "https://github.com/Borewit"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/Borewit"
    },
    "scripts": {
      "clean": "del-cli 'lib/**/*.js' 'lib/**/*.js.map' 'lib/**/*.d.ts' 'test/**/*.js' 'test/**/*.js.map' 'coverage' '.nyc_output'",
      "build": "npm run clean && npm run compile",
      "compile-src": "tsc -p lib",
      "compile-test": "tsc -p test",
      "compile": "yarn run compile-src && yarn run compile-test",
      "lint-ts": "biome check",
      "lint-md": "remark -u preset-lint-recommended .",
      "lint": "yarn run lint-md && yarn run lint-ts",
      "test": "mocha",
      "test-coverage": "c8 npm run test",
      "start": "yarn run compile && yarn run lint && yarn run cover-test"
    },
    "engines": {
      "node": ">=14.16"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Borewit/peek-readable"
    },
    "license": "MIT",
    "type": "module",
    "exports": "./lib/index.js",
    "types": "lib/index.d.ts",
    "bugs": {
      "url": "https://github.com/Borewit/peek-readable/issues"
    },
    "files": [
      "lib/**/*.js",
      "lib/**/*.d.ts"
    ],
    "devDependencies": {
      "@biomejs/biome": "1.9.4",
      "@types/chai": "^5.0.1",
      "@types/chai-as-promised": "^8.0.1",
      "@types/mocha": "^10.0.10",
      "@types/node": "^22.10.10",
      "c8": "^10.1.3",
      "chai": "^5.1.2",
      "chai-as-promised": "^8.0.1",
      "del-cli": "^6.0.0",
      "mocha": "^11.1.0",
      "remark-cli": "^12.0.1",
      "remark-preset-lint-recommended": "^7.0.0",
      "source-map-support": "^0.5.21",
      "ts-node": "^10.9.2",
      "typescript": "^5.7.3"
    },
    "keywords": [
      "readable",
      "buffer",
      "stream",
      "read"
    ],
    "packageManager": "yarn@4.6.0",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-peek-readable-5.4.2-integrity/node_modules/peek-readable/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Node.js CI](https://github.com/Borewit/peek-readable/actions/workflows/nodejs-ci.yml/badge.svg?branch=master)](https://github.com/Borewit/peek-readable/actions/workflows/nodejs-ci.yml)\n[![CodeQL](https://github.com/Borewit/peek-readable/actions/workflows/github-code-scanning/codeql/badge.svg?branch=master)](https://github.com/Borewit/peek-readable/actions/workflows/github-code-scanning/codeql)[![NPM version](https://badge.fury.io/js/peek-readable.svg)](https://npmjs.org/package/peek-readable)\n[![npm downloads](http://img.shields.io/npm/dm/peek-readable.svg)](https://npmcharts.com/compare/peek-readable?start=600&interval=30)\n[![Coverage Status](https://coveralls.io/repos/github/Borewit/peek-readable/badge.svg?branch=master)](https://coveralls.io/github/Borewit/peek-readable?branch=master)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/d4b511481b3a4634b6ca5c0724407eb9)](https://www.codacy.com/gh/Borewit/peek-readable/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Borewit/peek-readable&amp;utm_campaign=Badge_Grade)\n[![Known Vulnerabilities](https://snyk.io/test/github/Borewit/peek-readable/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Borewit/peek-readable?targetFile=package.json)\n\n# peek-readable\n\nA promise based asynchronous stream reader, which makes reading from a stream easy.\n\nAllows to read and peek from a [Readable Stream](https://nodejs.org/api/stream.html#stream_readable_streams)\n\nThis module is used by [strtok3](https://github.com/Borewit/strtok3)\n\nThe `peek-readable` contains one class: `StreamReader`, which reads from a [stream.Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable).\n\n- Class `StreamReader` is used to read from Node.js [stream.Readable](https://nodejs.org/api/stream.html#stream_class_stream_readable).\n- Class `WebStreamReader` is used to read from [ReadableStream<Uint8Array>](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n\n## Compatibility\n\nModule: version 5 migrated from [CommonJS](https://en.wikipedia.org/wiki/CommonJS) to [pure ECMAScript Module (ESM)](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nJavaScript is compliant with [ECMAScript 2019 (ES10)](https://en.wikipedia.org/wiki/ECMAScript#10th_Edition_%E2%80%93_ECMAScript_2019).\nRequires Node.js â‰¥ 14.16 engine.\n\n## Usage\n\n### Installation\n\n```shell script\nnpm install --save peek-readable\n```\n\n## API Documentation\n\nBoth `StreamReader` and `WebStreamReader` implement the [IStreamReader interface](#istreamreader-interface).\n\n### `IStreamReader` Interface\n\nThe `IStreamReader` interface defines the contract for a stream reader,\nwhich provides methods to read and peek data from a stream into a `Uint8Array` buffer.\nThe methods are asynchronous and return a promise that resolves with the number of bytes read.\n\n#### Methods\n\n##### `peek` function\nThis method allows you to inspect data from the stream without advancing the read pointer.\nIt reads data into the provided Uint8Array at a specified offset but does not modify the stream's internal position, \nallowing you to look ahead in the stream.\n\n```ts  \npeek(uint8Array: Uint8Array, offset: number, length: number): Promise<number>\n```\n\nParameters:\n- `uint8Array`: `Uint8Array`: The buffer into which the data will be peeked.\n  This is where the peeked data will be stored.\n- `offset`: `number`: The offset in the Uint8Array where the peeked data should start being written.\n- `length`: `number`: The number of bytes to peek from the stream.\n\nReturns `Promise<number>`: \nA promise that resolves with the number of bytes actually peeked into the buffer. \nThis number may be less than the requested length if the end of the stream is reached.\n\n##### `read` function\n```ts  \nread(buffer: Uint8Array, offset: number, length: number): Promise<number>\n```\n\nParameters:\n- `uint8Array`: `Uint8Array`: The buffer into which the data will be read.\n  This is where the read data will be stored.\n- `offset`: `number`: The offset in the Uint8Array where the read data should start being written.\n- `length`: `number`: The number of bytes to read from the stream.\n\nReturns `Promise<number>`:\nA promise that resolves with the number of bytes actually read into the buffer.\nThis number may be less than the requested length if the end of the stream is reached.\n\n##### `abort` function\n\nAbort active asynchronous operation (`read` or `peak`) before it has completed.\n\n```ts  \nabort(): Promise<void>\n```\n\n## Examples\n\nIn the following example we read the first 16 bytes from a stream and store them in our buffer.\nSource code of examples can be found [here](test/examples.ts).\n\n```js\nimport fs from 'node:fs';\nimport { StreamReader } from 'peek-readable';\n\n(async () => {\n  const readable = fs.createReadStream('JPEG_example_JPG_RIP_001.jpg');\n  const streamReader = new StreamReader(readable);\n  const uint8Array = new Uint8Array(16);\n  const bytesRead = await streamReader.read(uint8Array, 0, 16);;\n  // buffer contains 16 bytes, if the end-of-stream has not been reached\n})();\n```\n\nEnd-of-stream detection:\n```js\n(async () => {\n\n  const fileReadStream = fs.createReadStream('JPEG_example_JPG_RIP_001.jpg');\n  const streamReader = new StreamReader(fileReadStream);\n  const buffer = Buffer.alloc(16); // or use: new Uint8Array(16);\n\n  try {\n    await streamReader.read(buffer, 0, 16);\n    // buffer contains 16 bytes, if the end-of-stream has not been reached\n  } catch(error) {\n    if (error instanceof EndOfStreamError) {\n      console.log('End-of-stream reached');\n    }\n  }\n})();\n```\n\nWith `peek` you can read ahead:\n```js\nimport fs from 'node:fs';\nimport { StreamReader } from 'peek-readable';\n\nfunction closeNodeStream(stream: ReadStream): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    stream.close(err => {\n      if(err)\n        reject(err);\n      else\n        resolve();\n    });\n  })\n}\n\n(async () => {\n\n  const fileReadStream = fs.createReadStream('JPEG_example_JPG_RIP_001.jpg');\n  try {\n    const streamReader = new StreamReader(fileReadStream);\n    try {\n      const buffer = Buffer.alloc(20);\n\n      let bytesRead = await streamReader.peek(buffer, 0, 3);\n      if (bytesRead === 3 && buffer[0] === 0xFF && buffer[1] === 0xD8 && buffer[2] === 0xFF) {\n        console.log('This is a JPEG file');\n      } else {\n        throw Error('Expected a JPEG file');\n      }\n\n      bytesRead = await streamReader.read(buffer, 0, 20); // Read JPEG header\n      if (bytesRead === 20) {\n        console.log('Got the JPEG header');\n      } else {\n        throw Error('Failed to read JPEG header');\n      }\n    } finally {\n      await streamReader.close(); // Release fileReadStream\n    }    \n  } finally {\n    await closeNodeStream(fileReadStream);\n  }\n\n\n})();\n```\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2010-2017 Borewit\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/peek-readable/-/peek-readable-5.4.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/peek-readable/-/peek-readable-5.4.2.tgz",
    "hash": "",
    "integrity": "sha512-peBp3qZyuS6cNIJ2akRNG1uo1WJ1d0wTxg/fxMdZ0BqCVhx242bSFHM9eNqflfJVS9SsgkzgT/1UgnsurBOTMg==",
    "registry": "npm",
    "packageName": "peek-readable",
    "cacheIntegrity": "sha512-peBp3qZyuS6cNIJ2akRNG1uo1WJ1d0wTxg/fxMdZ0BqCVhx242bSFHM9eNqflfJVS9SsgkzgT/1UgnsurBOTMg== sha1-r/Hhuien1pEd2xA/NSUv/BeHr0k="
  },
  "registry": "npm",
  "hash": "a5e069dea672b92e9c3482766a444d1b5ba8d56275774c13c60fdfc4c759d01a82561c76e366d214733d78da9f95f2554bd4ac824ce04ffd54827b2eac139332"
}