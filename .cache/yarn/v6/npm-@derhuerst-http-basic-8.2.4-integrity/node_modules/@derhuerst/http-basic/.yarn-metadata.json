{
  "manifest": {
    "name": "@derhuerst/http-basic",
    "version": "8.2.4",
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "files": [
      "lib"
    ],
    "description": "Very low level wrapper arround http.request/https.request",
    "keywords": [
      "http",
      "https",
      "request",
      "fetch",
      "gzip",
      "deflate",
      "redirect",
      "cache",
      "etag",
      "cache-control"
    ],
    "dependencies": {
      "caseless": "^0.12.0",
      "concat-stream": "^2.0.0",
      "http-response-object": "^3.0.1",
      "parse-cache-control": "^1.0.1"
    },
    "devDependencies": {
      "@types/concat-stream": "^2.0.0",
      "@types/node": "^18.0.1",
      "flowgen2": "^2.2.1",
      "rimraf": "^3.0.2",
      "serve-static": "^1.11.1",
      "typescript": "^4.5.4"
    },
    "scripts": {
      "prepublishOnly": "npm run build",
      "build": "tsc && flowgen lib/**/*",
      "pretest": "npm run build",
      "test": "node test/index && node test/cache && node test/cache-invalidation && rimraf lib/cache"
    },
    "engines": {
      "node": ">=6.0.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/derhuerst/http-basic.git"
    },
    "author": {
      "name": "ForbesLindesay"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-@derhuerst-http-basic-8.2.4-integrity/node_modules/@derhuerst/http-basic/package.json",
    "readmeFilename": "README.md",
    "readme": "# http-basic\n\n**This is a temporary fork of [`ForbesLindesay/http-basic`](https://github.com/ForbesLindesay/http-basic).**\n\n---\n\nSimple wrapper arround http.request/https.request\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/http-basic/master.svg)](https://travis-ci.org/ForbesLindesay/http-basic)\n[![Dependency Status](https://img.shields.io/david/ForbesLindesay/http-basic.svg)](https://david-dm.org/ForbesLindesay/http-basic)\n[![NPM version](https://img.shields.io/npm/v/http-basic.svg)](https://www.npmjs.org/package/http-basic)\n\n## Installation\n\n    npm install http-basic\n\n## Usage\n\n```js\nvar request = require('http-basic');\n\nvar options = {followRedirects: true, gzip: true, cache: 'memory'};\n\nvar req = request('GET', 'http://example.com', options, function (err, res) {\n  if (err) throw err;\n  console.dir(res.statusCode);\n  res.body.resume();\n});\nreq.end();\n```\n\n**method:**\n\nThe http method (e.g. `GET`, `POST`, `PUT`, `DELETE` etc.)\n\n**url:**\n\nThe url as a string (e.g. `http://example.com`).  It must be fully qualified and either http or https.\n\n**options:**\n\n - `headers` - (default `{}`) http headers\n - `agent` - (default: `false`) controlls keep-alive (see http://nodejs.org/api/http.html#http_http_request_options_callback)\n - `duplex` - (default: `true` except for `GET`, `OPTIONS` and `HEAD` requests) allows you to explicitly set a body on a request that uses a method that normally would not have a body\n - `followRedirects` - (default: `false`) - if true, redirects are followed (note that this only affects the result in the callback)\n - `maxRedirects` - (default: `Infinity`) - limit the number of redirects allowed.\n - `allowRedirectHeaders` (default: `null`) - an array of headers allowed for redirects (none if `null`).\n - `gzip` (default: `false`) - automatically accept gzip and deflate encodings.  This is kept completely transparent to the user.\n - `cache` - (default: `null`) - `'memory'` or `'file'` to use the default built in caches or you can pass your own cache implementation.\n - `timeout` (default: `false`) - times out if no response is returned within the given number of milliseconds.\n - `socketTimeout` (default: `false`) - calls `req.setTimeout` internally which causes the request to timeout if no new data is seen for the given number of milliseconds.\n - `retry` (default: `false`) - retry GET requests.  Set this to `true` to retry when the request errors or returns a status code greater than or equal to 400 (can also be a function that takes `(err, req, attemptNo) => shouldRetry`)\n - `retryDelay` (default: `200`) - the delay between retries (can also be set to a function that takes `(err, res, attemptNo) => delay`)\n - `maxRetries` (default: `5`) - the number of times to retry before giving up.\n - `ignoreFailedInvalidation` (default: `false`) - whether the cache should swallow errors if there is a problem removing a cached response. Note that enabling this setting may result in incorrect, cached data being returned to the user.\n - `isMatch` - `(requestHeaders: Headers, cachedResponse: CachedResponse, defaultValue: boolean) => boolean` - override the default behaviour for testing whether a cached response matches a request.\n - `isExpired` - `(cachedResponse: CachedResponse, defaultValue: boolean) => boolean` - override the default behaviour for testing whether a cached response has expired\n - `canCache` - `(res: Response<NodeJS.ReadableStream>, defaultValue: boolean) => boolean` - override the default behaviour for testing whether a response can be cached\n\n**callback:**\n\nThe callback is called with `err` as the first argument and `res` as the second argument. `res` is an [http-response-object](https://github.com/ForbesLindesay/http-response-object).  It has the following properties:\n\n - `statusCode` - a number representing the HTTP Status Code\n - `headers` - an object representing the HTTP headers\n - `body` - a readable stream respresenting the request body.\n - `url` - the URL that was requested (in the case of redirects, this is the final url that was requested)\n\n**returns:**\n\nIf the method is `GET`, `DELETE` or `HEAD`, it returns `undefined`.\n\nOtherwise, it returns a writable stream for the body of the request.\n\n## Implementing a Cache\n\nA `Cache` is an object with three methods:\n\n - `getResponse(url, callback)` - retrieve a cached response object\n - `setResponse(url, response)` - cache a response object\n - `invalidateResponse(url, callback)` - remove a response which is no longer valid\n\nA cached response object is an object with the following properties:\n\n - `statusCode` - Number\n - `headers` - Object (key value pairs of strings)\n - `body` - Stream (a stream of binary data)\n - `requestHeaders` - Object (key value pairs of strings)\n - `requestTimestamp` - Number\n\n`getResponse` should call the callback with an optional error and either `null` or a cached response object, depending on whether the url can be found in the cache.  Only `GET`s are cached.\n\n`setResponse` should just swallow any errors it has (or resport them using `console.warn`).\n\n`invalidateResponse` should call the callback with an optional error if it is unable to invalidate a response.\n\nA cache may also define any of the methods from `lib/cache-utils.js` to override behaviour for what gets cached.  It is currently still only possible to cache \"get\" requests, although this could be changed.\n\n## License\n\n  MIT\n",
    "licenseText": "Copyright (c) 2022 Forbes Lindesay & Jannis R\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@derhuerst/http-basic/-/http-basic-8.2.4.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@derhuerst/http-basic/-/http-basic-8.2.4.tgz",
    "hash": "",
    "integrity": "sha512-F9rL9k9Xjf5blCz8HsJRO4diy111cayL2vkY2XE4r4t3n0yPXVYy3KD3nJ1qbrSn9743UWSXH4IwuCa/HWlGFw==",
    "registry": "npm",
    "packageName": "@derhuerst/http-basic",
    "cacheIntegrity": "sha512-F9rL9k9Xjf5blCz8HsJRO4diy111cayL2vkY2XE4r4t3n0yPXVYy3KD3nJ1qbrSn9743UWSXH4IwuCa/HWlGFw== sha1-0CHruPZdVL6mga5vSoczzonn9Zs="
  },
  "registry": "npm",
  "hash": "17dacbf64f578dfe5b942cfc1ec2513b8762cb5d7571ac8bdaf918d97138af8b779f4c8f5d5632dca0f79c9d6a6eb4a7f7be375164971f8230b826bf1d694617"
}