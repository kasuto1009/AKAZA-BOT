{
  "manifest": {
    "name": "strtok3",
    "version": "10.3.4",
    "description": "A promise based streaming tokenizer",
    "author": {
      "name": "Borewit",
      "url": "https://github.com/Borewit"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/Borewit"
    },
    "scripts": {
      "clean": "del-cli 'lib/**/*.js' 'lib/**/*.js.map' 'lib/**/*.d.ts' 'test/**/*.js' 'test/**/*.js.map'",
      "compile-src": "tsc -p lib  --sourceMap false",
      "compile-test": "tsc -p test",
      "compile": "yarn run compile-src && yarn run compile-test",
      "build": "yarn run clean && yarn run compile",
      "prepublishOnly": "yarn run build",
      "eslint": "eslint lib test",
      "lint:md": "remark -u preset-lint-recommended .",
      "lint:ts": "biome check",
      "lint": "yarn run lint:md && yarn run lint:ts",
      "fix": "yarn run biome lint --write",
      "test": "mocha",
      "bun:test": "bun run --bun test",
      "test-coverage": "c8 yarn run test",
      "send-codacy": "c8 report --reporter=text-lcov | codacy-coverage",
      "start": "yarn run compile && yarn run lint && yarn run cover-test",
      "update-biome": "yarn add -D --exact @biomejs/biome && npx @biomejs/biome migrate --write"
    },
    "engines": {
      "node": ">=18"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Borewit/strtok3.git"
    },
    "license": "MIT",
    "type": "module",
    "exports": {
      ".": {
        "node": "./lib/index.js",
        "default": "./lib/core.js"
      },
      "./core": "./lib/core.js"
    },
    "types": "lib/index.d.ts",
    "files": [
      "lib/**/*.js",
      "lib/**/*.d.ts"
    ],
    "bugs": {
      "url": "https://github.com/Borewit/strtok3/issues"
    },
    "dependencies": {
      "@tokenizer/token": "^0.3.0"
    },
    "devDependencies": {
      "@biomejs/biome": "2.1.2",
      "@types/chai": "^5.2.2",
      "@types/chai-as-promised": "^8.0.2",
      "@types/debug": "^4.1.12",
      "@types/mocha": "^10.0.10",
      "@types/node": "^24.1.0",
      "c8": "^10.1.3",
      "chai": "^5.2.1",
      "chai-as-promised": "^8.0.1",
      "del-cli": "^6.0.0",
      "mocha": "^11.7.1",
      "node-readable-to-web-readable-stream": "^0.4.2",
      "remark-cli": "^12.0.1",
      "remark-preset-lint-recommended": "^7.0.1",
      "token-types": "^6.0.4",
      "ts-node": "^10.9.2",
      "typescript": "^5.8.3",
      "uint8array-extras": "^1.4.0"
    },
    "keywords": [
      "tokenizer",
      "reader",
      "token",
      "async",
      "promise",
      "parser",
      "decoder",
      "binary",
      "endian",
      "uint",
      "stream",
      "streaming"
    ],
    "packageManager": "yarn@4.9.2",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-strtok3-10.3.4-integrity/node_modules/strtok3/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Node.js CI](https://github.com/Borewit/strtok3/actions/workflows/ci.yml/badge.svg)](https://github.com/Borewit/strtok3/actions/workflows/ci.yml)\n[![CodeQL](https://github.com/Borewit/strtok3/actions/workflows/codeql.yml/badge.svg?branch=master)](https://github.com/Borewit/strtok3/actions/workflows/codeql.yml)\n[![NPM version](https://badge.fury.io/js/strtok3.svg)](https://npmjs.org/package/strtok3)\n[![npm downloads](http://img.shields.io/npm/dm/strtok3.svg)](https://npmcharts.com/compare/strtok3,token-types?start=1200&interval=30)\n[![DeepScan grade](https://deepscan.io/api/teams/5165/projects/8526/branches/103329/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=5165&pid=8526&bid=103329)\n[![Known Vulnerabilities](https://snyk.io/test/github/Borewit/strtok3/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Borewit/strtok3?targetFile=package.json)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/59dd6795e61949fb97066ca52e6097ef)](https://www.codacy.com/app/Borewit/strtok3?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Borewit/strtok3&amp;utm_campaign=Badge_Grade)\n# strtok3\n\nA promise based streaming [*tokenizer*](#tokenizer-object) for [Node.js](http://nodejs.org) and browsers.\n\nThe `strtok3` module provides several methods for creating a [*tokenizer*](#tokenizer-object) from various input sources. \nDesigned for:\n* Seamless support in streaming environments.\n* Efficiently decode binary data, strings, and numbers.\n* Reading [predefined](https://github.com/Borewit/token-types) or custom tokens.\n* Offering [*tokenizers*](#tokenizer-object) for reading from [files](#method-strtok3fromfile), [streams](#fromstream-function) or [Uint8Arrays](#frombuffer-function).\n\n### Features\n`strtok3` can read from:\n* Files, using a file path as input.\n* Node.js [streams](https://nodejs.org/api/stream.html).\n* [Buffer](https://nodejs.org/api/buffer.html) or [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n* HTTP chunked transfer provided by [@tokenizer/http](https://github.com/Borewit/tokenizer-http).\n* [Amazon S3](https://aws.amazon.com/s3) chunks with [@tokenizer/s3](https://github.com/Borewit/tokenizer-s3).\n\n## Installation\n\n```sh\nnpm install strtok3\n```\n\n### Compatibility\n\nStarting with version 7, the module has migrated from [CommonJS](https://en.wikipedia.org/wiki/CommonJS) to [pure ECMAScript Module (ESM)](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nThe distributed JavaScript codebase is compliant with the [ECMAScript 2020 (11th Edition)](https://en.wikipedia.org/wiki/ECMAScript_version_history#11th_Edition_%E2%80%93_ECMAScript_2020) standard.\n\nRequires a modern browser, Node.js (V8) ≥ 18 engine or Bun (JavaScriptCore) ≥ 1.2.\n\nFor TypeScript CommonJs backward compatibility, you can use [load-esm](https://github.com/Borewit/load-esm).\n\n> [!NOTE]\n> This module requires a [Node.js ≥ 16](https://nodejs.org/en/about/previous-releases) engine.\n> It can also be used in a browser environment when bundled with a module bundler.\n\n## Support the Project\nIf you find this project useful and would like to support its development, consider sponsoring or contributing:\n\n- [Become a sponsor to Borewit](https://github.com/sponsors/Borewit)\n\n- Buy me a coffee:\n\n  <a href=\"https://www.buymeacoffee.com/borewit\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" alt=\"Buy me A coffee\" height=\"41\" width=\"174\"></a>\n\n## API Documentation\n\n### strtok3 methods\n\nUse one of the methods to instantiate an [*abstract tokenizer*](#tokenizer-object):\n- [fromBlob](#fromblob-function)\n- [fromBuffer](#frombuffer-function)\n- [fromFile](#fromfile-function)*\n- [fromStream](#fromstream-function)*\n- [fromWebStream](#fromwebstream-function)\n\n> [!NOTE]\n> `fromFile` and `fromStream`  only available when importing this module with Node.js\n\nAll methods return a [`Tokenizer`](#tokenizer-object), either directly or via a promise.\n\n#### `fromBlob()` function\n\nCreate a tokenizer from a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n\n```ts\nfunction fromBlob(blob: Blob, options?: ITokenizerOptions): BlobTokenizer\n```\n\n| Parameter | Optional  | Type                                              | Description                                                                            |\n|-----------|-----------|---------------------------------------------------|----------------------------------------------------------------------------------------|\n| blob      | no        | [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob)  | [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [File](https://developer.mozilla.org/en-US/docs/Web/API/File) to read from |\n| options   | yes       | [ITokenizerOptions](#ITokenizerOptions)           | Tokenizer options                                                                      |\n\nReturns a [*tokenizer*](#tokenizer-object).\n\n```js\nimport { fromBlob } from 'strtok3';\nimport { openAsBlob } from 'node:fs';\nimport * as Token from 'token-types';\n\nasync function parse() {\n  const blob = await openAsBlob('somefile.bin');\n\n  const tokenizer = fromBlob(blob);\n\n  const myUint8Number = await tokenizer.readToken(Token.UINT8);\n  console.log(`My number: ${myUint8Number}`);   \n}\n\nparse();\n\n```\n\n#### `fromBuffer()` function\n\nCreate a tokenizer from memory ([Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) or Node.js [Buffer](https://nodejs.org/api/buffer.html)).\n\n```ts\nfunction fromBuffer(uint8Array: Uint8Array, options?: ITokenizerOptions): BufferTokenizer\n```\n\n| Parameter  | Optional | Type                                             | Description                       |\n|------------|----------|--------------------------------------------------|-----------------------------------|\n| uint8Array | no       | [Uint8Array](https://nodejs.org/api/buffer.html) | Buffer or Uint8Array to read from |\n| options    | yes      | [ITokenizerOptions](#ITokenizerOptions)          | Tokenizer options                 |\n\nReturns a [*tokenizer*](#tokenizer-object).\n\n```js\nimport { fromBuffer } from 'strtok3';\nimport * as Token from 'token-types';\n\nconst tokenizer = fromBuffer(buffer);\n\nasync function parse() {\n  const myUint8Number = await tokenizer.readToken(Token.UINT8);\n  console.log(`My number: ${myUint8Number}`);\n}\n\nparse();\n```\n\n#### `fromFile` function\n\nCreates a [*tokenizer*](#tokenizer-object) from a local file.\n\n```ts\nfunction fromFile(sourceFilePath: string): Promise<FileTokenizer>\n```  \n\n| Parameter      | Type     | Description                |\n|----------------|----------|----------------------------|\n| sourceFilePath | `string` | Path to file to read from  |\n\n> [!NOTE]\n> - Only available for Node.js engines\n> - `fromFile` automatically embeds [file-information](#file-information)\n\nA Promise resolving to a [*tokenizer*](#tokenizer-object) which can be used to parse a file.\n\n```js\nimport { fromFile } from 'strtok3';\nimport * as Token from 'token-types';\n\nasync function parse() {\n  const tokenizer = await fromFile('somefile.bin');\n  try {\n    const myNumber = await tokenizer.readToken(Token.UINT8);\n    console.log(`My number: ${myNumber}`);\n  } finally {\n    tokenizer.close(); // Close the file\n  }\n}\n\nparse();\n\n\n```\n\n#### `fromWebStream()` function\n\nCreate a tokenizer from a [WHATWG ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream).\n\n```ts\nfunction fromWebStream(webStream: AnyWebByteStream, options?: ITokenizerOptions): ReadStreamTokenizer\n```\n\n| Parameter      | Optional | Type                                                                     | Description                        |\n|----------------|----------|--------------------------------------------------------------------------|------------------------------------|\n| webStream      | no       | [ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) | WHATWG ReadableStream to read from |\n| options        | yes      | [ITokenizerOptions](#ITokenizerOptions)                                   | Tokenizer options                  |\n\nReturns a [*tokenizer*](#tokenizer-object).\n\n```js\nimport { fromWebStream } from 'strtok3';\nimport * as Token from 'token-types';\n\nasync function parse() {\n  const tokenizer = fromWebStream(readableStream);\n  try {\n    const myUint8Number = await tokenizer.readToken(Token.UINT8);\n    console.log(`My number: ${myUint8Number}`);\n  } finally {\n    await tokenizer.close();\n  }\n}\n\nparse();\n```\n\n### `Tokenizer` object\nThe *tokenizer* is an abstraction of a [stream](https://nodejs.org/api/stream.html), file or [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), allowing _reading_ or _peeking_ from the stream.\nIt can also be translated in chunked reads, as done in [@tokenizer/http](https://github.com/Borewit/tokenizer-http);\n\n#### Key Features:\n\n- Supports seeking within the stream using `tokenizer.ignore()`.\n- Offers `peek` methods to preview data without advancing the read pointer.\n- Maintains the read position via tokenizer.position.\n\n#### Tokenizer functions\n\n_Read_ methods advance the stream pointer, while _peek_ methods do not.\n\nThere are two kind of functions:\n1. *read* methods: used to read a *token* of [Buffer](https://nodejs.org/api/buffer.html) from the [*tokenizer*](#tokenizer-object). The position of the *tokenizer-stream* will advance with the size of the token.\n2. *peek* methods: same as the read, but it will *not* advance the pointer. It allows to read (peek) ahead.\n\n#### `readBuffer` function\n\nRead data from the _tokenizer_ into provided \"buffer\" (`Uint8Array`).\n`readBuffer(buffer, options?)`\n\n```ts\nreadBuffer(buffer: Uint8Array, options?: IReadChunkOptions): Promise<number>;\n```\n\n| Parameter  | Type                                                           | Description                                                                                                                                                                                                                            |\n|------------|----------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| buffer     | [Buffer](https://nodejs.org/api/buffer.html) &#124; Uint8Array | Target buffer to write the data read to                                                                                                                                                                                                |\n| options    | [IReadChunkOptions](#ireadchunkoptions)                        | An integer specifying the number of bytes to read                                                                                                                                                                                      |\n\nReturn promise with number of bytes read.\nThe number of bytes read may be less than requested if the `mayBeLess` flag is set.\n\n#### `peekBuffer` function\n\nPeek (read ahead), from [*tokenizer*](#tokenizer-object), into the buffer without advancing the stream pointer.\n\n```ts\npeekBuffer(uint8Array: Uint8Array, options?: IReadChunkOptions): Promise<number>;\n```\n\n| Parameter  | Type                                    | Description                                         |\n|------------|-----------------------------------------|-----------------------------------------------------|\n| buffer     | Buffer &#124; Uint8Array                | Target buffer to write the data read (peeked) to.   |\n| options    | [IReadChunkOptions](#ireadchunkoptions) | An integer specifying the number of bytes to read.  |                                                                                                                           |\n\nReturn value `Promise<number>` Promise with number of bytes read. The number of bytes read may be less if the `mayBeLess` flag was set.\n\n#### `readToken` function\n\nRead a *token* from the tokenizer-stream.\n\n```ts\nreadToken<Value>(token: IGetToken<Value>, position: number = this.position): Promise<Value>\n```  \n\n| Parameter  | Type                    | Description                                                                                                           |\n|------------|-------------------------|---------------------------------------------------------------------------------------------------------------------- |\n| token      | [IGetToken](#IGetToken) | Token to read from the tokenizer-stream.                                                                              |\n| position?  | number                  | Offset where to begin reading within the file. If position is null, data will be read from the current file position. |\n\nReturn value `Promise<number>`. Promise with number of bytes read. The number of bytes read maybe if less, `mayBeLess` flag was set.\n\n#### `peek` function\n\nPeek a *token* from the [*tokenizer*](#tokenizer-object).\n\n```ts\npeekToken<Value>(token: IGetToken<Value>, position: number = this.position): Promise<Value>\n```\n\n| Parameter  | Type                       | Description                                                                                                             |\n|------------|----------------------------|-------------------------------------------------------------------------------------------------------------------------|\n| token      | [IGetToken<T>](#IGetToken) | Token to read from the tokenizer-stream.                                                                                |\n| position?  | number                     | Offset where to begin reading within the file. If position is null, data will be read from the current file position.   |\n\nReturn a promise with the token value peeked from the [*tokenizer*](#tokenizer-object).\n\n#### `readNumber` function\n\nRead a numeric [*token*](#token) from the [*tokenizer*](#tokenizer-object).\n\n```ts\nreadNumber(token: IToken<number>): Promise<number>\n```\n\n| Parameter  | Type                            | Description                                        |\n|------------|---------------------------------|----------------------------------------------------|\n| token      | [IGetToken<number>](#IGetToken) | Numeric token to read from the tokenizer-stream.   |\n\nA promise resolving to a numeric value read and decoded from the *tokenizer-stream*.\n\n#### `ignore` function\n\nAdvance the offset pointer with the token number of bytes provided.\n\n```ts\nignore(length: number): Promise<number>\n```\n\n| Parameter  | Type   | Description                                                      |\n|------------|--------|------------------------------------------------------------------|\n| length     | number | Number of bytes to ignore. Will advance the `tokenizer.position` |\n\nA promise resolving to the number of bytes ignored from the *tokenizer-stream*.\n\n#### `close` function\nClean up resources, such as closing a file pointer if applicable.\n\n#### `Tokenizer` attributes\n\n- `fileInfo`\n\n  Optional attribute describing the file information, see [IFileInfo](#IFileInfo)\n\n- `position`\n\n  Pointer to the current position in the [*tokenizer*](#tokenizer-object) stream.\n  If a *position* is provided to a _read_ or _peek_ method, is should be, at least, equal or greater than this value.\n\n### `IReadChunkOptions` interface\n\nEach attribute is optional:\n\n| Attribute | Type    | Description                                                                                                                                                                                                                   |\n|-----------|---------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| length    | number  | Requested number of bytes to read.                                                                                                                                                                                            |\n| position  | number  | Position where to peek from the file. If position is null, data will be read from the [current file position](#attribute-tokenizerposition). Position may not be less then [tokenizer.position](#attribute-tokenizerposition) |\n| mayBeLess | boolean | If and only if set, will not throw an EOF error if less than the requested `mayBeLess` could be read.                                                                                                                         |\n\nExample usage:\n```js\n  tokenizer.peekBuffer(buffer, {mayBeLess: true});\n```\n\n### `IFileInfo` interface\n\nProvides optional metadata about the file being tokenized.\n\n| Attribute | Type    | Description                                                                                       |\n|-----------|---------|---------------------------------------------------------------------------------------------------|\n| size      | number  | File size in bytes                                                                                |\n| mimeType  | string  | [MIME-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of file. |\n| path      | string  | File path                                                                                         |\n| url       | string  | File URL                                                                                          |\n\n### `Token` object\n\nThe *token* is basically a description of what to read from the [*tokenizer-stream*](#tokenizer-object).\nA basic set of *token types* can be found here: [*token-types*](https://github.com/Borewit/token-types).\n\nA token is something which implements the following interface:\n```ts\nexport interface IGetToken<T> {\n\n  /**\n   * Length in bytes of encoded value\n   */\n  len: number;\n\n  /**\n   * Decode value from buffer at offset\n   * @param buf Buffer to read the decoded value from\n   * @param off Decode offset\n   */\n  get(buf: Uint8Array, off: number): T;\n}\n```\nThe *tokenizer* reads `token.len` bytes from the *tokenizer-stream* into a Buffer.\nThe `token.get` will be called with the Buffer. `token.get` is responsible for conversion from the buffer to the desired output type.\n\n### Working with Web-API readable stream\nTo convert a [Web-API readable stream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader) into a [Node.js readable stream]((https://nodejs.org/api/stream.html#stream_readable_streams)), you can use [readable-web-to-node-stream](https://github.com/Borewit/readable-web-to-node-stream) to convert one in another.\n\n```js\nimport { fromWebStream } from 'strtok3';\nimport { ReadableWebToNodeStream } from 'readable-web-to-node-stream';\n\n(async () => {\n\n  const response = await fetch(url);\n  const readableWebStream = response.body; // Web-API readable stream\n  const webStream = new ReadableWebToNodeStream(readableWebStream); // convert to Node.js readable stream\n\n  const tokenizer = fromWebStream(webStream); // And we now have tokenizer in a web environment\n})();\n```\n\n## Dependencies\n\nDependencies:\n- [@tokenizer/token](https://github.com/Borewit/tokenizer-token): Provides token definitions and utilities used by `strtok3` for interpreting binary data.\n\n## Licence\n\nThis project is licensed under the [MIT License](LICENSE.txt). Feel free to use, modify, and distribute as needed.\n",
    "licenseText": "MIT License\n\nCopyright © 2025 Borewit\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/strtok3/-/strtok3-10.3.4.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/strtok3/-/strtok3-10.3.4.tgz",
    "hash": "",
    "integrity": "sha512-KIy5nylvC5le1OdaaoCJ07L+8iQzJHGH6pWDuzS+d07Cu7n1MZ2x26P8ZKIWfbK02+XIL8Mp4RkWeqdUCrDMfg==",
    "registry": "npm",
    "packageName": "strtok3",
    "cacheIntegrity": "sha512-KIy5nylvC5le1OdaaoCJ07L+8iQzJHGH6pWDuzS+d07Cu7n1MZ2x26P8ZKIWfbK02+XIL8Mp4RkWeqdUCrDMfg== sha1-eT69DVnfJ2oIVYYTS3OkBuYL6cE="
  },
  "registry": "npm",
  "hash": "288cb99f296f0b995ed4e75a6a8089d3b2fef22433247187ea9583bb34be774ec2bbb9f5319db1dba3fc64a2167db2b4dbe5c82fc329e119167aa7540ab0cc7e"
}