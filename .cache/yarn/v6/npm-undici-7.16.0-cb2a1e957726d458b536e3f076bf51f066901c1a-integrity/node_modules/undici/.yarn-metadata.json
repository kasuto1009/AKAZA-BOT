{
  "manifest": {
    "name": "undici",
    "version": "7.16.0",
    "description": "An HTTP/1.1 client, written from scratch for Node.js",
    "homepage": "https://undici.nodejs.org/",
    "bugs": {
      "url": "https://github.com/nodejs/undici/issues"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/nodejs/undici.git"
    },
    "license": "MIT",
    "contributors": [
      {
        "name": "Daniele Belardi",
        "url": "https://github.com/dnlup"
      },
      {
        "name": "Ethan Arrowood",
        "url": "https://github.com/ethan-arrowood"
      },
      {
        "name": "Matteo Collina",
        "url": "https://github.com/mcollina"
      },
      {
        "name": "Matthew Aitken",
        "url": "https://github.com/KhafraDev"
      },
      {
        "name": "Robert Nagy",
        "url": "https://github.com/ronag"
      },
      {
        "name": "Szymon Marczak",
        "url": "https://github.com/szmarczak"
      },
      {
        "name": "Tomas Della Vedova",
        "url": "https://github.com/delvedor"
      }
    ],
    "keywords": [
      "fetch",
      "http",
      "https",
      "promise",
      "request",
      "curl",
      "wget",
      "xhr",
      "whatwg"
    ],
    "main": "index.js",
    "types": "index.d.ts",
    "scripts": {
      "build:node": "esbuild index-fetch.js --bundle --platform=node --outfile=undici-fetch.js --define:esbuildDetection=1 --keep-names && node scripts/strip-comments.js",
      "build:wasm": "node build/wasm.js --docker",
      "generate-pem": "node scripts/generate-pem.js",
      "lint": "eslint --cache",
      "lint:fix": "eslint --fix --cache",
      "test": "npm run test:javascript && cross-env NODE_V8_COVERAGE= npm run test:typescript",
      "test:javascript": "npm run test:javascript:no-jest && npm run test:jest",
      "test:javascript:no-jest": "npm run generate-pem && npm run test:unit && npm run test:fetch && npm run test:node-fetch && npm run test:cache && npm run test:cache-interceptor && npm run test:interceptors && npm run test:cookies && npm run test:eventsource && npm run test:subresource-integrity && npm run test:wpt && npm run test:websocket && npm run test:node-test && npm run test:cache-tests",
      "test:javascript:without-intl": "npm run test:javascript:no-jest",
      "test:busboy": "borp -p \"test/busboy/*.js\"",
      "test:cache": "borp -p \"test/cache/*.js\"",
      "test:sqlite": "cross-env NODE_OPTIONS=--experimental-sqlite borp -p \"test/cache-interceptor/*.js\"",
      "test:cache-interceptor": "borp -p \"test/cache-interceptor/*.js\"",
      "test:cookies": "borp -p \"test/cookie/*.js\"",
      "test:eventsource": "npm run build:node && borp --expose-gc -p \"test/eventsource/*.js\"",
      "test:fuzzing": "node test/fuzzing/fuzzing.test.js",
      "test:fetch": "npm run build:node && borp --timeout 180000 --expose-gc --concurrency 1 -p \"test/fetch/*.js\" && npm run test:webidl && npm run test:busboy",
      "test:subresource-integrity": "borp -p \"test/subresource-integrity/*.js\"",
      "test:h2": "npm run test:h2:core && npm run test:h2:fetch",
      "test:h2:core": "borp -p \"test/+(http2|h2)*.js\"",
      "test:h2:fetch": "npm run build:node && borp -p \"test/fetch/http2*.js\"",
      "test:interceptors": "borp -p \"test/interceptors/*.js\"",
      "test:jest": "cross-env NODE_V8_COVERAGE= jest",
      "test:unit": "borp --expose-gc -p \"test/*.js\"",
      "test:node-fetch": "borp -p \"test/node-fetch/**/*.js\"",
      "test:node-test": "borp -p \"test/node-test/**/*.js\"",
      "test:tdd": "borp --expose-gc -p \"test/*.js\"",
      "test:tdd:node-test": "borp -p \"test/node-test/**/*.js\" -w",
      "test:typescript": "tsd && tsc test/imports/undici-import.ts --typeRoots ./types --noEmit && tsc ./types/*.d.ts --noEmit --typeRoots ./types",
      "test:webidl": "borp -p \"test/webidl/*.js\"",
      "test:websocket": "borp -p \"test/websocket/**/*.js\"",
      "test:websocket:autobahn": "node test/autobahn/client.js",
      "test:websocket:autobahn:report": "node test/autobahn/report.js",
      "test:wpt:setup": "node test/web-platform-tests/wpt-runner.mjs setup",
      "test:wpt": "npm run test:wpt:setup && node test/web-platform-tests/wpt-runner.mjs run /fetch /mimesniff /xhr /websockets /serviceWorkers /eventsource",
      "test:cache-tests": "node test/cache-interceptor/cache-tests.mjs --ci",
      "coverage": "npm run coverage:clean && cross-env NODE_V8_COVERAGE=./coverage/tmp npm run test:javascript && npm run coverage:report",
      "coverage:ci": "npm run coverage:clean && cross-env NODE_V8_COVERAGE=./coverage/tmp npm run test:javascript && npm run coverage:report:ci",
      "coverage:clean": "node ./scripts/clean-coverage.js",
      "coverage:report": "cross-env NODE_V8_COVERAGE= c8 report",
      "coverage:report:ci": "c8 report",
      "bench": "echo \"Error: Benchmarks have been moved to '/benchmarks'\" && exit 1",
      "serve:website": "echo \"Error: Documentation has been moved to '/docs'\" && exit 1",
      "prepare": "husky && node ./scripts/platform-shell.js"
    },
    "devDependencies": {
      "@fastify/busboy": "3.2.0",
      "@matteo.collina/tspl": "^0.2.0",
      "@metcoder95/https-pem": "^1.0.0",
      "@sinonjs/fake-timers": "^12.0.0",
      "@types/node": "^18.19.50",
      "abort-controller": "^3.0.0",
      "borp": "^0.20.0",
      "c8": "^10.0.0",
      "cross-env": "^10.0.0",
      "dns-packet": "^5.4.0",
      "esbuild": "^0.25.2",
      "eslint": "^9.9.0",
      "fast-check": "^4.1.1",
      "husky": "^9.0.7",
      "jest": "^30.0.5",
      "jsondiffpatch": "^0.7.3",
      "neostandard": "^0.12.0",
      "node-forge": "^1.3.1",
      "proxy": "^2.1.1",
      "tsd": "^0.33.0",
      "typescript": "^5.6.2",
      "ws": "^8.11.0"
    },
    "engines": {
      "node": ">=20.18.1"
    },
    "tsd": {
      "directory": "test/types",
      "compilerOptions": {
        "esModuleInterop": true,
        "lib": [
          "esnext"
        ]
      }
    },
    "jest": {
      "testMatch": [
        "<rootDir>/test/jest/**"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-undici-7.16.0-cb2a1e957726d458b536e3f076bf51f066901c1a-integrity/node_modules/undici/package.json",
    "readmeFilename": "README.md",
    "readme": "# undici\n\n[![Node CI](https://github.com/nodejs/undici/actions/workflows/ci.yml/badge.svg)](https://github.com/nodejs/undici/actions/workflows/nodejs.yml) [![neostandard javascript style](https://img.shields.io/badge/neo-standard-7fffff?style=flat\\&labelColor=ff80ff)](https://github.com/neostandard/neostandard) [![npm version](https://badge.fury.io/js/undici.svg)](https://badge.fury.io/js/undici) [![codecov](https://codecov.io/gh/nodejs/undici/branch/main/graph/badge.svg?token=yZL6LtXkOA)](https://codecov.io/gh/nodejs/undici)\n\nAn HTTP/1.1 client, written from scratch for Node.js.\n\n> Undici means eleven in Italian. 1.1 -> 11 -> Eleven -> Undici.\nIt is also a Stranger Things reference.\n\n## How to get involved\n\nHave a question about using Undici? Open a [Q&A Discussion](https://github.com/nodejs/undici/discussions/new) or join our official OpenJS [Slack](https://openjs-foundation.slack.com/archives/C01QF9Q31QD) channel.\n\nLooking to contribute? Start by reading the [contributing guide](./CONTRIBUTING.md)\n\n## Install\n\n```\nnpm i undici\n```\n\n## Benchmarks\n\nThe benchmark is a simple getting data [example](https://github.com/nodejs/undici/blob/main/benchmarks/benchmark.js) using a\n50 TCP connections with a pipelining depth of 10 running on Node 22.11.0.\n\n```\n┌────────────────────────┬─────────┬────────────────────┬────────────┬─────────────────────────┐\n│  Tests                 │ Samples │ Result             │ Tolerance  │ Difference with slowest │\n├────────────────────────┼─────────┼────────────────────┼────────────┼─────────────────────────┤\n│  'axios'               │ 15      │ '5708.26 req/sec'  │ '± 2.91 %' │ '-'                     │\n│  'http - no keepalive' │ 10      │ '5809.80 req/sec'  │ '± 2.30 %' │ '+ 1.78 %'              │\n│  'request'             │ 30      │ '5828.80 req/sec'  │ '± 2.91 %' │ '+ 2.11 %'              │\n│  'undici - fetch'      │ 40      │ '5903.78 req/sec'  │ '± 2.87 %' │ '+ 3.43 %'              │\n│  'node-fetch'          │ 10      │ '5945.40 req/sec'  │ '± 2.13 %' │ '+ 4.15 %'              │\n│  'got'                 │ 35      │ '6511.45 req/sec'  │ '± 2.84 %' │ '+ 14.07 %'             │\n│  'http - keepalive'    │ 65      │ '9193.24 req/sec'  │ '± 2.92 %' │ '+ 61.05 %'             │\n│  'superagent'          │ 35      │ '9339.43 req/sec'  │ '± 2.95 %' │ '+ 63.61 %'             │\n│  'undici - pipeline'   │ 50      │ '13364.62 req/sec' │ '± 2.93 %' │ '+ 134.13 %'            │\n│  'undici - stream'     │ 95      │ '18245.36 req/sec' │ '± 2.99 %' │ '+ 219.63 %'            │\n│  'undici - request'    │ 50      │ '18340.17 req/sec' │ '± 2.84 %' │ '+ 221.29 %'            │\n│  'undici - dispatch'   │ 40      │ '22234.42 req/sec' │ '± 2.94 %' │ '+ 289.51 %'            │\n└────────────────────────┴─────────┴────────────────────┴────────────┴─────────────────────────┘\n```\n\n## Undici vs. Fetch\n\n### Overview\n\nNode.js includes a built-in `fetch()` implementation powered by undici starting from Node.js v18. However, there are important differences between using the built-in fetch and installing undici as a separate module.\n\n### Built-in Fetch (Node.js v18+)\n\nNode.js's built-in fetch is powered by a bundled version of undici:\n\n```js\n// Available globally in Node.js v18+\nconst response = await fetch('https://api.example.com/data');\nconst data = await response.json();\n\n// Check the bundled undici version\nconsole.log(process.versions.undici); // e.g., \"5.28.4\"\n```\n\n**Pros:**\n- No additional dependencies required\n- Works across different JavaScript runtimes\n- Automatic compression handling (gzip, deflate, br)\n- Built-in caching support (in development)\n\n**Cons:**\n- Limited to the undici version bundled with your Node.js version\n- Less control over connection pooling and advanced features\n- Error handling follows Web API standards (errors wrapped in `TypeError`)\n- Performance overhead due to Web Streams implementation\n\n### Undici Module\n\nInstalling undici as a separate module gives you access to the latest features and APIs:\n\n```bash\nnpm install undici\n```\n\n```js\nimport { request, fetch, Agent, setGlobalDispatcher } from 'undici';\n\n// Use undici.request for maximum performance\nconst { statusCode, headers, body } = await request('https://api.example.com/data');\nconst data = await body.json();\n\n// Or use undici.fetch with custom configuration\nconst agent = new Agent({ keepAliveTimeout: 10000 });\nsetGlobalDispatcher(agent);\nconst response = await fetch('https://api.example.com/data');\n```\n\n**Pros:**\n- Latest undici features and bug fixes\n- Access to advanced APIs (`request`, `stream`, `pipeline`)\n- Fine-grained control over connection pooling\n- Better error handling with clearer error messages\n- Superior performance, especially with `undici.request`\n- HTTP/1.1 pipelining support\n- Custom interceptors and middleware\n- Advanced features like `ProxyAgent`, `MockAgent`\n\n**Cons:**\n- Additional dependency to manage\n- Larger bundle size\n\n### When to Use Each\n\n#### Use Built-in Fetch When:\n- You want zero dependencies\n- Building isomorphic code that runs in browsers and Node.js\n- Publishing to npm and want to maximize compatibility with JS runtimes\n- Simple HTTP requests without advanced configuration\n- You're publishing to npm and you want to maximize compatiblity\n- You don't depend on features from a specific version of undici\n\n#### Use Undici Module When:\n- You need the latest undici features and performance improvements\n- You require advanced connection pooling configuration\n- You need APIs not available in the built-in fetch (`ProxyAgent`, `MockAgent`, etc.)\n- Performance is critical (use `undici.request` for maximum speed)\n- You want better error handling and debugging capabilities\n- You need HTTP/1.1 pipelining or advanced interceptors\n- You prefer decoupled protocol and API interfaces\n\n### Performance Comparison\n\nBased on benchmarks, here's the typical performance hierarchy:\n\n1. **`undici.request()`** - Fastest, most efficient\n2. **`undici.fetch()`** - Good performance, standard compliance\n3. **Node.js `http`/`https`** - Baseline performance\n\n### Migration Guide\n\nIf you're currently using built-in fetch and want to migrate to undici:\n\n```js\n// Before: Built-in fetch\nconst response = await fetch('https://api.example.com/data');\n\n// After: Undici fetch (drop-in replacement)\nimport { fetch } from 'undici';\nconst response = await fetch('https://api.example.com/data');\n\n// Or: Undici request (better performance)\nimport { request } from 'undici';\nconst { statusCode, body } = await request('https://api.example.com/data');\nconst data = await body.json();\n```\n\n### Version Compatibility\n\nYou can check which version of undici is bundled with your Node.js version:\n\n```js\nconsole.log(process.versions.undici);\n```\n\nInstalling undici as a module allows you to use a newer version than what's bundled with Node.js, giving you access to the latest features and performance improvements.\n\n## Quick Start\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\n\nfor await (const data of body) { console.log('data', data) }\n\nconsole.log('trailers', trailers)\n```\n\n## Global Installation\n\nUndici provides an `install()` function to add all WHATWG fetch classes to `globalThis`, making them available globally:\n\n```js\nimport { install } from 'undici'\n\n// Install all WHATWG fetch classes globally\ninstall()\n\n// Now you can use fetch classes globally without importing\nconst response = await fetch('https://api.example.com/data')\nconst data = await response.json()\n\n// All classes are available globally:\nconst headers = new Headers([['content-type', 'application/json']])\nconst request = new Request('https://example.com')\nconst formData = new FormData()\nconst ws = new WebSocket('wss://example.com')\nconst eventSource = new EventSource('https://example.com/events')\n```\n\nThe `install()` function adds the following classes to `globalThis`:\n\n- `fetch` - The fetch function\n- `Headers` - HTTP headers management\n- `Response` - HTTP response representation\n- `Request` - HTTP request representation\n- `FormData` - Form data handling\n- `WebSocket` - WebSocket client\n- `CloseEvent`, `ErrorEvent`, `MessageEvent` - WebSocket events\n- `EventSource` - Server-sent events client\n\nThis is useful for:\n- Polyfilling environments that don't have fetch\n- Ensuring consistent fetch behavior across different Node.js versions\n- Making undici's implementations available globally for libraries that expect them\n\n## Body Mixins\n\nThe `body` mixins are the most common way to format the request/response body. Mixins include:\n\n- [`.arrayBuffer()`](https://fetch.spec.whatwg.org/#dom-body-arraybuffer)\n- [`.blob()`](https://fetch.spec.whatwg.org/#dom-body-blob)\n- [`.bytes()`](https://fetch.spec.whatwg.org/#dom-body-bytes)\n- [`.json()`](https://fetch.spec.whatwg.org/#dom-body-json)\n- [`.text()`](https://fetch.spec.whatwg.org/#dom-body-text)\n\n> [!NOTE]\n> The body returned from `undici.request` does not implement `.formData()`.\n\nExample usage:\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\nconsole.log('data', await body.json())\nconsole.log('trailers', trailers)\n```\n\n_Note: Once a mixin has been called then the body cannot be reused, thus calling additional mixins on `.body`, e.g. `.body.json(); .body.text()` will result in an error `TypeError: unusable` being thrown and returned through the `Promise` rejection._\n\nShould you need to access the `body` in plain-text after using a mixin, the best practice is to use the `.text()` mixin first and then manually parse the text to the desired format.\n\nFor more information about their behavior, please reference the body mixin from the [Fetch Standard](https://fetch.spec.whatwg.org/#body-mixin).\n\n## Common API Methods\n\nThis section documents our most commonly used API methods. Additional APIs are documented in their own files within the [docs](./docs/) folder and are accessible via the navigation list on the left side of the docs site.\n\n### `undici.request([url, options]): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`RequestOptions`](./docs/docs/api/Dispatcher.md#parameter-requestoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n\nReturns a promise with the result of the `Dispatcher.request` method.\n\nCalls `options.dispatcher.request(options)`.\n\nSee [Dispatcher.request](./docs/docs/api/Dispatcher.md#dispatcherrequestoptions-callback) for more details, and [request examples](./docs/examples/README.md) for examples.\n\n### `undici.stream([url, options, ]factory): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`StreamOptions`](./docs/docs/api/Dispatcher.md#parameter-streamoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n* **factory** `Dispatcher.stream.factory`\n\nReturns a promise with the result of the `Dispatcher.stream` method.\n\nCalls `options.dispatcher.stream(options, factory)`.\n\nSee [Dispatcher.stream](./docs/docs/api/Dispatcher.md#dispatcherstreamoptions-factory-callback) for more details.\n\n### `undici.pipeline([url, options, ]handler): Duplex`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`PipelineOptions`](./docs/docs/api/Dispatcher.md#parameter-pipelineoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n* **handler** `Dispatcher.pipeline.handler`\n\nReturns: `stream.Duplex`\n\nCalls `options.dispatch.pipeline(options, handler)`.\n\nSee [Dispatcher.pipeline](./docs/docs/api/Dispatcher.md#dispatcherpipelineoptions-handler) for more details.\n\n### `undici.connect([url, options]): Promise`\n\nStarts two-way communications with the requested resource using [HTTP CONNECT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT).\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`ConnectOptions`](./docs/docs/api/Dispatcher.md#parameter-connectoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n* **callback** `(err: Error | null, data: ConnectData | null) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.connect` method.\n\nCalls `options.dispatch.connect(options)`.\n\nSee [Dispatcher.connect](./docs/docs/api/Dispatcher.md#dispatcherconnectoptions-callback) for more details.\n\n### `undici.fetch(input[, init]): Promise`\n\nImplements [fetch](https://fetch.spec.whatwg.org/#fetch-method).\n\n* https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n* https://fetch.spec.whatwg.org/#fetch-method\n\nBasic usage example:\n\n```js\nimport { fetch } from 'undici'\n\n\nconst res = await fetch('https://example.com')\nconst json = await res.json()\nconsole.log(json)\n```\n\nYou can pass an optional dispatcher to `fetch` as:\n\n```js\nimport { fetch, Agent } from 'undici'\n\nconst res = await fetch('https://example.com', {\n  // Mocks are also supported\n  dispatcher: new Agent({\n    keepAliveTimeout: 10,\n    keepAliveMaxTimeout: 10\n  })\n})\nconst json = await res.json()\nconsole.log(json)\n```\n\n#### `request.body`\n\nA body can be of the following types:\n\n- ArrayBuffer\n- ArrayBufferView\n- AsyncIterables\n- Blob\n- Iterables\n- String\n- URLSearchParams\n- FormData\n\nIn this implementation of fetch, ```request.body``` now accepts ```Async Iterables```. It is not present in the [Fetch Standard](https://fetch.spec.whatwg.org).\n\n```js\nimport { fetch } from 'undici'\n\nconst data = {\n  async *[Symbol.asyncIterator]() {\n    yield 'hello'\n    yield 'world'\n  },\n}\n\nawait fetch('https://example.com', { body: data, method: 'POST', duplex: 'half' })\n```\n\n[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) besides text data and buffers can also utilize streams via [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects:\n\n```js\nimport { openAsBlob } from 'node:fs'\n\nconst file = await openAsBlob('./big.csv')\nconst body = new FormData()\nbody.set('file', file, 'big.csv')\n\nawait fetch('http://example.com', { method: 'POST', body })\n```\n\n#### `request.duplex`\n\n- `'half'`\n\nIn this implementation of fetch, `request.duplex` must be set if `request.body` is `ReadableStream` or `Async Iterables`, however, even though the value must be set to `'half'`, it is actually a _full_ duplex. For more detail refer to the [Fetch Standard](https://fetch.spec.whatwg.org/#dom-requestinit-duplex).\n\n#### `response.body`\n\nNodejs has two kinds of streams: [web streams](https://nodejs.org/api/webstreams.html), which follow the API of the WHATWG web standard found in browsers, and an older Node-specific [streams API](https://nodejs.org/api/stream.html). `response.body` returns a readable web stream. If you would prefer to work with a Node stream you can convert a web stream using `.fromWeb()`.\n\n```js\nimport { fetch } from 'undici'\nimport { Readable } from 'node:stream'\n\nconst response = await fetch('https://example.com')\nconst readableWebStream = response.body\nconst readableNodeStream = Readable.fromWeb(readableWebStream)\n```\n\n## Specification Compliance\n\nThis section documents parts of the [HTTP/1.1](https://www.rfc-editor.org/rfc/rfc9110.html) and [Fetch Standard](https://fetch.spec.whatwg.org) that Undici does\nnot support or does not fully implement.\n\n#### CORS\n\nUnlike browsers, Undici does not implement CORS (Cross-Origin Resource Sharing) checks by default. This means:\n\n- No preflight requests are automatically sent for cross-origin requests\n- No validation of `Access-Control-Allow-Origin` headers is performed\n- Requests to any origin are allowed regardless of the source\n\nThis behavior is intentional for server-side environments where CORS restrictions are typically unnecessary. If your application requires CORS-like protections, you will need to implement these checks manually.\n\n#### Garbage Collection\n\n* https://fetch.spec.whatwg.org/#garbage-collection\n\nThe [Fetch Standard](https://fetch.spec.whatwg.org) allows users to skip consuming the response body by relying on\n[garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#garbage_collection) to release connection resources.\n\nGarbage collection in Node is less aggressive and deterministic\n(due to the lack of clear idle periods that browsers have through the rendering refresh rate)\nwhich means that leaving the release of connection resources to the garbage collector can lead\nto excessive connection usage, reduced performance (due to less connection re-use), and even\nstalls or deadlocks when running out of connections.\nTherefore, __it is important to always either consume or cancel the response body anyway__.\n\n```js\n// Do\nconst { body, headers } = await fetch(url);\nfor await (const chunk of body) {\n  // force consumption of body\n}\n\n// Do not\nconst { headers } = await fetch(url);\n```\n\nHowever, if you want to get only headers, it might be better to use `HEAD` request method. Usage of this method will obviate the need for consumption or cancelling of the response body. See [MDN - HTTP - HTTP request methods - HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) for more details.\n\n```js\nconst headers = await fetch(url, { method: 'HEAD' })\n  .then(res => res.headers)\n```\n\nNote that consuming the response body is _mandatory_ for `request`:\n\n```js\n// Do\nconst { body, headers } = await request(url);\nawait res.body.dump(); // force consumption of body\n\n// Do not\nconst { headers } = await request(url);\n```\n\n#### Forbidden and Safelisted Header Names\n\n* https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name\n* https://fetch.spec.whatwg.org/#forbidden-header-name\n* https://fetch.spec.whatwg.org/#forbidden-response-header-name\n* https://github.com/wintercg/fetch/issues/6\n\nThe [Fetch Standard](https://fetch.spec.whatwg.org) requires implementations to exclude certain headers from requests and responses. In browser environments, some headers are forbidden so the user agent remains in full control over them. In Undici, these constraints are removed to give more control to the user.\n\n#### `undici.upgrade([url, options]): Promise`\n\nUpgrade to a different protocol. See [MDN - HTTP - Protocol upgrade mechanism](https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism) for more details.\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`UpgradeOptions`](./docs/docs/api/Dispatcher.md#parameter-upgradeoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n* **callback** `(error: Error | null, data: UpgradeData) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.upgrade` method.\n\nCalls `options.dispatcher.upgrade(options)`.\n\nSee [Dispatcher.upgrade](./docs/docs/api/Dispatcher.md#dispatcherupgradeoptions-callback) for more details.\n\n### `undici.setGlobalDispatcher(dispatcher)`\n\n* dispatcher `Dispatcher`\n\nSets the global dispatcher used by Common API Methods. Global dispatcher is shared among compatible undici modules,\nincluding undici that is bundled internally with node.js.\n\n### `undici.getGlobalDispatcher()`\n\nGets the global dispatcher used by Common API Methods.\n\nReturns: `Dispatcher`\n\n### `undici.setGlobalOrigin(origin)`\n\n* origin `string | URL | undefined`\n\nSets the global origin used in `fetch`.\n\nIf `undefined` is passed, the global origin will be reset. This will cause `Response.redirect`, `new Request()`, and `fetch` to throw an error when a relative path is passed.\n\n```js\nsetGlobalOrigin('http://localhost:3000')\n\nconst response = await fetch('/api/ping')\n\nconsole.log(response.url) // http://localhost:3000/api/ping\n```\n\n### `undici.getGlobalOrigin()`\n\nGets the global origin used in `fetch`.\n\nReturns: `URL`\n\n### `UrlObject`\n\n* **port** `string | number` (optional)\n* **path** `string` (optional)\n* **pathname** `string` (optional)\n* **hostname** `string` (optional)\n* **origin** `string` (optional)\n* **protocol** `string` (optional)\n* **search** `string` (optional)\n\n#### Expect\n\nUndici does not support the `Expect` request header field. The request\nbody is  always immediately sent and the `100 Continue` response will be\nignored.\n\nRefs: https://tools.ietf.org/html/rfc7231#section-5.1.1\n\n#### Pipelining\n\nUndici will only use pipelining if configured with a `pipelining` factor\ngreater than `1`. Also it is important to pass `blocking: false` to the\nrequest options to properly pipeline requests.\n\nUndici always assumes that connections are persistent and will immediately\npipeline requests, without checking whether the connection is persistent.\nHence, automatic fallback to HTTP/1.0 or HTTP/1.1 without pipelining is\nnot supported.\n\nUndici will immediately pipeline when retrying requests after a failed\nconnection. However, Undici will not retry the first remaining requests in\nthe prior pipeline and instead error the corresponding callback/promise/stream.\n\nUndici will abort all running requests in the pipeline when any of them are\naborted.\n\n* Refs: https://tools.ietf.org/html/rfc2616#section-8.1.2.2\n* Refs: https://tools.ietf.org/html/rfc7230#section-6.3.2\n\n#### Manual Redirect\n\nSince it is not possible to manually follow an HTTP redirect on the server-side,\nUndici returns the actual response instead of an `opaqueredirect` filtered one\nwhen invoked with a `manual` redirect. This aligns `fetch()` with the other\nimplementations in Deno and Cloudflare Workers.\n\nRefs: https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n\n### Workarounds\n\n#### Network address family autoselection.\n\nIf you experience problem when connecting to a remote server that is resolved by your DNS servers to a IPv6 (AAAA record)\nfirst, there are chances that your local router or ISP might have problem connecting to IPv6 networks. In that case\nundici will throw an error with code `UND_ERR_CONNECT_TIMEOUT`.\n\nIf the target server resolves to both a IPv6 and IPv4 (A records) address and you are using a compatible Node version\n(18.3.0 and above), you can fix the problem by providing the `autoSelectFamily` option (support by both `undici.request`\nand `undici.Agent`) which will enable the family autoselection algorithm when establishing the connection.\n\n## Collaborators\n\n* [__Daniele Belardi__](https://github.com/dnlup), <https://www.npmjs.com/~dnlup>\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Matthew Aitken__](https://github.com/KhafraDev), <https://www.npmjs.com/~khaf>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n* [__Szymon Marczak__](https://github.com/szmarczak), <https://www.npmjs.com/~szmarczak>\n\n## Past Collaborators\n* [__Tomas Della Vedova__](https://github.com/delvedor), <https://www.npmjs.com/~delvedor>\n\n### Releasers\n\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n* [__Matthew Aitken__](https://github.com/KhafraDev), <https://www.npmjs.com/~khaf>\n\n## Long Term Support\n\nUndici aligns with the Node.js LTS schedule. The following table shows the supported versions:\n\n| Undici Version | Bundled in Node.js | Node.js Versions Supported | End of Life |\n|----------------|-------------------|----------------------------|-------------|\n| 5.x           | 18.x              | ≥14.0 (tested: 14, 16, 18) | 2024-04-30  |\n| 6.x           | 20.x, 22.x       | ≥18.17 (tested: 18, 20, 21, 22) | 2026-04-30  |\n| 7.x           | 24.x              | ≥20.18.1 (tested: 20, 22, 24) | 2027-04-30  |\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) Matteo Collina and Undici contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/undici/-/undici-7.16.0.tgz#cb2a1e957726d458b536e3f076bf51f066901c1a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/undici/-/undici-7.16.0.tgz",
    "hash": "cb2a1e957726d458b536e3f076bf51f066901c1a",
    "integrity": "sha512-QEg3HPMll0o3t2ourKwOeUAZ159Kn9mx5pnzHRQO8+Wixmh88YdZRiIwat0iNzNNXn0yoEtXJqFpyW7eM8BV7g==",
    "registry": "npm",
    "packageName": "undici",
    "cacheIntegrity": "sha512-QEg3HPMll0o3t2ourKwOeUAZ159Kn9mx5pnzHRQO8+Wixmh88YdZRiIwat0iNzNNXn0yoEtXJqFpyW7eM8BV7g== sha1-yyoelXcm1Fi1NuPwdr9R8GaQHBo="
  },
  "registry": "npm",
  "hash": "cb2a1e957726d458b536e3f076bf51f066901c1a"
}