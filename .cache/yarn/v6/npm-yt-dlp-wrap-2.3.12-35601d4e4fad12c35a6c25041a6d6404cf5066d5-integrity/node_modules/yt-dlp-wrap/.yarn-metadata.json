{
  "manifest": {
    "name": "yt-dlp-wrap",
    "version": "2.3.12",
    "description": "A simple node.js wrapper for yt-dlp.",
    "files": [
      "dist"
    ],
    "main": "dist/index.js",
    "scripts": {
      "prepare": "tsc",
      "build": "tsc",
      "test": "mocha --require ts-node/register --timeout 300000 test/**/*.test.ts",
      "testDebug": "mocha --require ts-node/register --inspect-brk --timeout 300000 test/**/*.test.ts"
    },
    "author": {
      "name": "foxes do code"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/foxesdocode/yt-dlp-wrap.git"
    },
    "keywords": [
      "youtube-dl",
      "youtube-dl-wrapper",
      "youtube-downloader",
      "nodejs",
      "yt-dlp",
      "yt-dlp-wrapper"
    ],
    "license": "MIT",
    "devDependencies": {
      "@types/mocha": "9.1.0",
      "@types/node": "17.0.10",
      "mocha": "9.2.0",
      "ts-node": "10.4.0",
      "typescript": "4.5.4"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-yt-dlp-wrap-2.3.12-35601d4e4fad12c35a6c25041a6d6404cf5066d5-integrity/node_modules/yt-dlp-wrap/package.json",
    "readmeFilename": "README.md",
    "readme": "# yt-dlp-wrap\n\nThis is a fork of the great lib [youtube-dl-wrap](https://github.com/ghjbnm/youtube-dl-wrap) (written by [ghjbnm](https://github.com/ghjbnm)) rewritten in TypeScript.\n\n![](https://github.com/foxesdocode/yt-dlp-wrap/workflows/CI%20tests/badge.svg)\n<a href=\"https://npmjs.org/package/yt-dlp-wrap\" title=\"View this project on NPM\"><img src=\"https://img.shields.io/npm/v/yt-dlp-wrap.svg\" alt=\"NPM version\" /></a>\n\nA simple node.js wrapper for [yt-dlp](https://github.com/yt-dlp/yt-dlp).\n\n-   0 dependencies\n-   EventEmitter, Promise and Stream interface\n-   Progress events\n-   Utility functions\n-   Typescript Support\n\n## Installation\n\nYou can install yt-dlp-wrap via npm (`npm i yt-dlp-wrap`).  \nYT-dlp itself will not be automatically downloaded.  \nProvide it yourself or use some of the following functions to download the binary.\n\nTypescript (only import differs)\n\n```typescript\nimport YTDlpWrap from 'yt-dlp-wrap';\n```\n\nJavascript\n\n```javascript\nconst YTDlpWrap = require('yt-dlp-wrap').default;\n\n//Get the data from the github releases API. In this case get page 1 with a maximum of 5 items.\nlet githubReleasesData = await YTDlpWrap.getGithubReleases(1, 5);\n\n//Download the yt-dlp binary for the given version and platform to the provided path.\n//By default the latest version will be downloaded to \"./yt-dlp\" and platform = os.platform().\nawait YTDlpWrap.downloadFromGithub(\n    'path/to/yt-dlp/binary',\n    '2020.06.16.1',\n    'win32'\n);\n\n//Init an instance with a given binary path.\n//If none is provided \"yt-dlp\" will be used as command.\nconst ytDlpWrap = new YTDlpWrap('path/to/yt-dlp/binary');\n//The binary path can also be changed later on.\nytDlpWrap.setBinaryPath('path/to/another/yt-dlp/binary');\n```\n\n## Usage\n\n### EventEmitter\n\nExcecute yt-dlp and returns an [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter).  \nThe `ytDlpEvent` event will expose all yt-dlp events, for example:  \nThe log message `[download] Destination: output.mp4` will emit the event type `download` and the event data `Destination: output.mp4`.  \n`ytDlpEmitter.ytDlpProcess` exposes the spawned yt-dlp process.\n\n```javascript\nconst YTDlpWrap = require('yt-dlp-wrap').default;\nconst ytDlpWrap = new YTDlpWrap('path/to/yt-dlp/binary');\n\nlet ytDlpEventEmitter = ytDlpWrap\n    .exec([\n        'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n        '-f',\n        'best',\n        '-o',\n        'output.mp4',\n    ])\n    .on('progress', (progress) =>\n        console.log(\n            progress.percent,\n            progress.totalSize,\n            progress.currentSpeed,\n            progress.eta\n        )\n    )\n    .on('ytDlpEvent', (eventType, eventData) =>\n        console.log(eventType, eventData)\n    )\n    .on('error', (error) => console.error(error))\n    .on('close', () => console.log('all done'));\n\nconsole.log(ytDlpEventEmitter.ytDlpProcess.pid);\n```\n\n### Readable Stream\n\nExcecute yt-dlp and returns an [Readable Stream](https://nodejs.org/api/stream.html#stream_class_stream_readable).  \nThe interface works just like the [EventEmitter](#EventEmitter).\n\n```javascript\nlet readableStream = ytDlpWrap.execStream([\n    'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n    '-f',\n    'best[ext=mp4]',\n]);\nreadableStream.pipe(fs.createWriteStream('test.mp4'));\n```\n\n### Promise\n\nExcecute yt-dlp and returns an [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```javascript\nlet stdout = await ytDlpWrap.execPromise([\n    'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n    '-f',\n    'best',\n    '-o',\n    'output.mp4',\n]);\nconsole.log(stdout);\n```\n\n### Options and Cancellation\n\nAdditionally you can set the options of the spawned process and abort the process.  \nThe abortion of the spawned process is handled by passing the signal of an [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\n```javascript\nlet controller = new AbortController();\nlet ytDlpEventEmitter = ytDlpWrap.exec(\n    [\n        'https://www.youtube.com/watch?v=aqz-KE-bpKQ',\n        '-f',\n        'best',\n        '-o',\n        'output.mp4',\n    ],\n    { shell: true, detached: true },\n    controller.signal\n);\n\nsetTimeout(() => {\n    controller.abort();\n    console.log(ytDlpEventEmitter.ytDlpProcess.killed);\n}, 500);\n```\n\n### Metadata\n\nReturns the yt-dlp `--dump-json` metadata as an object.\n\n```javascript\nlet metadata = await ytDlpWrap.getVideoInfo(\n    'https://www.youtube.com/watch?v=aqz-KE-bpKQ'\n);\nconsole.log(metadata.title);\n```\n\n### Utility functions\n\nJust a few utility functions to get informations.\n\n```javascript\nlet version = await ytDlpWrap.getVersion();\nlet userAgent = await ytDlpWrap.getUserAgent();\nlet help = await ytDlpWrap.getHelp();\nlet extractors = await ytDlpWrap.getExtractors();\nlet extractorDescriptions = await ytDlpWrap.getExtractorDescriptions();\n```\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020 ghjbnm, foxesdocode\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/yt-dlp-wrap/-/yt-dlp-wrap-2.3.12.tgz#35601d4e4fad12c35a6c25041a6d6404cf5066d5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/yt-dlp-wrap/-/yt-dlp-wrap-2.3.12.tgz",
    "hash": "35601d4e4fad12c35a6c25041a6d6404cf5066d5",
    "integrity": "sha512-P8fJ+6M1YjukyJENCTviNLiZ8mokxprR54ho3DsSKPWDcac489OjRiStGEARJr6un6ETS6goTn4CWl/b/rM3aA==",
    "registry": "npm",
    "packageName": "yt-dlp-wrap",
    "cacheIntegrity": "sha512-P8fJ+6M1YjukyJENCTviNLiZ8mokxprR54ho3DsSKPWDcac489OjRiStGEARJr6un6ETS6goTn4CWl/b/rM3aA== sha1-NWAdTk+tEsNabCUEGm1kBM9QZtU="
  },
  "registry": "npm",
  "hash": "35601d4e4fad12c35a6c25041a6d6404cf5066d5"
}