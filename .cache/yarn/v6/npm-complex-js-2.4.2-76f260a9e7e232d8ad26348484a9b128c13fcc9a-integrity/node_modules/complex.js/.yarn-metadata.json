{
  "manifest": {
    "name": "complex.js",
    "title": "Complex.js",
    "version": "2.4.2",
    "homepage": "https://raw.org/article/complex-numbers-in-javascript/",
    "bugs": {
      "url": "https://github.com/rawify/Complex.js/issues"
    },
    "description": "A complex numbers library",
    "keywords": [
      "complex numbers",
      "math",
      "complex",
      "number",
      "calculus",
      "parser",
      "arithmetic"
    ],
    "private": false,
    "main": "./dist/complex.js",
    "module": "./dist/complex.mjs",
    "types": "./complex.d.ts",
    "browser": "./dist/complex.min.js",
    "unpkg": "./dist/complex.min.js",
    "readmeFilename": "README.md",
    "exports": {
      ".": {
        "types": "./complex.d.ts",
        "require": "./dist/complex.js",
        "import": "./dist/complex.mjs"
      }
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:rawify/Complex.js.git"
    },
    "funding": {
      "type": "github",
      "url": "https://github.com/sponsors/rawify"
    },
    "author": {
      "name": "Robert Eisele",
      "email": "robert@raw.org",
      "url": "https://raw.org/"
    },
    "license": "MIT",
    "engines": {
      "node": "*"
    },
    "scripts": {
      "build": "crude-build Complex",
      "test": "mocha tests/*.js"
    },
    "devDependencies": {
      "crude-build": "^0.1.2",
      "mocha": "*"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-complex-js-2.4.2-76f260a9e7e232d8ad26348484a9b128c13fcc9a-integrity/node_modules/complex.js/package.json",
    "readme": "# Complex.js - ℂ in JavaScript\n\n[![NPM Package](https://img.shields.io/npm/v/complex.js.svg?style=flat)](https://npmjs.org/package/complex.js \"View this project on npm\")\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\nComplex.js is a well tested JavaScript library to work with [complex number arithmetic](https://raw.org/book/analysis/complex-numbers/) in JavaScript. It implements every elementary complex number manipulation function and the API is intentionally similar to [Fraction.js](https://github.com/rawify/Fraction.js). Furthermore, it's the basis of [Polynomial.js](https://github.com/infusion/Polynomial.js) and [Math.js](https://github.com/josdejong/mathjs).\n\n\n## Examples\n\n\n```js\nlet Complex = require('complex.js');\n\nlet c = new Complex(\"99.3+8i\");\nc.mul({re: 3, im: 9}).div(4.9).sub(3, 2);\n```\n\nA classical use case for complex numbers is solving quadratic equations `ax² + bx + c = 0` for all `a, b, c ∈ ℝ`:\n\n```js\n\nfunction quadraticRoot(a, b, c) {\n  let sqrt = Complex(b * b - 4 * a * c).sqrt()\n  let x1 = Complex(-b).add(sqrt).div(2 * a)\n  let x2 = Complex(-b).sub(sqrt).div(2 * a)\n  return {x1, x2}\n}\n\n// quadraticRoot(1, 4, 5) -> -2 ± i\n```\n\nFor cubic roots have a look at [RootFinder](https://github.com/rawify/RootFinder.js) which uses Complex.js.\n\n## Parser\n\n\nAny function (see below) as well as the constructor of the *Complex* class parses its input like this.\n\nYou can pass either Objects, Doubles or Strings.\n\n### Objects\n\n```javascript\nnew Complex({re: real, im: imaginary});\nnew Complex({arg: angle, abs: radius});\nnew Complex({phi: angle, r: radius});\nnew Complex([real, imaginary]); // Vector/Array syntax\n```\nIf there are other attributes on the passed object, they're not getting preserved and have to be merged manually.\n\n**Note:** Object attributes have to be of type Number to avoid undefined behavior.\n\n### Doubles\n\n```javascript\nnew Complex(55.4);\n```\n\n### Strings\n\n```javascript\nnew Complex(\"123.45\");\nnew Complex(\"15+3i\");\nnew Complex(\"i\");\n```\n\n### Two arguments\n\n```javascript\nnew Complex(3, 2); // 3+2i\n```\n\n## Attributes\n\n\nEvery complex number object exposes its real and imaginary part as attribute `re` and `im`:\n\n```javascript\nlet c = new Complex(3, 2);\n\nconsole.log(\"Real part:\", c.re); // 3\nconsole.log(\"Imaginary part:\", c.im); // 2\n```\n\n## Functions\n\n\nComplex sign()\n---\nReturns the complex sign, defined as the complex number normalized by it's absolute value\n\nComplex add(n)\n---\nAdds another complex number\n\nComplex sub(n)\n---\nSubtracts another complex number\n\nComplex mul(n)\n---\nMultiplies the number with another complex number\n\nComplex div(n)\n---\nDivides the number by another complex number\n\nComplex pow(exp)\n---\nReturns the number raised to the complex exponent (Note: `Complex.ZERO.pow(0) = Complex.ONE` by convention)\n\nComplex sqrt()\n---\nReturns the complex square root of the number\n\nComplex exp(n)\n---\nReturns `e^n` with complex exponent `n`.\n\nComplex log()\n---\nReturns the natural logarithm (base `E`) of the actual complex number\n\n_Note:_ The logarithm to a different base can be calculated with `z.log().div(Math.log(base))`.\n\ndouble abs()\n---\nCalculates the magnitude of the complex number\n\ndouble arg()\n---\nCalculates the angle of the complex number\n\nComplex inverse()\n---\nCalculates the multiplicative inverse of the complex number (1 / z)\n\nComplex conjugate()\n---\nCalculates the conjugate of the complex number (multiplies the imaginary part with -1)\n\nComplex neg()\n---\nNegates the number (multiplies both the real and imaginary part with -1) in order to get the additive inverse\n\nComplex floor([places=0])\n---\nFloors the complex number parts towards zero\n\nComplex ceil([places=0])\n---\nCeils the complex number parts off zero\n\nComplex round([places=0])\n---\nRounds the complex number parts\n\nboolean equals(n)\n---\nChecks if both numbers are exactly the same, if both numbers are infinite they\nare considered **not** equal.\n\nboolean isNaN()\n---\nChecks if the given number is not a number\n\nboolean isFinite()\n---\nChecks if the given number is finite\n\nComplex clone()\n---\nReturns a new Complex instance with the same real and imaginary properties\n\nArray toVector()\n---\nReturns a Vector of the actual complex number with two components\n\nString toString()\n---\nReturns a string representation of the actual number. As of v1.9.0 the output is a bit more human readable\n\n```javascript\nnew Complex(1, 2).toString(); // 1 + 2i\nnew Complex(0, 1).toString(); // i\nnew Complex(9, 0).toString(); // 9\nnew Complex(1, 1).toString(); // 1 + i\n```\n\ndouble valueOf()\n---\nReturns the real part of the number if imaginary part is zero. Otherwise `null`\n\n\n## Trigonometric functions\n\nThe following trigonometric functions are defined on Complex.js:\n\n| Trig | Arcus | Hyperbolic | Area-Hyperbolic |\n|------|-------|------------|------------------|\n| sin()  | asin()  | sinh()       | asinh()            |\n| cos()  | acos()  | cosh()       | acosh()            |\n| tan()  | atan()  | tanh()       | atanh()            |\n| cot()  | acot()  | coth()       | acoth()            |\n| sec()  | asec()  | sech()       | asech()            |\n| csc()  | acsc()  | csch()       | acsch()            |\n\n\n## Geometric Equivalence\n\n\nComplex numbers can also be seen as a vector in the 2D space. Here is a simple overview of basic operations and how to implement them with complex.js:\n\nNew vector\n---\n```js\nlet v1 = new Complex(1, 0);\nlet v2 = new Complex(1, 1);\n```\n\nScale vector\n---\n```js\nscale(v1, factor):= v1.mul(factor)\n```\n\nVector norm\n---\n```js\nnorm(v):= v.abs()\n```\n\nTranslate vector\n---\n```js\ntranslate(v1, v2):= v1.add(v2)\n```\n\nRotate vector around center\n---\n```js\nrotate(v, angle):= v.mul({abs: 1, arg: angle})\n```\n\nRotate vector around a point\n---\n```js\nrotate(v, p, angle):= v.sub(p).mul({abs: 1, arg: angle}).add(p)\n```\n\nDistance to another vector\n---\n```js\ndistance(v1, v2):= v1.sub(v2).abs()\n```\n\n## Constants\n\n\nComplex.ZERO\n---\nA complex zero value (south pole on the Riemann Sphere)\n\nComplex.ONE\n---\nA complex one instance\n\nComplex.INFINITY\n---\nA complex infinity value (north pole on the Riemann Sphere)\n\nComplex.NAN\n---\nA complex NaN value (not on the Riemann Sphere)\n\nComplex.I\n---\nAn imaginary number i instance\n\nComplex.PI\n---\nA complex PI instance\n\nComplex.E\n---\nA complex euler number instance\n\nComplex.EPSILON\n---\nA small epsilon value used for `equals()` comparison in order to circumvent double imprecision.\n\n\n## Installation\n\nInstalling complex.js is as easy as cloning this repo or use one of the following command:\n\n\n```bash\nnpm install complex.js\n```\n\n## Using Complex.js with the browser\n\n```html\n<script src=\"complex.min.js\"></script>\n<script>\n    console.log(Complex(\"4+3i\"));\n</script>\n```\n\n\n\n## Coding Style\n\nAs every library I publish, Complex.js is also built to be as small as possible after compressing it with Google Closure Compiler in advanced mode. Thus the coding style orientates a little on maxing-out the compression rate. Please make sure you keep this style if you plan to extend the library.\n\n## Building the library\n\nAfter cloning the Git repository run:\n\n```\nnpm install\nnpm run build\n```\n\n## Run a test\n\nTesting the source against the shipped test suite is as easy as\n\n```\nnpm run test\n```\n\n## Copyright and Licensing\n\nCopyright (c) 2024, [Robert Eisele](https://raw.org/)\nLicensed under the MIT license.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2024 Robert Eisele\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/complex.js/-/complex.js-2.4.2.tgz#76f260a9e7e232d8ad26348484a9b128c13fcc9a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/complex.js/-/complex.js-2.4.2.tgz",
    "hash": "76f260a9e7e232d8ad26348484a9b128c13fcc9a",
    "integrity": "sha512-qtx7HRhPGSCBtGiST4/WGHuW+zeaND/6Ld+db6PbrulIB1i2Ev/2UPiqcmpQNPSyfBKraC0EOvOKCB5dGZKt3g==",
    "registry": "npm",
    "packageName": "complex.js",
    "cacheIntegrity": "sha512-qtx7HRhPGSCBtGiST4/WGHuW+zeaND/6Ld+db6PbrulIB1i2Ev/2UPiqcmpQNPSyfBKraC0EOvOKCB5dGZKt3g== sha1-dvJgqefiMtitJjSEhKmxKME/zJo="
  },
  "registry": "npm",
  "hash": "76f260a9e7e232d8ad26348484a9b128c13fcc9a"
}