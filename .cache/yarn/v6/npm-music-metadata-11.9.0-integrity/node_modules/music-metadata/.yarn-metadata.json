{
  "manifest": {
    "name": "music-metadata",
    "description": "Music metadata parser for Node.js, supporting virtual any audio and tag format.",
    "version": "11.9.0",
    "author": {
      "name": "Borewit",
      "url": "https://github.com/Borewit"
    },
    "funding": [
      {
        "type": "github",
        "url": "https://github.com/sponsors/Borewit"
      },
      {
        "type": "buymeacoffee",
        "url": "https://buymeacoffee.com/borewit"
      }
    ],
    "sideEffects": false,
    "type": "module",
    "exports": {
      "node": {
        "import": "./lib/index.js",
        "module-sync": "./lib/index.js",
        "types": "./lib/index.d.ts"
      },
      "default": {
        "import": "./lib/core.js",
        "module-sync": "./lib/core.js",
        "types": "./lib/core.d.ts"
      }
    },
    "types": "lib/index.d.ts",
    "files": [
      "lib/**/*.js",
      "lib/**/*.d.ts"
    ],
    "keywords": [
      "music",
      "metadata",
      "meta",
      "audio",
      "tag",
      "tags",
      "duration",
      "MusicBrainz",
      "Discogs",
      "Picard",
      "ID3",
      "ID3v1",
      "ID3v2",
      "m4a",
      "m4b",
      "mp3",
      "mp4",
      "Vorbis",
      "ogg",
      "flac",
      "Matroska",
      "WebM",
      "EBML",
      "asf",
      "wma",
      "wmv",
      "ape",
      "MonkeyAudio",
      "aiff",
      "wav",
      "WavPack",
      "Opus",
      "speex",
      "musepack",
      "mpc",
      "dsd",
      "dsf",
      "mpc",
      "dff",
      "dsdiff",
      "aac",
      "adts",
      "length",
      "chapter",
      "info",
      "parse",
      "parser",
      "bwf",
      "slt",
      "lyrics"
    ],
    "scripts": {
      "clean": "del-cli 'lib/**/*.js' 'lib/**/*.js.map' 'lib/**/*.d.ts' 'test/**/*.js' 'test/**/*.js.map' 'test/**/*.js' 'test/**/*.js.map' 'doc-gen/**/*.js' 'doc-gen/**/*.js.map'",
      "compile-src": "tsc -p lib --sourceMap false",
      "compile-test": "tsc -p test",
      "compile-doc": "tsc -p doc-gen",
      "compile": "yarn run compile-src && yarn compile-test && yarn compile-doc",
      "lint:ts": "biome check",
      "lint:md": "yarn run remark -u remark-preset-lint-consistent .",
      "lint": "yarn run lint:ts && yarn run lint:md",
      "test": "mocha",
      "build": "yarn run clean && yarn compile && yarn run doc-gen",
      "prepublishOnly": "yarn run build",
      "test-coverage": "c8 yarn run test",
      "send-codacy": "c8 report --reporter=text-lcov | codacy-coverage",
      "doc-gen": "yarn node doc-gen/gen.js",
      "typecheck": "tsc --project ./lib/tsconfig.json --noEmit && tsc --project ./test/tsconfig.json --noEmit",
      "update-biome": "yarn add -D --exact @biomejs/biome && npx @biomejs/biome migrate --write"
    },
    "dependencies": {
      "@borewit/text-codec": "^0.2.0",
      "@tokenizer/token": "^0.3.0",
      "content-type": "^1.0.5",
      "debug": "^4.4.3",
      "file-type": "^21.0.0",
      "media-typer": "^1.1.0",
      "strtok3": "^10.3.4",
      "token-types": "^6.1.1",
      "uint8array-extras": "^1.5.0"
    },
    "devDependencies": {
      "@biomejs/biome": "2.2.4",
      "@types/chai": "^5.2.2",
      "@types/chai-as-promised": "^8.0.2",
      "@types/content-type": "^1.1.9",
      "@types/debug": "^4.1.12",
      "@types/media-typer": "^1.1.3",
      "@types/mocha": "^10.0.10",
      "@types/node": "^24.3.1",
      "c8": "^10.1.3",
      "chai": "^6.0.1",
      "chai-as-promised": "^8.0.2",
      "del-cli": "^6.0.0",
      "mime": "^4.1.0",
      "mocha": "^11.7.2",
      "node-readable-to-web-readable-stream": "^0.4.2",
      "remark-cli": "^12.0.1",
      "remark-preset-lint-consistent": "^6.0.1",
      "ts-node": "^10.9.2",
      "typescript": "^5.9.2"
    },
    "engines": {
      "node": ">=18"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Borewit/music-metadata.git"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/Borewit/music-metadata/issues"
    },
    "packageManager": "yarn@4.9.2",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-music-metadata-11.9.0-integrity/node_modules/music-metadata/package.json",
    "readmeFilename": "README.md",
    "readme": "[![CI](https://github.com/Borewit/music-metadata/actions/workflows/ci.yml/badge.svg)](https://github.com/Borewit/music-metadata/actions/workflows/ci.yml)\n[![NPM version](https://img.shields.io/npm/v/music-metadata.svg)](https://npmjs.org/package/music-metadata)\n[![npm downloads](http://img.shields.io/npm/dm/music-metadata.svg)](https://npmcharts.com/compare/music-metadata?start=600&interval=30)\n[![Coverage Status](https://coveralls.io/repos/github/Borewit/music-metadata/badge.svg?branch=master)](https://coveralls.io/github/Borewit/music-metadata?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/57d731b05c9e41889a2a17cb4b0384d7)](https://app.codacy.com/app/Borewit/music-metadata?utm_source=github.com&utm_medium=referral&utm_content=Borewit/music-metadata&utm_campaign=Badge_Grade_Dashboard)\n[![CodeQL](https://github.com/Borewit/music-metadata/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/Borewit/music-metadata/actions/workflows/codeql-analysis.yml)\n[![DeepScan grade](https://deepscan.io/api/teams/5165/projects/6938/branches/61821/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=5165&pid=6938&bid=61821)\n[![Known Vulnerabilities](https://snyk.io/test/github/Borewit/music-metadata/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Borewit/music-metadata?targetFile=package.json)\n[![Discord](https://img.shields.io/discord/460524735235883049.svg)](https://discord.gg/KyBr6sb)\n\n# music-metadata\n\nKey features:\n- **Comprehensive Format Support**: Supports popular audio formats like MP3, MP4, FLAC, Ogg, WAV, AIFF, and more.\n- **Extensive Metadata Extraction**: Extracts detailed metadata, including ID3v1, ID3v2, APE, Vorbis, and iTunes/MP4 tags.\n- **Streaming Support**: Efficiently handles large audio files by reading metadata from streams, making it suitable for server-side and browser-based applications.\n- **Promise-Based API**: Provides a modern, promise-based API for easy integration into asynchronous workflows.\n- **Cross-Platform**: Works in both [Node.js](https://nodejs.org/) and browser environments with the help of bundlers like [Webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/introduction/).\n\nThe [`music-metadata`](https://github.com/Borewit/music-metadata) module is ideal for developers working on media applications, music players, or any project that requires access to detailed audio file metadata.\n\n## Compatibility\n\nModule: version 8 migrated from [CommonJS](https://en.wikipedia.org/wiki/CommonJS) to [pure ECMAScript Module (ESM)](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c).\nThe distributed JavaScript codebase is compliant with the [ECMAScript 2020 (11th Edition)](https://en.wikipedia.org/wiki/ECMAScript_version_history#11th_Edition_%E2%80%93_ECMAScript_2020) standard.\n\n> [!NOTE]\n> See also [CommonJS backward Compatibility](#commonjs-backward-compatibility)\n\nThis module requires a [Node.js â‰¥ 18](https://nodejs.org/en/about/previous-releases) engine.\nIt can also be used in a browser environment when bundled with a module bundler.\n\n## Support the Project\nIf you find this project useful and would like to support its development, consider sponsoring or contributing:\n\n- [Become a sponsor to Borewit](https://github.com/sponsors/Borewit)\n\n- Buy me a coffee:\n\n  <a href=\"https://www.buymeacoffee.com/borewit\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" alt=\"Buy me A coffee\" height=\"41\" width=\"174\"></a>\n\n## Features\n\n### Support for audio file types\n\n| Audio format                                                              | Description                                               | Logo                                                                                             |\n|---------------------------------------------------------------------------|-----------------------------------------------------------|--------------------------------------------------------------------------------------------------|\n| [AIFF / AIFF-C](https://wikipedia.org/wiki/Audio_Interchange_File_Format) | Audio Interchange File Format                             | <img src=\"./image/logo-Apple_Computer_Logo_rainbow.svg\" width=\"40\" alt=\"Apple rainbow logo\">     |\n| [AAC](https://en.wikipedia.org/wiki/Advanced_Audio_Coding)                | ADTS / Advanced Audio Coding                              | <img src=\"./image/logo-AAC_original.svg\" width=\"40\" alt=\"AAC logo\">                              |\n| [APE](https://wikipedia.org/wiki/Monkey's_Audio)                          | Monkey's Audio                                            | <img src=\"./image/logo-APE-AI.svg\" width=\"40\" alt=\"Monkey's Audio logo\">                         |\n| [ASF](https://wikipedia.org/wiki/Advanced_Systems_Format)                 | Advanced Systems Format                                   |                                                                                                  |\n| [BWF](https://en.wikipedia.org/wiki/Broadcast_Wave_Format)                | Extended WAV format for broadcast and archiving           |                                                                                                  |\n| [DSDIFF](https://wikipedia.org/wiki/Direct_Stream_Digital)                | Philips DSDIFF                                            | <img src=\"./image/logo-DSD.svg\" width=\"80\" alt=\"DSD logo\">                                       |\n| [DSF](https://wikipedia.org/wiki/Direct_Stream_Digital)                   | Sony's DSD Stream File                                    | <img src=\"./image/logo-DSD.svg\" width=\"80\" alt=\"DSD logo\">                                       |\n| [FLAC](https://wikipedia.org/wiki/FLAC)                                   | Free Lossless Audio Codec                                 | <img src=\"./image/logo-FLAC.svg\" width=\"80\" alt=\"FLAC logo\">                                     |\n| [MP2](https://wikipedia.org/wiki/MPEG-1_Audio_Layer_II)                   | MPEG-1 Audio Layer II (predecessor to MP3)                |                                                                                                  |\n| [Matroska](https://wikipedia.org/wiki/Matroska)                           | Matroska (EBML), mka, mkv                                 | <img src=\"./image/logo-Matroska_2010.svg\" width=\"80\" alt=\"Matroska logo\">                        |\n| [MP3](https://wikipedia.org/wiki/MP3)                                     | MPEG-1 / MPEG-2 Audio Layer III                           | <img src=\"./image/logo-Mp3.svg\" width=\"80\" alt=\"MP3 logo\">                                     |\n| [MPC](https://wikipedia.org/wiki/Musepack)                                | Musepack SV7                                              | <img src=\"./image/logo-Musepack.svg\" width=\"80\" alt=\"musepack logo\">                             |\n| [MPEG 4](https://wikipedia.org/wiki/MPEG-4)                               | mp4, m4a, m4v                                             | <img src=\"./image/logo-MPEG4-350581.svg\" width=\"80\" alt=\"mpeg 4 logo\">                           |\n| [Ogg](https://en.wikipedia.org/wiki/Ogg)                                  | Open container format                                     | <img src=\"./image/logo-Ogg.svg\" width=\"80\" alt=\"Ogg logo\">                                       |\n| [Opus](https://wikipedia.org/wiki/Opus_(audio_format))                    | Low-latency, high-quality codec for speech and music      | <img src=\"./image/logo-Opus.svg\" width=\"80\" alt=\"Opus logo\">                                     |\n| [Speex](https://wikipedia.org/wiki/Speex)                                 | Open-source speech codec optimized for VoIP               | <img src=\"./image/logo-Speex_2006.svg\" width=\"80\" alt=\"Speex logo\">                              |\n| [Theora](https://en.wikipedia.org/wiki/Theora)                            | Open video compression format (typically paired with Ogg) | <img src=\"./image/logo-Theora_2007.svg\" width=\"70\" alt=\"Theora logo\">                            |\n| [Vorbis](https://wikipedia.org/wiki/Ogg_Vorbis)                           | Vorbis audio compression                                  | <img src=\"./image/logo-Vorbis_many_fish_2005.svg\" width=\"70\" alt=\"Vorbis logo\">                 |\n| [WAV](https://wikipedia.org/wiki/WAV)                                     | Uncompressed PCM audio in RIFF container                  |                                                                                                  |\n| [WebM](https://wikipedia.org/wiki/WebM)                                   | WebM                                                      | <img src=\"./image/logo-WebM.svg\" width=\"80\" alt=\"Matroska logo\">                                 |\n| [WV](https://wikipedia.org/wiki/WavPack)                                  | WavPack                                                   | <img src=\"./image/logo-wavpack.svg\" width=\"60\" alt=\"WavPack logo\">                               |\n| [WMA](https://wikipedia.org/wiki/Windows_Media_Audio)                     | Windows Media Audio                                       | <img src=\"./image/logo-Windows_Media_Player_simplified.svg\" width=\"40\" alt=\"Windows Media logo\"> |\n\n### Supported tag headers\n\nFollowing tag header formats are supported:\n- [APE](https://wikipedia.org/wiki/APE_tag)\n- [ASF](https://wikipedia.org/wiki/Advanced_Systems_Format)\n- EXIF 2.3\n- [ID3](https://wikipedia.org/wiki/ID3): ID3v1, ID3v1.1, ID3v2.2, [ID3v2.3](http://id3.org/id3v2.3.0) & [ID3v2.4](http://id3.org/id3v2.4.0-frames)\n- [iTunes](https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata)\n- [RIFF](https://wikipedia.org/wiki/Resource_Interchange_File_Format)/INFO\n- [Vorbis comment](https://wikipedia.org/wiki/Vorbis_comment)\n- [AIFF](https://wikipedia.org/wiki/Audio_Interchange_File_Format)\n \nFollowing lyric formats are supported:\n- [LRC](https://en.wikipedia.org/wiki/LRC_(file_format))\n- Synchronized lyrics (SYLT)\n- Unsynchronized lyrics (USULT)\n\nSupport for [MusicBrainz](https://musicbrainz.org/) tags as written by [Picard](https://picard.musicbrainz.org/).\n[ReplayGain](https://wiki.hydrogenaud.io/index.php?title=ReplayGain) tags are supported.\n\n### Audio format & encoding details\n\nSupport for encoding / format details:\n- [Bit rate](https://wikipedia.org/wiki/Bit_rate)\n- [Audio bit depth](https://wikipedia.org/wiki/Audio_bit_depth)\n- Duration\n- Encoding profile (e.g. [CBR](https://en.wikipedia.org/wiki/Constant_bitrate), V0, V2)\n\n\n## Online demo's\n- [<img src=\"https://raw.githubusercontent.com/Borewit/audio-tag-analyzer/master/src/assets/icon/audio-tag-analyzer.svg\" width=\"40\">Audio Tag Analyzer](https://audio-tag-analyzer.netlify.app/)\n- [<img src=\"https://cdn.sanity.io/images/3do82whm/next/ba8c847f13a5fa39d88f8bc9b7846b7886531b18-2500x2500.svg\" width=\"40\"> Webamp](https://webamp.org/)\n- [ICY Radio Stream Player](https://icy-radio-stream-player.netlify.app/)\n- Expected to be released soon: [Overtone](https://overtone.pro/) by [Johannes Schickling](https://github.com/schickling)\n\n## Usage\n\n### Installation\nInstall using [npm](http://npmjs.org/):\n\n```bash\nnpm install music-metadata\n```\nor using [yarn](https://yarnpkg.com/):\n```bash\nyarn add music-metadata\n```\n\n## API Documentation\n\n### Overview\n\n**Node.js specific** functions to read an audio file or stream:\n1. **File Parsing**: Parse audio files directly from the filesystem using the [parseFile function](#parsefile-function)\n1. **Stream Parsing**: Parse audio metadata from a Node.js [Readable stream](https://nodejs.org/api/stream.html#class-streamreadable) using the [parseStream function](#parsewebstream-function).\n\n**Cross-platform** functions available to read an audio file or stream:\n\nThere are multiple ways to parse (read) audio tracks:\n1. **Web Stream Parsing**: Parse audio data from a web-compatible [ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream) using the [parseWebStream function](#parsewebstream-function).\n1. **Blob Parsing**: Parse audio metadata from a (Web API) [Blob](https://developer.mozilla.org/docs/Web/API/Blob) or [File](https://developer.mozilla.org/docs/Web/API/File) using the [parseBlob function](#parseblob-function).\n1. **Buffer Parsing**: Parse audio metadata from a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) or [Buffer](https://nodejs.org/api/buffer.html) using the [parseBuffer function](#parsebuffer-function).\n1. **Tokenizer Parsing:** Use a custom or third-party [strtok3](https://github.com/Borewit/strtok3) `ITokenizer` to parse using the [parseFromTokenizer function](#parsefromtokenizer-function).\n\n> [!NOTE]\n> Direct file access in Node.js is generally faster because it can 'jump' to various parts of the file without reading intermediate data.\n\n### Node.js specific function\nThese functions are tailored for Node.js environments and leverage Node.js-specific APIs,\nmaking them incompatible with browser-based JavaScript engines.\n\n#### `parseFile` function\n\nThe `parseFile` function is intended for extracting metadata from audio files on the local filesystem in a Node.js environment.\nIt reads the specified file, parses its audio metadata, and returns a promise that resolves with this information.\n\n##### Syntax\n```ts\nparseFile(filePath: string, options?: IOptions): Promise<IAudioMetadata>\n```\n\n##### Parameters\n\n- `filePath`: `string`\n\n  The path to the media file from which metadata should be extracted.\n  This should be a valid path to an audio file on the local filesystem.\n\n- `options`: [IOptions](#ioptions-interface) (optional)\n\n  An optional configuration object that allows customization of the parsing process.\n  These options can include whether to calculate the file's duration, skip embedded cover art, \n  or other parsing behaviors.\n\n##### Returns\n\n- `Promise<IAudioMetadata>`: \n\n  A promise that resolves to an IAudioMetadata object containing metadata about the audio file.\n  The metadata includes details such as the file format, codec, duration, bit rate, and any embedded tags like album, artist, or track information.\n\n##### Usage Notes\n\n- This function is **Node.js-only** and relies on Node.js-specific APIs to access the filesystem.\n\n- For browser environments, consider using the [parseBlob](#parseblob-function) to parse [File object](https://developer.mozilla.org/en-US/docs/Web/API/File) objects.\n\n##### Example:\n\nThe following example demonstrates how to use the parseFile function to read metadata from an audio file:\n```js\nimport { parseFile } from 'music-metadata';\nimport { inspect } from 'node:util';\n\n(async () => {\n  try {\n    const filePath = 'test/samples/MusicBrainz - Beth Hart - Sinner\\'s Prayer [id3v2.3].V2.mp3';\n    const metadata = await parseFile(filePath);\n\n    // Output the parsed metadata to the console in a readable format\n    console.log(inspect(metadata, { showHidden: false, depth: null }));\n  } catch (error) {\n    console.error('Error parsing metadata:', error.message);\n  }\n})();\n```\n\n#### `parseStream` function\n\nThe parseStream function is used to parse metadata from an audio track provided as a Node.js [`Readable`](https://nodejs.org/api/stream.html#class-streamreadable) stream.\nThis is particularly useful for processing audio data that is being streamed or piped from another source, such as a web server or file system.\n\n##### Syntax:\n```ts\nparseStream(stream: Readable, fileInfo?: IFileInfo | string, options?: IOptions): Promise<IAudioMetadata>\n```\n\n##### Parameters:\n\n- `stream`: `Readable`:\n  \n  The Node.js [Readable](https://nodejs.org/api/stream.html#class-streamreadable) stream from which the audio data is read.\n  This stream should provide the raw audio data to be analyzed.\n\n- `fileInfo`: `IFileInfo` (optional)\n\n  An object containing file-related information or a string representing the MIME-type of the audio stream.\n  The fileInfo parameter can help the parser to correctly identify the audio format and may include:\n\n  - `mimeType`: A string representing the [MIME-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) (e.g., `audio/mpeg`).\n    \n    If provided, it is assumed the streamed file content is to be the MIME-type. \n    If not provided, the parser will attempt to determine the format based on the content of the stream.\n  \n  - `size`: The total size of the audio stream in bytes (useful for streams with a known length).\n  \n  - `path`: A string representing the file path or filename, which can also assist in determining the format.\n\n- `options`: `IOptions` (optional)\n  \n  An optional object containing additional parsing options.\n  These options allow you to customize the parsing process,\n  such as whether to calculate the duration or skip cover art extraction.\n\n##### Returns\n\n- `Promise<IAudioMetadata>`:\n \n  A promise that resolves to an `IAudioMetadata` object containing detailed metadata about the audio stream.\n  This metadata includes information about the format, codec, duration, bitrate, and any embedded tags such as artist, album, or track information.\n\n##### Usage Notes\n- This function is only available in Node.js environments, as it relies on the [Node.js stream API](https://nodejs.org/api/stream.html).\n\n##### Example:\n\nThe following example demonstrates how to use the `parseStream` function to read metadata from an audio stream:\n```js\nimport { parseStream } from 'music-metadata';\nimport { createReadStream } from 'fs';\n\n(async () => {\n  try {\n    // Create a readable stream from a file\n    const audioStream = createReadStream('path/to/audio/file.mp3');\n\n    // Parse the metadata from the stream\n    const metadata = await parseStream(audioStream, { mimeType: 'audio/mpeg'});\n\n    // Log the parsed metadata\n    console.log(metadata);\n  } catch (error) {\n    console.error('Error parsing metadata:', error.message);\n  }\n})();\n\n```\n\n### Cross-platform functions\nThese functions are designed to be cross-platform,\nmeaning it can be used in both Node.js and web browsers.\n\n#### `parseWebStream` function\n\nThe parseWebStream function is used to extract metadata from an audio track provided as a web-compatible ReadableStream.\nThis function is ideal for applications running in web environments, such as browsers,\nwhere audio data is streamed over the network or read from other web-based sources.\n\n\n##### Syntax\n```ts\nparseWebStream(webStream: ReadableStream<Uint8Array>, fileInfo?: IFileInfo | string, options?: IOptions): Promise<IAudioMetadata>\n```\n\n##### Parameters\n\n- `webStream`: `ReadableStream<Uint8Array>`\n\n  A [ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream) that provides the audio data to be parsed.\n  This stream should emit Uint8Array chunks, representing the raw audio data.\n\n- `fileInfo`: `IFileInfo` (optional)\n\n  An object containing file-related information or a string representing the MIME-type of the audio stream.\n  The fileInfo parameter can help the parser to correctly identify the audio format and may include:\n\n    - `mimeType`: A string representing the [MIME-type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) (e.g., `audio/mpeg`).\n\n      If provided, it is assumed the streamed file content is to be the MIME-type.\n      If not provided, the parser will attempt to determine the format based on the content of the stream.\n\n    - `size`: The total size of the audio stream in bytes (useful for streams with a known length).\n\n    - `path`: A string representing the file path or filename, which can also assist in determining the format.\n\n- `options`: `IOptions` (optional)\n\n  An optional object containing additional parsing options.\n  These options allow you to customize the parsing process,\n  such as whether to calculate the duration or skip cover art extraction.\n\n##### Returns\n\n- `Promise<IAudioMetadata>`:\n\n  A promise that resolves to an `IAudioMetadata` object containing detailed metadata about the audio stream.\n  This metadata includes information about the format, codec, duration, bitrate, and any embedded tags such as artist, album, or track information.\n\n##### Example\nHereâ€™s an example of how to use the `parseWebStream` function to extract metadata from an audio stream in a web application:\n\n```js\nimport { parseWebStream } from 'music-metadata';\n\n(async () => {\n  try {\n    // Fetch the audio file\n    const response = await fetch('https://github.com/Borewit/test-audio/raw/refs/heads/master/Various%20Artists%20-%202008%20-%20netBloc%20Vol%2013%20-%20Color%20in%20a%20World%20of%20Monochrome%20%5BAAC-40%5D/1.02.%20Solid%20Ground.m4a');\n\n    // Extract the Content-Length header and convert it to a number\n    const contentLength = response.headers.get('Content-Length');\n    const size = contentLength ? parseInt(contentLength, 10) : undefined;\n\n    // Parse the metadata from the web stream\n    const metadata = await parseWebStream(response.body, {\n      mimeType: response.headers.get('Content-Type'),\n      size // Important to pass the content-length\n    });\n\n    console.log(metadata);\n  } catch (error) {\n    console.error('Error parsing metadata:', error.message);\n  }\n})();\n```\n\nThe example uses the [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to retrieve an audio file from a URL.\nThe `response.body` provides a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream) that is then passed to `parseWebStream`.\n\n#### `parseBlob` function\n\nParses metadata from an audio file represented as a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob). \nThis function is suitable for use in environments that support the ReadableStreamBYOBReader, which is **available in Node.js 20** and above.\n\n##### Syntax\n```ts\nparseBlob(blob: Blob, options?: IOptions = {}): Promise<IAudioMetadata>\n```\n\n##### Parameters\n \n- `blob`: [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n  \n   The Blob object containing the audio data to be parsed.\n   This can be a file or any binary data. If the Blob is an instance of File, its name will be used as the file path in the metadata.\n\n- `options`: [IOptions](#ioptions-interface) (optional)\n  \n  An optional configuration object that specifies parsing options.\n\n##### Returns \n\n- `Promise<IAudioMetadata>`:\n\n  A promise that resolves to the metadata of the audio file.\n\n##### Example\n\n```js\nimport { parseBlob } from 'music-metadata';\n\n(async () => {\n  const fileInput = document.querySelector('input[type=\"file\"]');\n  const file = fileInput.files[0];\n  \n  try {\n    const metadata = await parseBlob(file);\n    console.log(metadata);\n  } catch (error) {\n    console.error('Error parsing metadata:', error.message);\n  }\n})();\n```\n\n#### `parseBuffer` function\n\nParses metadata from an audio file where the audio data is held in a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) or [Buffer](https://nodejs.org/api/buffer.html).\nThis function is particularly useful when you already have audio data in memory.\n\n##### Syntax\n```ts\nparseBuffer(buffer: Uint8Array, fileInfo?: IFileInfo | string, opts?: IOptions = {}): Promise<IAudioMetadata>\n```\n\n##### Parameters\n- `uint8Array`: [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n\n  A [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) containing the audio data to be parsed.\n\n- `fileInfo`: `IFileInfo` | `string` (optional)\n  \n  An object containing file information such as mimeType and size.\n  Alternatively, you can pass a MIME-type string directly.\n  This helps the parser understand the format of the audio data.\n\n- `options`: [IOptions](#ioptions-interface) (optional)\n\n  An optional configuration object that specifies parsing options.\n\n##### Returns\n- `Promise<IAudioMetadata>`:\n  \n  A promise that resolves to the metadata of the audio file.\n\n\n##### Example\n\n```js\nimport { parseBuffer } from 'music-metadata';\nimport fs from 'fs';\n\n(async () => {\n  const buffer = fs.readFileSync('path/to/audio/file.mp3');\n\n  try {\n    const metadata = await parseBuffer(buffer, { mimeType: 'audio/mpeg' });\n    console.log(metadata);\n  } catch (error) {\n    console.error('Error parsing metadata:', error.message);\n  }\n})();\n```\n\n#### `parseFromTokenizer` function\nParses metadata from an audio source that implements the [strtok3](https://github.com/Borewit/strtok3) ITokenizer interface.\nThis is a low-level function that provides flexibility for advanced use cases,\nsuch as parsing metadata from streaming audio or custom data sources.\n\nThis also enables special read modules like:\n- [streaming-http-token-reader](https://github.com/Borewit/streaming-http-token-reader) for chunked HTTP(S) reading, using [HTTP range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests).\n\n##### Syntax\n```ts\nparseFromTokenizer(tokenizer: ITokenizer, options?: IOptions): Promise<IAudioMetadata>\n```\n\n##### Parameters\n- `tokenizer: ITokenizer`\n\n  An instance of an ITokenizer that provides access to the audio data.\n  The tokenizer abstracts the reading process, enabling support for various types of sources, including streams, buffers, or custom data readers.\n\n- `options`: [IOptions](#ioptions-interface) (optional)\n\n  An optional configuration object that specifies parsing options.\n\n##### Returns\n- `Promise<IAudioMetadata>`:\n\n  A promise that resolves to the metadata of the audio source, including information like the title, artist, album, and more.\n\n\n##### Example\n````js\nimport { fromNodeProviderChain } from '@aws-sdk/credential-providers';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { makeTokenizer } from '@tokenizer/s3';\nimport { parseFromTokenizer as mmParseFromTokenizer } from 'music-metadata';\n\n// Configure the S3 client\nconst s3 = new S3Client({\n  region: 'eu-west-2',\n  credentials: fromNodeProviderChain(),\n});\n\n// Helper function to create a tokenizer for S3 objects\nasync function makeS3TestDataTokenizer(key, options) {\n  return await makeTokenizer(s3, {\n    Bucket: 'music-metadata',\n    Key: key,\n  }, options);\n}\n\n// Function to read and log metadata from an S3 object\nasync function readMetadata() {\n  try {\n    // Create a tokenizer for the specified S3 object\n    const tokenizer = await makeS3TestDataTokenizer('path/to/audio/file.mp3', { disableChunked: false });\n\n    // Parse the metadata from the tokenizer\n    const metadata = await mmParseFromTokenizer(tokenizer);\n\n    // Log the retrieved metadata\n    console.log(metadata);\n  } catch (error) {\n    console.error('Error parsing metadata:', error.message);\n  }\n}\n\n// Execute the metadata reading function\nreadMetadata();\n````\n##### Additional Resources\n- [strtok3](https://github.com/Borewit/strtok3) - Learn more about the `ITokenizer` interface and how to implement it for various use cases.\n- [AWS SDK for JavaScript](https://aws.amazon.com/sdk-for-javascript/) - Documentation on using the AWS SDK to interact with S3 and other AWS services.\n- [@tokenizer/s3](https://github.com/Borewit/tokenizer-s3) - Example of `ITokenizer` implementation.\n\n### Handling Parse Errors\n\n`music-metadata` provides a robust and extensible error handling system with custom error classes that inherit from the standard JavaScript `Error`.\nAll possible parsing errors are part of a union type `UnionOfParseErrors`, ensuring that every error scenario is accounted for in your code.\n\n#### Union of Parse Errors \n\nAll parsing errors extend from the base class `ParseError` and are included in the `UnionOfParseErrors` type:\n```ts\nexport type UnionOfParseErrors =\n  | CouldNotDetermineFileTypeError\n  | UnsupportedFileTypeError\n  | UnexpectedFileContentError\n  | FieldDecodingError\n  | InternalParserError;\n```\n\n#### Error Types\n \n- `CouldNotDetermineFileTypeError`: Raised when the file type cannot be determined.\n- `UnsupportedFileTypeError`: Raised when an unsupported file type is encountered.\n- `UnexpectedFileContentError`: Raised when the file content does not match the expected format.\n- `FieldDecodingError`: Raised when a specific field in the file cannot be decoded.\n- `InternalParserError`: Raised for internal parser errors.\n\n### Other functions\n\n#### `orderTags` function\n\nUtility to Converts the native tags to a dictionary index on the tag identifier\n\n```ts\norderTags(nativeTags: ITag[]): [tagId: string]: any[]\n```\n\n```js\nimport { parseFile, orderTags } from 'music-metadata';\nimport { inspect } from 'util';\n\n(async () => {\n  try {\n    const metadata = await parseFile('../test/samples/MusicBrainz - Beth Hart - Sinner\\'s Prayer [id3v2.3].V2.mp3');\n    const orderedTags = orderTags(metadata.native['ID3v2.3']);\n    console.log(inspect(orderedTags, { showHidden: false, depth: null }));\n  } catch (error) {\n    console.error(error.message);\n  }\n})();\n```\n\n#### `ratingToStars` function\n\n   Can be used to convert the normalized rating value to the 0..5 stars, where 0 an undefined rating, 1 the star the lowest rating and 5 the highest rating.\n\n   ```ts\n   ratingToStars(rating: number): number\n   ```\n#### `selectCover` function\n\nSelect cover image based on image type field, otherwise the first picture in file.\n\n```ts\nexport function selectCover(pictures?: IPicture[]): IPicture | null\n```\n\n```js\nimport { parseFile, selectCover } from 'music-metadata';\n\n(async () => {\n  const {common} = await parseFile(filePath);\n  const cover = selectCover(common.picture); // pick the cover image\n}\n)();\n ```\n\n#### `getSupportedMimeTypes` function\n\nReturns a list of supported MIME-types. This may include some MIME-types which are not formally recognized.\n\n### `IOptions` Interface\n- `duration`: `boolean` (default: `false`)\n\n  When `true`, the parser will read the entire media file _if necessary_ to determine the duration.\n  This is only applicable in cases where duration cannot be reliably inferred without full file analysis.\n  Note that enabling this option **does not guarantee** that duration will be available,\n  only that the parser will attempt to calculate it when possible, even if it requires reading the full file.\n\n- `mkvUseIndex`: `boolean` (default: `false`)\n\n  When `true`, the parser uses the SeekHead index in Matroska (MKV) files to skip segment and cluster elements.\n  This experimental feature can improve performance, but:\n  - Metadata not listed in the SeekHead may be skipped.\n  - If the SeekHead is missing, this option has no effect.\n\n- `observer`: `(update: MetadataEvent) => void;`:\n\n  Callback function triggered when common tags or format properties are updated during parsing.\n  Allows real-time monitoring of metadata as it becomes available.\n \n- `skipCovers`: `boolean` (default: `false`)\n\n  When `true`, embedded cover art (images) will not be extracted.\n  Useful for reducing memory and processing when cover images are unnecessary.\n \n- `skipPostHeaders`: `boolean` (default: `false`)\n  When `true`, tag headers located at the end of the file will not be read.\n  This is particularly beneficial for streaming input, as it avoids the need to read the entire stream.\n\n> [!NOTE]\n> - The `duration` option is typically included in most cases, but setting it to true ensures that the entire file is parsed if necessary to get an accurate duration.\n> - Using `mkvUseIndex` can improve performance in Matroska files, but be aware of potential side effects, such as missing metadata due to skipped elements.\n\n\n### `IAudioMetadata` interface\n\nIf the returned promise resolves, the metadata (TypeScript `IAudioMetadata` interface) contains:\n- [`metadata.format`](#metadataformat) Audio format information\n- [`metadata.common`](#metadatacommon) Is a generic (abstract) way of reading metadata information.\n- [`metadata.trackInfo`](#metadatatrackInfo) Is a generic (abstract) way of reading metadata information.\n- `metadata.native` List of native (original) tags found in the parsed audio file.\n\n#### `metadata.format`\n\nThe questionmark `?` indicates the property is optional.\n\nAudio format information. Defined in the TypeScript `IFormat` interface:\n- `format.container?: string` Audio encoding format. e.g.: 'flac'\n- `format.codec?` Name of the codec (algorithm used for the audio compression)\n- `format.codecProfile?: string` Codec profile / settings\n- `format.tagTypes?: TagType[]`  List of tagging formats found in parsed audio file\n- `format.duration?: number` Duration in seconds\n- `format.bitrate?: number` Number bits per second of encoded audio file\n- `format.sampleRate?: number` Sampling rate in Samples per second (S/s)\n- `format.bitsPerSample?: number` Audio bit depth\n- `format.lossless?: boolean` True if lossless,  false for lossy encoding\n- `format.numberOfChannels?: number` Number of audio channels\n- `format.creationTime?: Date` Track creation time\n- `format.modificationTime?: Date` Track modification / tag update time\n- `format.trackGain?: number` Track gain in dB\n- `format.albumGain?: number` Album gain in dB\n\n#### `metadata.trackInfo`\n\nTo support advanced containers like [Matroska](https://wikipedia.org/wiki/Matroska) or [MPEG-4](https://en.wikipedia.org/wiki/MPEG-4), which may contain multiple audio and video tracks, the **experimental**- `metadata.trackInfo` has been added,\n\n`metadata.trackInfo` is either `undefined` or has an **array** of [trackInfo](#trackinfo)\n\n##### trackInfo\n\nAudio format information. Defined in the TypeScript `IFormat` interface:\n- `trackInfo.type?: TrackType` Track type\n- `trackInfo.codecName?: string` Codec name\n- `trackInfo.codecSettings?: string` Codec settings\n- `trackInfo.flagEnabled?: boolean` Set if the track is usable, default: `true`\n- `trackInfo.flagDefault?: boolean` Set if that track (audio, video or subs) SHOULD be active if no language found matches the user preference.\n- `trackInfo.flagLacing?: boolean` Set if the track **may** contain blocks using lacing\n- `trackInfo.name?: string` A human-readable track name.\n- `trackInfo.language?: string` Specifies the language of the track\n- `trackInfo.audio?: IAudioTrack`, see [`trackInfo.audioTrack`](#trackinfoaudiotrack)\n- `trackInfo.video?: IVideoTrack`, see [`trackInfo.videoTrack`](#trackinfovideotrack)\n\n##### `trackInfo.audioTrack`\n\n- `audioTrack.samplingFrequency?: number`\n- `audioTrack.outputSamplingFrequency?: number`\n- `audioTrack.channels?: number`\n- `audioTrack.channelPositions?: Buffer`\n- `audioTrack.bitDepth?: number`\n\n##### `trackInfo.videoTrack`\n\n- `videoTrack.flagInterlaced?: boolean`\n- `videoTrack.stereoMode?: number`\n- `videoTrack.pixelWidth?: number`\n- `videoTrack.pixelHeight?: number`\n- `videoTrack.displayWidth?: number`\n- `videoTrack.displayHeight?: number`\n- `videoTrack.displayUnit?: number`\n- `videoTrack.aspectRatioType?: number`\n- `videoTrack.colourSpace?: Buffer`\n- `videoTrack.gammaValue?: number`\n\n#### `metadata.common`\n\n[Common tag documentation](doc/common_metadata.md) is automatically generated.\n\n## Examples\n\nIn order to read the duration of a stream (with the exception of file streams), in some cases you should pass the size of the file in bytes.\n```js\nimport { parseStream } from 'music-metadata';\nimport { inspect } from 'util';\n\n(async () => {\n    const metadata = await parseStream(someReadStream, {mimeType: 'audio/mpeg', size: 26838}, {duration: true});\n    console.log(inspect(metadata, {showHidden: false, depth: null}));\n    someReadStream.close();\n  }\n)();\n```\n\n### Access cover art\n\nVia `metadata.common.picture` you can access an array of cover art if present.\nEach picture has this interface:\n\n```ts\n/**\n * Attached picture, typically used for cover art\n */\nexport interface IPicture {\n  /**\n   * Image mime type\n   */\n  format: string;\n  /**\n   * Image data\n   */\n  data: Buffer;\n  /**\n   * Optional description\n   */\n  description?: string;\n  /**\n   * Picture type\n   */\n  type?: string;\n}\n```\n\nTo assign `img` HTML-object you can do something like:\n```js\nimport {uint8ArrayToBase64} from 'uint8array-extras';\n\nimg.src = `data:${picture.format};base64,${uint8ArrayToBase64(picture.data)}`;\n```\n\n## Dependencies\n\nDependency diagram:\n```mermaid\ngraph TD;\n    MMN(\"music-metadata (Node.js entry point)\")-->MMP\n    MMN-->FTN\n    MMP(\"music-metadata (primary entry point)\")-->S(strtok3)\n    MMP-->TY(token-types)\n    MMP-->FTP\n    MMP-->UAE\n    FTN(\"file-type (Node.js entry point)\")-->FTP\n    FTP(\"file-type (primary entry point)\")-->S\n    S(strtok3)-->TO(\"@tokenizer/token\")\n    TY(token-types)-->TO\n    TY-->IE(\"ieee754\")\n    FTP-->TY\n    NS(\"node:stream\")\n    FTN-->NS\n    FTP-->UAE(uint8array-extras)\n    style NS fill:#F88,stroke:#A44\n    style IE fill:#CCC,stroke:#888\n    style FTN fill:#FAA,stroke:#A44\n    style MMN fill:#FAA,stroke:#A44\n```\n\nDependency list:\n- [tokenizer-token](https://github.com/Borewit/tokenizer-token)\n- [strtok3](https://github.com/Borewit/strtok3)\n- [token-types](https://github.com/Borewit/token-types)\n- [file-type](https://github.com/sindresorhus/file-type)\n- [@tokenizer-token](https://github.com/Borewit/tokenizer-token)\n\n## CommonJS backward compatibility\n\nUsing Node.js â‰¥ 22, which is support loading ESM module via require \n```js\nconst mm = require('music-metadata');\n```\n\nFor older Node.js version < 22, you need to dynamically import **music-metadata**:\n```js\n(async () => {\n  // Dynamically loads the ESM module in a CommonJS project\n  const mm = await import('music-metadata');\n})();\n```\n\nFor CommonJS TypeScript projects, I recommend to avoid using `commonjs` for the TypeScript compiler `module` option, \nand either use `node16` or `nodenext`, which enable utilizing [dynamic import](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/import).\n\nIf you do want to use the classic `commonjs` option, this is how you can get the _dynamic import_ to work.\n\n```js\nimport {loadEsm} from 'load-esm';\n\n(async () => {\n  // Dynamically loads the ESM module in a CommonJS project\n  const mm = await loadEsm<typeof import('music-metadata')>('music-metadata');\n})();\n```\n\nWhen you use Node.js version â‰¥ 22, which supports loading ESM modules via require, this compensates for that issue.\n\n## Frequently Asked Questions\n\n###  How can I traverse (a long) list of files?\n\nWhat is important that file parsing should be done in a sequential manner.\nIn a plain loop, due to the asynchronous character (like most JavaScript functions), it would cause all the files to run in parallel which is will cause your application to hang in no time.\nThere are multiple ways of achieving this:\n\n1.  Using recursion\n\n    ```js\n    import { parseFile } from 'music-metadata';\n\n    function parseFiles(audioFiles) {\n\n      const audioFile = audioFiles.shift();\n\n      if (audioFile) {\n        return parseFile(audioFile).then(metadata => {\n          // Do great things with the metadata\n          return parseFiles(audioFiles); // process rest of the files AFTER we are finished\n        })\n      }\n    }\n\n    ```\n\n1. Use async/await\n\n   Use [async/await](https://javascript.info/async-await)\n\n   ```js\n   import { parseFile } from 'music-metadata';\n\n   // it is required to declare the function 'async' to allow the use of await\n   async function parseFiles(audioFiles) {\n\n       for (const audioFile of audioFiles) {\n\n           // await will ensure the metadata parsing is completed before we move on to the next file\n           const metadata = await parseFile(audioFile);\n           // Do great things with the metadata\n       }\n   }\n   ```\n\n### Using music-metadata with TypeScript and module-resolution set to bundler.\n\nIf the TypeScript compiler option [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\nis set to `\"bundler\"`, it does not set the ECMAScript `\"node\"` condition, causing the Node specific function fail to import.\n\nThis is the case using Next.js. See [issue #2370](https://github.com/Borewit/music-metadata/issues/2370) how to resolve that.\n\n## Licence\n\nThis project is licensed under the [MIT License](LICENSE.txt). Feel free to use, modify, and distribute as needed.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright Â© 2025 Borewit\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/music-metadata/-/music-metadata-11.9.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/music-metadata/-/music-metadata-11.9.0.tgz",
    "hash": "",
    "integrity": "sha512-J7VqD8FY6KRcm75Fzj86FPsckiD/EdvO5OS3P+JiMf/2krP3TcAseZYfkic6eFeJ0iBhhzcdxgfu8hLW95aXXw==",
    "registry": "npm",
    "packageName": "music-metadata",
    "cacheIntegrity": "sha512-J7VqD8FY6KRcm75Fzj86FPsckiD/EdvO5OS3P+JiMf/2krP3TcAseZYfkic6eFeJ0iBhhzcdxgfu8hLW95aXXw== sha1-dBCDIxBtX7k+lpqWqRNvi8W40gk="
  },
  "registry": "npm",
  "hash": "27b56a0fc158e8a45c9bbe45ce3f3a14fb1c9220ff11dbcee4e4b73fe26231fff692b3f74dc02c79961f92273a785789d2206187371dc607eef212d6f796975f"
}