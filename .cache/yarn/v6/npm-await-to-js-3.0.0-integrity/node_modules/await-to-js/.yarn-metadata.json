{
  "manifest": {
    "name": "await-to-js",
    "version": "3.0.0",
    "description": "Async/await wrapper for easy error handling in js",
    "keywords": [
      "node",
      "async",
      "await",
      "async await"
    ],
    "main": "dist/await-to-js.umd.js",
    "module": "dist/await-to-js.es5.js",
    "typings": "dist/types/await-to-js.d.ts",
    "homepage": "https://github.com/scopsy/await-to-js#readme",
    "files": [
      "dist"
    ],
    "author": {
      "name": "Dima Grossman",
      "email": "dima@grossman.io"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/scopsy/await-to-js.git"
    },
    "license": "MIT",
    "engines": {
      "node": ">=6.0.0"
    },
    "scripts": {
      "lint": "tslint -t codeFrame 'src/**/*.ts' 'test/**/*.ts'",
      "prebuild": "rimraf dist",
      "build": "tsc && rollup -c && rimraf compiled && typedoc --out dist/docs --target es6 --theme minimal src",
      "start": "tsc -w & rollup -c -w",
      "test": "jest",
      "test:watch": "jest --watch",
      "test:prod": "npm run lint && npm run test -- --coverage --no-cache",
      "deploy-docs": "ts-node tools/gh-pages-publish",
      "report-coverage": "cat ./coverage/lcov.info | coveralls",
      "commit": "git-cz",
      "semantic-release": "semantic-release pre && npm publish && semantic-release post",
      "semantic-release-prepare": "ts-node tools/semantic-release-prepare",
      "precommit": "lint-staged"
    },
    "lint-staged": {
      "{src,test}/**/*.ts": [
        "git add"
      ]
    },
    "config": {
      "commitizen": {
        "path": "node_modules/cz-conventional-changelog"
      },
      "validate-commit-msg": {
        "types": "conventional-commit-types",
        "helpMessage": "Use \"npm run commit\" instead, we use conventional-changelog format :) (https://github.com/commitizen/cz-cli)"
      }
    },
    "jest": {
      "transform": {
        ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
      },
      "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js"
      ],
      "coveragePathIgnorePatterns": [
        "/node_modules/",
        "/test/"
      ],
      "coverageThreshold": {
        "global": {
          "branches": 90,
          "functions": 95,
          "lines": 95,
          "statements": 95
        }
      }
    },
    "devDependencies": {
      "@types/jest": "^21.1.0",
      "@types/node": "^8.0.0",
      "colors": "^1.1.2",
      "commitizen": "^2.9.6",
      "coveralls": "^2.13.1",
      "cross-env": "^5.0.1",
      "cz-conventional-changelog": "^2.0.0",
      "husky": "^0.14.0",
      "jest": "^21.0.0",
      "lint-staged": "^4.0.0",
      "lodash.camelcase": "^4.3.0",
      "prompt": "^1.0.0",
      "replace-in-file": "^3.0.0-beta.2",
      "rimraf": "^2.6.1",
      "rollup": "^0.50.0",
      "rollup-plugin-commonjs": "^8.0.2",
      "rollup-plugin-node-resolve": "^3.0.0",
      "rollup-plugin-sourcemaps": "^0.4.2",
      "semantic-release": "^8.0.0",
      "ts-jest": "^21.0.0",
      "ts-node": "^3.0.6",
      "tslint": "^5.4.3",
      "tslint-config-standard": "^6.0.0",
      "typedoc": "^0.8.0",
      "typescript": "^2.3.4",
      "validate-commit-msg": "^2.12.2"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-await-to-js-3.0.0-integrity/node_modules/await-to-js/package.json",
    "readmeFilename": "README.md",
    "readme": "# await-to-js\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][download-badge]][npm-url]\n\n> Async await wrapper for easy error handling\n\n## Pre-requisites\nYou need to use Node 7.6 (or later) or an ES7 transpiler in order to use async/await functionality.\nYou can use babel or typescript for that.\n\n## Install\n\n```sh\nnpm i await-to-js --save\n```\n\n## Usage\n\n```js\nimport to from 'await-to-js';\n// If you use CommonJS (i.e NodeJS environment), it should be:\n// const to = require('await-to-js').default;\n\nasync function asyncTaskWithCb(cb) {\n     let err, user, savedTask, notification;\n\n     [ err, user ] = await to(UserModel.findById(1));\n     if(!user) return cb('No user found');\n\n     [ err, savedTask ] = await to(TaskModel({userId: user.id, name: 'Demo Task'}));\n     if(err) return cb('Error occurred while saving task');\n\n    if(user.notificationsEnabled) {\n       [ err ] = await to(NotificationService.sendNotification(user.id, 'Task Created'));\n       if(err) return cb('Error while sending notification');\n    }\n\n    if(savedTask.assignedUser.id !== user.id) {\n       [ err, notification ] = await to(NotificationService.sendNotification(savedTask.assignedUser.id, 'Task was created for you'));\n       if(err) return cb('Error while sending notification');\n    }\n\n    cb(null, savedTask);\n}\n\nasync function asyncFunctionWithThrow() {\n  const [err, user] = await to(UserModel.findById(1));\n  if (!user) throw new Error('User not found');\n  \n}\n```\n\n## TypeScript usage\n```javascript\ninterface ServerResponse {\n  test: number;\n}\n\nconst p = Promise.resolve({test: 123});\n\nconst [err, data] = await to<ServerResponse>(p);\nconsole.log(data.test);\n```\n\n## License\n\nMIT Â© [Dima Grossman](http://blog.grossman.io) && Tomer Barnea\n\n[npm-url]: https://npmjs.org/package/await-to-js\n[npm-image]: https://img.shields.io/npm/v/await-to-js.svg?style=flat-square\n\n[travis-url]: https://travis-ci.org/scopsy/await-to-js\n[travis-image]: https://img.shields.io/travis/scopsy/await-to-js.svg?style=flat-square\n\n[coveralls-url]: https://coveralls.io/r/scopsy/await-to-js\n[coveralls-image]: https://img.shields.io/coveralls/scopsy/await-to-js.svg?style=flat-square\n\n[depstat-url]: https://david-dm.org/scopsy/await-to-js\n[depstat-image]: https://david-dm.org/scopsy/await-to-js.svg?style=flat-square\n\n[download-badge]: http://img.shields.io/npm/dm/await-to-js.svg?style=flat-square\n",
    "licenseText": "Copyright 2017 Dima Grossman <dima@grossman.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/await-to-js/-/await-to-js-3.0.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/await-to-js/-/await-to-js-3.0.0.tgz",
    "hash": "",
    "integrity": "sha512-zJAaP9zxTcvTHRlejau3ZOY4V7SRpiByf3/dxx2uyKxxor19tpmpV2QRsTKikckwhaPmr2dVpxxMr7jOCYVp5g==",
    "registry": "npm",
    "packageName": "await-to-js",
    "cacheIntegrity": "sha512-zJAaP9zxTcvTHRlejau3ZOY4V7SRpiByf3/dxx2uyKxxor19tpmpV2QRsTKikckwhaPmr2dVpxxMr7jOCYVp5g== sha1-cJKZlBhWFvRnWpGvYWfrYcySho8="
  },
  "registry": "npm",
  "hash": "cc901a3fdcf14dcbd31d195e8dabb764e63857b491a620727f7fddc71daec8ac71a2bd7db699a9576411b132a291c93085a3e6af6755a71c4cafb8ce098569e6"
}