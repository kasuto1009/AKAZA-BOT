{
  "manifest": {
    "name": "dotenv",
    "version": "16.6.1",
    "description": "Loads environment variables from .env file",
    "main": "lib/main.js",
    "types": "lib/main.d.ts",
    "exports": {
      ".": {
        "types": "./lib/main.d.ts",
        "require": "./lib/main.js",
        "default": "./lib/main.js"
      },
      "./config": "./config.js",
      "./config.js": "./config.js",
      "./lib/env-options": "./lib/env-options.js",
      "./lib/env-options.js": "./lib/env-options.js",
      "./lib/cli-options": "./lib/cli-options.js",
      "./lib/cli-options.js": "./lib/cli-options.js",
      "./package.json": "./package.json"
    },
    "scripts": {
      "dts-check": "tsc --project tests/types/tsconfig.json",
      "lint": "standard",
      "pretest": "npm run lint && npm run dts-check",
      "test": "tap run --allow-empty-coverage --disable-coverage --timeout=60000",
      "test:coverage": "tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov",
      "prerelease": "npm test",
      "release": "standard-version"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/motdotla/dotenv.git"
    },
    "homepage": "https://github.com/motdotla/dotenv#readme",
    "funding": "https://dotenvx.com",
    "keywords": [
      "dotenv",
      "env",
      ".env",
      "environment",
      "variables",
      "config",
      "settings"
    ],
    "readmeFilename": "README.md",
    "license": "BSD-2-Clause",
    "devDependencies": {
      "@types/node": "^18.11.3",
      "decache": "^4.6.2",
      "sinon": "^14.0.1",
      "standard": "^17.0.0",
      "standard-version": "^9.5.0",
      "tap": "^19.2.0",
      "typescript": "^4.8.4"
    },
    "engines": {
      "node": ">=12"
    },
    "browser": {
      "fs": false
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-dotenv-16.6.1-integrity/node_modules/dotenv/package.json",
    "readme": "<div align=\"center\">\n🎉 announcing <a href=\"https://github.com/dotenvx/dotenvx\">dotenvx</a>. <em>run anywhere, multi-environment, encrypted envs</em>.\n</div>\n\n&nbsp;\n\n<div align=\"center\">\n\n**Special thanks to [our sponsors](https://github.com/sponsors/motdotla)**\n\n<br>\n<a href=\"https://graphite.dev/?utm_source=github&utm_medium=repo&utm_campaign=dotenv\"><img src=\"https://res.cloudinary.com/dotenv-org/image/upload/v1744035073/graphite_lgsrl8.gif\" width=\"240\" alt=\"Graphite\" /></a>\n<br>\n<a href=\"https://graphite.dev/?utm_source=github&utm_medium=repo&utm_campaign=dotenv\">\n  <b>Graphite is the AI developer productivity platform helping teams on GitHub ship higher quality software, faster.</b>\n</a>\n<hr>\n</div>\n\n# dotenv [![NPM version](https://img.shields.io/npm/v/dotenv.svg?style=flat-square)](https://www.npmjs.com/package/dotenv)\n\n<img src=\"https://raw.githubusercontent.com/motdotla/dotenv/master/dotenv.svg\" alt=\"dotenv\" align=\"right\" width=\"200\" />\n\nDotenv is a zero-dependency module that loads environment variables from a `.env` file into [`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env). Storing configuration in the environment separate from code is based on [The Twelve-Factor App](https://12factor.net/config) methodology.\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n[![LICENSE](https://img.shields.io/github/license/motdotla/dotenv.svg)](LICENSE)\n[![codecov](https://codecov.io/gh/motdotla/dotenv-expand/graph/badge.svg?token=pawWEyaMfg)](https://codecov.io/gh/motdotla/dotenv-expand)\n\n* [🌱 Install](#-install)\n* [🏗️ Usage (.env)](#%EF%B8%8F-usage)\n* [🌴 Multiple Environments 🆕](#-manage-multiple-environments)\n* [🚀 Deploying (encryption) 🆕](#-deploying)\n* [📚 Examples](#-examples)\n* [📖 Docs](#-documentation)\n* [❓ FAQ](#-faq)\n* [⏱️ Changelog](./CHANGELOG.md)\n\n## 🌱 Install\n\n```bash\nnpm install dotenv --save\n```\n\nYou can also use an npm-compatible package manager like yarn, bun or pnpm:\n\n```bash\nyarn add dotenv\n```\n```bash\nbun add dotenv\n```\n```bash\npnpm add dotenv\n```\n\n## 🏗️ Usage\n\n<a href=\"https://www.youtube.com/watch?v=YtkZR0NFd1g\">\n<div align=\"right\">\n<img src=\"https://img.youtube.com/vi/YtkZR0NFd1g/hqdefault.jpg\" alt=\"how to use dotenv video tutorial\" align=\"right\" width=\"330\" />\n<img src=\"https://simpleicons.vercel.app/youtube/ff0000\" alt=\"youtube/@dotenvorg\" align=\"right\" width=\"24\" />\n</div>\n</a>\n\nCreate a `.env` file in the root of your project (if using a monorepo structure like `apps/backend/app.js`, put it in the root of the folder where your `app.js` process runs):\n\n```dosini\nS3_BUCKET=\"YOURS3BUCKET\"\nSECRET_KEY=\"YOURSECRETKEYGOESHERE\"\n```\n\nAs early as possible in your application, import and configure dotenv:\n\n```javascript\nrequire('dotenv').config()\nconsole.log(process.env) // remove this after you've confirmed it is working\n```\n\n.. [or using ES6?](#how-do-i-use-dotenv-with-import)\n\n```javascript\nimport 'dotenv/config'\n```\n\nThat's it. `process.env` now has the keys and values you defined in your `.env` file:\n\n```javascript\nrequire('dotenv').config()\n// or import 'dotenv/config' if you're using ES6\n\n...\n\ns3.getBucketCors({Bucket: process.env.S3_BUCKET}, function(err, data) {})\n```\n\n### Multiline values\n\nIf you need multiline variables, for example private keys, those are now supported (`>= v15.0.0`) with line breaks:\n\n```dosini\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n...\nKh9NV...\n...\n-----END RSA PRIVATE KEY-----\"\n```\n\nAlternatively, you can double quote strings and use the `\\n` character:\n\n```dosini\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END RSA PRIVATE KEY-----\\n\"\n```\n\n### Comments\n\nComments may be added to your file on their own line or inline:\n\n```dosini\n# This is a comment\nSECRET_KEY=YOURSECRETKEYGOESHERE # comment\nSECRET_HASH=\"something-with-a-#-hash\"\n```\n\nComments begin where a `#` exists, so if your value contains a `#` please wrap it in quotes. This is a breaking change from `>= v15.0.0` and on.\n\n### Parsing\n\nThe engine which parses the contents of your file containing environment variables is available to use. It accepts a String or Buffer and will return an Object with the parsed keys and values.\n\n```javascript\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n### Preload\n\n> Note: Consider using [`dotenvx`](https://github.com/dotenvx/dotenvx) instead of preloading. I am now doing (and recommending) so.\n>\n> It serves the same purpose (you do not need to require and load dotenv), adds better debugging, and works with ANY language, framework, or platform. – [motdotla](https://github.com/motdotla)\n\nYou can use the `--require` (`-r`) [command line option](https://nodejs.org/api/cli.html#-r---require-module) to preload dotenv. By doing this, you do not need to require and load dotenv in your application code.\n\n```bash\n$ node -r dotenv/config your_script.js\n```\n\nThe configuration options below are supported as command line arguments in the format `dotenv_config_<option>=value`\n\n```bash\n$ node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env dotenv_config_debug=true\n```\n\nAdditionally, you can use environment variables to set configuration options. Command line arguments will precede these.\n\n```bash\n$ DOTENV_CONFIG_<OPTION>=value node -r dotenv/config your_script.js\n```\n\n```bash\n$ DOTENV_CONFIG_ENCODING=latin1 DOTENV_CONFIG_DEBUG=true node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.env\n```\n\n### Variable Expansion\n\nYou need to add the value of another variable in one of your variables? Use [dotenv-expand](https://github.com/motdotla/dotenv-expand).\n\n### Command Substitution\n\nUse [dotenvx](https://github.com/dotenvx/dotenvx) to use command substitution.\n\nAdd the output of a command to one of your variables in your .env file.\n\n```ini\n# .env\nDATABASE_URL=\"postgres://$(whoami)@localhost/my_database\"\n```\n```js\n// index.js\nconsole.log('DATABASE_URL', process.env.DATABASE_URL)\n```\n```sh\n$ dotenvx run --debug -- node index.js\n[dotenvx@0.14.1] injecting env (1) from .env\nDATABASE_URL postgres://yourusername@localhost/my_database\n```\n\n### Syncing\n\nYou need to keep `.env` files in sync between machines, environments, or team members? Use [dotenvx](https://github.com/dotenvx/dotenvx) to encrypt your `.env` files and safely include them in source control. This still subscribes to the twelve-factor app rules by generating a decryption key separate from code.\n\n### Multiple Environments\n\nUse [dotenvx](https://github.com/dotenvx/dotenvx) to generate `.env.ci`, `.env.production` files, and more.\n\n### Deploying\n\nYou need to deploy your secrets in a cloud-agnostic manner? Use [dotenvx](https://github.com/dotenvx/dotenvx) to generate a private decryption key that is set on your production server.\n\n## 🌴 Manage Multiple Environments\n\nUse [dotenvx](https://github.com/dotenvx/dotenvx)\n\nRun any environment locally. Create a `.env.ENVIRONMENT` file and use `--env-file` to load it. It's straightforward, yet flexible.\n\n```bash\n$ echo \"HELLO=production\" > .env.production\n$ echo \"console.log('Hello ' + process.env.HELLO)\" > index.js\n\n$ dotenvx run --env-file=.env.production -- node index.js\nHello production\n> ^^\n```\n\nor with multiple .env files\n\n```bash\n$ echo \"HELLO=local\" > .env.local\n$ echo \"HELLO=World\" > .env\n$ echo \"console.log('Hello ' + process.env.HELLO)\" > index.js\n\n$ dotenvx run --env-file=.env.local --env-file=.env -- node index.js\nHello local\n```\n\n[more environment examples](https://dotenvx.com/docs/quickstart/environments)\n\n## 🚀 Deploying\n\nUse [dotenvx](https://github.com/dotenvx/dotenvx).\n\nAdd encryption to your `.env` files with a single command. Pass the `--encrypt` flag.\n\n```\n$ dotenvx set HELLO Production --encrypt -f .env.production\n$ echo \"console.log('Hello ' + process.env.HELLO)\" > index.js\n\n$ DOTENV_PRIVATE_KEY_PRODUCTION=\"<.env.production private key>\" dotenvx run -- node index.js\n[dotenvx] injecting env (2) from .env.production\nHello Production\n```\n\n[learn more](https://github.com/dotenvx/dotenvx?tab=readme-ov-file#encryption)\n\n## 📚 Examples\n\nSee [examples](https://github.com/dotenv-org/examples) of using dotenv with various frameworks, languages, and configurations.\n\n* [nodejs](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs)\n* [nodejs (debug on)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs-debug)\n* [nodejs (override on)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nodejs-override)\n* [nodejs (processEnv override)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-custom-target)\n* [esm](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-esm)\n* [esm (preload)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-esm-preload)\n* [typescript](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-typescript)\n* [typescript parse](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-typescript-parse)\n* [typescript config](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-typescript-config)\n* [webpack](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-webpack)\n* [webpack (plugin)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-webpack2)\n* [react](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-react)\n* [react (typescript)](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-react-typescript)\n* [express](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-express)\n* [nestjs](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-nestjs)\n* [fastify](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-fastify)\n\n## 📖 Documentation\n\nDotenv exposes four functions:\n\n* `config`\n* `parse`\n* `populate`\n* `decrypt`\n\n### Config\n\n`config` will read your `.env` file, parse the contents, assign it to\n[`process.env`](https://nodejs.org/docs/latest/api/process.html#process_process_env),\nand return an Object with a `parsed` key containing the loaded content or an `error` key if it failed.\n\n```js\nconst result = dotenv.config()\n\nif (result.error) {\n  throw result.error\n}\n\nconsole.log(result.parsed)\n```\n\nYou can additionally, pass options to `config`.\n\n#### Options\n\n##### path\n\nDefault: `path.resolve(process.cwd(), '.env')`\n\nSpecify a custom path if your file containing environment variables is located elsewhere.\n\n```js\nrequire('dotenv').config({ path: '/custom/path/to/.env' })\n```\n\nBy default, `config` will look for a file called .env in the current working directory.\n\nPass in multiple files as an array, and they will be parsed in order and combined with `process.env` (or `option.processEnv`, if set). The first value set for a variable will win, unless the `options.override` flag is set, in which case the last value set will win.  If a value already exists in `process.env` and the `options.override` flag is NOT set, no changes will be made to that value. \n\n```js  \nrequire('dotenv').config({ path: ['.env.local', '.env'] })\n```\n\n##### encoding\n\nDefault: `utf8`\n\nSpecify the encoding of your file containing environment variables.\n\n```js\nrequire('dotenv').config({ encoding: 'latin1' })\n```\n\n##### debug\n\nDefault: `false`\n\nTurn on logging to help debug why certain keys or values are not being set as you expect.\n\n```js\nrequire('dotenv').config({ debug: process.env.DEBUG })\n```\n\n##### override\n\nDefault: `false`\n\nOverride any environment variables that have already been set on your machine with values from your .env file(s). If multiple files have been provided in `option.path` the override will also be used as each file is combined with the next. Without `override` being set, the first value wins. With `override` set the last value wins. \n\n```js\nrequire('dotenv').config({ override: true })\n```\n\n##### processEnv\n\nDefault: `process.env`\n\nSpecify an object to write your environment variables to. Defaults to `process.env` environment variables.\n\n```js\nconst myObject = {}\nrequire('dotenv').config({ processEnv: myObject })\n\nconsole.log(myObject) // values from .env\nconsole.log(process.env) // this was not changed or written to\n```\n\n### Parse\n\nThe engine which parses the contents of your file containing environment\nvariables is available to use. It accepts a String or Buffer and will return\nan Object with the parsed keys and values.\n\n```js\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n#### Options\n\n##### debug\n\nDefault: `false`\n\nTurn on logging to help debug why certain keys or values are not being set as you expect.\n\n```js\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('hello world')\nconst opt = { debug: true }\nconst config = dotenv.parse(buf, opt)\n// expect a debug message because the buffer is not in KEY=VAL form\n```\n\n### Populate\n\nThe engine which populates the contents of your .env file to `process.env` is available for use. It accepts a target, a source, and options. This is useful for power users who want to supply their own objects.\n\nFor example, customizing the source:\n\n```js\nconst dotenv = require('dotenv')\nconst parsed = { HELLO: 'world' }\n\ndotenv.populate(process.env, parsed)\n\nconsole.log(process.env.HELLO) // world\n```\n\nFor example, customizing the source AND target:\n\n```js\nconst dotenv = require('dotenv')\nconst parsed = { HELLO: 'universe' }\nconst target = { HELLO: 'world' } // empty object\n\ndotenv.populate(target, parsed, { override: true, debug: true })\n\nconsole.log(target) // { HELLO: 'universe' }\n```\n\n#### options\n\n##### Debug\n\nDefault: `false`\n\nTurn on logging to help debug why certain keys or values are not being populated as you expect.\n\n##### override\n\nDefault: `false`\n\nOverride any environment variables that have already been set.\n\n## ❓ FAQ\n\n### Why is the `.env` file not loading my environment variables successfully?\n\nMost likely your `.env` file is not in the correct place. [See this stack overflow](https://stackoverflow.com/questions/42335016/dotenv-file-is-not-loading-environment-variables).\n\nTurn on debug mode and try again..\n\n```js\nrequire('dotenv').config({ debug: true })\n```\n\nYou will receive a helpful error outputted to your console.\n\n### Should I commit my `.env` file?\n\nNo. We **strongly** recommend against committing your `.env` file to version\ncontrol. It should only include environment-specific values such as database\npasswords or API keys. Your production database should have a different\npassword than your development database.\n\n### Should I have multiple `.env` files?\n\nWe recommend creating one `.env` file per environment. Use `.env` for local/development, `.env.production` for production and so on. This still follows the twelve factor principles as each is attributed individually to its own environment. Avoid custom set ups that work in inheritance somehow (`.env.production` inherits values form `.env` for example). It is better to duplicate values if necessary across each `.env.environment` file.\n\n> In a twelve-factor app, env vars are granular controls, each fully orthogonal to other env vars. They are never grouped together as “environments”, but instead are independently managed for each deploy. This is a model that scales up smoothly as the app naturally expands into more deploys over its lifetime.\n>\n> – [The Twelve-Factor App](http://12factor.net/config)\n\n### What rules does the parsing engine follow?\n\nThe parsing engine currently supports the following rules:\n\n- `BASIC=basic` becomes `{BASIC: 'basic'}`\n- empty lines are skipped\n- lines beginning with `#` are treated as comments\n- `#` marks the beginning of a comment (unless when the value is wrapped in quotes)\n- empty values become empty strings (`EMPTY=` becomes `{EMPTY: ''}`)\n- inner quotes are maintained (think JSON) (`JSON={\"foo\": \"bar\"}` becomes `{JSON:\"{\\\"foo\\\": \\\"bar\\\"}\"`)\n- whitespace is removed from both ends of unquoted values (see more on [`trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)) (`FOO=  some value  ` becomes `{FOO: 'some value'}`)\n- single and double quoted values are escaped (`SINGLE_QUOTE='quoted'` becomes `{SINGLE_QUOTE: \"quoted\"}`)\n- single and double quoted values maintain whitespace from both ends (`FOO=\"  some value  \"` becomes `{FOO: '  some value  '}`)\n- double quoted values expand new lines (`MULTILINE=\"new\\nline\"` becomes\n\n```\n{MULTILINE: 'new\nline'}\n```\n\n- backticks are supported (`` BACKTICK_KEY=`This has 'single' and \"double\" quotes inside of it.` ``)\n\n### What happens to environment variables that were already set?\n\nBy default, we will never modify any environment variables that have already been set. In particular, if there is a variable in your `.env` file which collides with one that already exists in your environment, then that variable will be skipped.\n\nIf instead, you want to override `process.env` use the `override` option.\n\n```javascript\nrequire('dotenv').config({ override: true })\n```\n\n### How come my environment variables are not showing up for React?\n\nYour React code is run in Webpack, where the `fs` module or even the `process` global itself are not accessible out-of-the-box. `process.env` can only be injected through Webpack configuration.\n\nIf you are using [`react-scripts`](https://www.npmjs.com/package/react-scripts), which is distributed through [`create-react-app`](https://create-react-app.dev/), it has dotenv built in but with a quirk. Preface your environment variables with `REACT_APP_`. See [this stack overflow](https://stackoverflow.com/questions/42182577/is-it-possible-to-use-dotenv-in-a-react-project) for more details.\n\nIf you are using other frameworks (e.g. Next.js, Gatsby...), you need to consult their documentation for how to inject environment variables into the client.\n\n### Can I customize/write plugins for dotenv?\n\nYes! `dotenv.config()` returns an object representing the parsed `.env` file. This gives you everything you need to continue setting values on `process.env`. For example:\n\n```js\nconst dotenv = require('dotenv')\nconst variableExpansion = require('dotenv-expand')\nconst myEnv = dotenv.config()\nvariableExpansion(myEnv)\n```\n\n### How do I use dotenv with `import`?\n\nSimply..\n\n```javascript\n// index.mjs (ESM)\nimport 'dotenv/config' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\nimport express from 'express'\n```\n\nA little background..\n\n> When you run a module containing an `import` declaration, the modules it imports are loaded first, then each module body is executed in a depth-first traversal of the dependency graph, avoiding cycles by skipping anything already executed.\n>\n> – [ES6 In Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/)\n\nWhat does this mean in plain language? It means you would think the following would work but it won't.\n\n`errorReporter.mjs`:\n```js\nclass Client {\n  constructor (apiKey) {\n    console.log('apiKey', apiKey)\n\n    this.apiKey = apiKey\n  }\n}\n\nexport default new Client(process.env.API_KEY)\n```\n`index.mjs`:\n```js\n// Note: this is INCORRECT and will not work\nimport * as dotenv from 'dotenv'\ndotenv.config()\n\nimport errorReporter from './errorReporter.mjs' // process.env.API_KEY will be blank!\n```\n\n`process.env.API_KEY` will be blank.\n\nInstead, `index.mjs` should be written as..\n\n```js\nimport 'dotenv/config'\n\nimport errorReporter from './errorReporter.mjs'\n```\n\nDoes that make sense? It's a bit unintuitive, but it is how importing of ES6 modules work. Here is a [working example of this pitfall](https://github.com/dotenv-org/examples/tree/master/usage/dotenv-es6-import-pitfall).\n\nThere are two alternatives to this approach:\n\n1. Preload dotenv: `node --require dotenv/config index.js` (_Note: you do not need to `import` dotenv with this approach_)\n2. Create a separate file that will execute `config` first as outlined in [this comment on #133](https://github.com/motdotla/dotenv/issues/133#issuecomment-255298822)\n\n### Why am I getting the error `Module not found: Error: Can't resolve 'crypto|os|path'`?\n\nYou are using dotenv on the front-end and have not included a polyfill. Webpack < 5 used to include these for you. Do the following:\n\n```bash\nnpm install node-polyfill-webpack-plugin\n```\n\nConfigure your `webpack.config.js` to something like the following.\n\n```js\nrequire('dotenv').config()\n\nconst path = require('path');\nconst webpack = require('webpack')\n\nconst NodePolyfillPlugin = require('node-polyfill-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.ts',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  plugins: [\n    new NodePolyfillPlugin(),\n    new webpack.DefinePlugin({\n      'process.env': {\n        HELLO: JSON.stringify(process.env.HELLO)\n      }\n    }),\n  ]\n};\n```\n\nAlternatively, just use [dotenv-webpack](https://github.com/mrsteele/dotenv-webpack) which does this and more behind the scenes for you.\n\n### What about variable expansion?\n\nTry [dotenv-expand](https://github.com/motdotla/dotenv-expand)\n\n### What about syncing and securing .env files?\n\nUse [dotenvx](https://github.com/dotenvx/dotenvx)\n\n### What if I accidentally commit my `.env` file to code?\n\nRemove it, [remove git history](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository) and then install the [git pre-commit hook](https://github.com/dotenvx/dotenvx#pre-commit) to prevent this from ever happening again. \n\n```\nbrew install dotenvx/brew/dotenvx\ndotenvx precommit --install\n```\n\n### How can I prevent committing my `.env` file to a Docker build?\n\nUse the [docker prebuild hook](https://dotenvx.com/docs/features/prebuild).\n\n```bash\n# Dockerfile\n...\nRUN curl -fsS https://dotenvx.sh/ | sh\n...\nRUN dotenvx prebuild\nCMD [\"dotenvx\", \"run\", \"--\", \"node\", \"index.js\"]\n```\n\n## Contributing Guide\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## CHANGELOG\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\n## Who's using dotenv?\n\n[These npm modules depend on it.](https://www.npmjs.com/browse/depended/dotenv)\n\nProjects that expand it often use the [keyword \"dotenv\" on npm](https://www.npmjs.com/search?q=keywords:dotenv).\n",
    "licenseText": "Copyright (c) 2015, Scott Motte\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
    "hash": "",
    "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
    "registry": "npm",
    "packageName": "dotenv",
    "cacheIntegrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow== sha1-dz8OaVJ6gxXHKF1e5zxEWdIKgCA="
  },
  "registry": "npm",
  "hash": "b81ab87a05874dc4eddf76bbdafa521b4cf71e73ee225e8da98713aca120d9ace81329768695b4cea971cacab6a4af47943207c87c9a91e61a627480c1df1ba3"
}