{
  "manifest": {
    "name": "countries-and-timezones",
    "version": "3.8.0",
    "description": "Minimalistic library to work with countries and timezones data.",
    "main": "./dist/index.js",
    "module": "./esm/index.js",
    "types": "./esm/types.d.ts",
    "exports": {
      "import": {
        "types": "./esm/types.d.ts",
        "default": "./esm/index.js"
      },
      "require": {
        "types": "./dist/types.d.ts",
        "default": "./dist/index.js"
      }
    },
    "files": [
      "dist",
      "esm"
    ],
    "scripts": {
      "build": "rollup -c && sh bin/fixTypes.sh && sh bin/addEsmPackage.sh",
      "lint:js": "xo --fix",
      "lint:json": "prettier --write \"**/*.json\"",
      "lint:md": "markdownlint \"**/*.md\" --fix --dot --ignore-path .gitignore && prettier --write \"**/*.md\"",
      "lint": "yarn lint:js && yarn lint:json && yarn lint:md",
      "prepack": "yarn run build",
      "release": "release-it",
      "prepare": "husky",
      "test:unit": "vitest",
      "test:types": "dtslint types",
      "test": "yarn run test:unit && yarn run test:types"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/manuelmhtr/countries-and-timezones.git"
    },
    "publishConfig": {
      "registry": "https://registry.npmjs.org"
    },
    "engines": {
      "node": ">=8.x",
      "npm": ">=5.x"
    },
    "keywords": [
      "Countries",
      "Timezones",
      "Country",
      "Timezone",
      "Time",
      "Date",
      "DST",
      "IANA",
      "ICANN"
    ],
    "author": {
      "name": "Manuel de la Torre"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/manuelmhtr/countries-and-timezones/issues"
    },
    "homepage": "https://github.com/manuelmhtr/countries-and-timezones#readme",
    "devDependencies": {
      "@babel/cli": "^7.13.16",
      "@babel/core": "^7.13.16",
      "@babel/preset-env": "^7.13.15",
      "@babel/register": "^7.15.3",
      "@release-it/conventional-changelog": "^8.0.2",
      "@rollup/plugin-babel": "^5.3.0",
      "@rollup/plugin-commonjs": "^18.0.0",
      "@rollup/plugin-json": "^4.1.0",
      "dtslint": "^4.1.3",
      "eslint-config-airbnb-base": "^14.2.1",
      "eslint-plugin-import": "^2.24.0",
      "husky": "^9.1.6",
      "lint-staged": "^15.2.10",
      "markdownlint-cli": "^0.42.0",
      "release-it": "^17.6.0",
      "rollup": "^2.45.2",
      "rollup-plugin-dts": "^3.0.2",
      "rollup-plugin-terser": "^7.0.2",
      "typescript": "^4.3.5",
      "vite": "^6.3.0",
      "vitest": "^3.1.1",
      "xo": "^0.59.3"
    },
    "packageManager": "yarn@1.22.21+sha1.1959a18351b811cdeedbd484a8f86c3cc3bbaf72",
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-countries-and-timezones-3.8.0-8b04d0211af3a9dda379cb3bbdcb8d73530ca438-integrity/node_modules/countries-and-timezones/package.json",
    "readmeFilename": "README.md",
    "readme": "# countries-and-timezones\n\n![GitHub Actions Status](https://img.shields.io/github/actions/workflow/status/manuelmhtr/countries-and-timezones/tests.yml?branch=main)\n![NPM Downloads](https://img.shields.io/npm/dm/countries-and-timezones)\n![License: MIT](https://img.shields.io/badge/license-MIT-blue?style=flat)\n\n> Minimalistic library to work with countries and timezones data. Updated with the [IANA timezones database](https://www.iana.org/time-zones).\n\n## Usage\n\n### NodeJS\n\nInstall with npm or yarn:\n\n```bash\nnpm install --save countries-and-timezones\n```\n\n### Browser\n\nAdd the following script to your project (only ~9kb):\n\n```html\n<!-- Latest version -->\n<script\n  src=\"https://cdn.jsdelivr.net/gh/manuelmhtr/countries-and-timezones@latest/dist/index.min.js\"\n  type=\"text/javascript\"\n></script>\n\n<!-- Or specify a version -->\n<script\n  src=\"https://cdn.jsdelivr.net/gh/manuelmhtr/countries-and-timezones@v3.8.0/dist/index.min.js\"\n  type=\"text/javascript\"\n></script>\n\n<!-- This will export a variable named \"ct\": -->\n<script type=\"text/javascript\">\n  var data = ct.getCountry(\"MX\");\n  console.log(data);\n</script>\n```\n\n## API\n\n### `.getCountry(id, options = {})`\n\nReturns a country referenced by its `id`.\n\nAccepts a parameter with [`options`](#options).\n\n#### Example\n\n```javascript\nconst ct = require(\"countries-and-timezones\");\n\nconst country = ct.getCountry(\"DE\");\nconsole.log(country);\n\n/*\nPrints:\n\n{\n  id: 'DE',\n  name: 'Germany',\n  timezones: [ 'Europe/Berlin', 'Europe/Zurich' ]\n}\n\n*/\n```\n\n### `.getTimezone(name)`\n\nReturns a timezone referenced by its `name`.\n\n#### Example\n\n```javascript\nconst ct = require(\"countries-and-timezones\");\n\nconst timezone = ct.getTimezone(\"America/Los_Angeles\");\nconsole.log(timezone);\n\n/*\nPrints:\n\n{\n  name: 'America/Los_Angeles',\n  countries: [ 'US' ],\n  utcOffset: -480,\n  utcOffsetStr: '-08:00',\n  dstOffset: -420,\n  dstOffsetStr: '-07:00',\n  aliasOf: null\n}\n\n*/\n```\n\n### `.getAllCountries(options = {})`\n\nReturns an object with the data of all countries.\n\nAccepts a parameter with [`options`](#options).\n\n#### Example\n\n```javascript\nconst ct = require(\"countries-and-timezones\");\n\nconst countries = ct.getAllCountries();\nconsole.log(countries);\n\n/*\nPrints:\n\n{\n  AD: {\n    id: 'AD',\n    name: 'Andorra',\n    timezones: [ 'Europe/Andorra' ]\n  },\n  AE: {\n    id: 'AE',\n    name: 'United Arab Emirates',\n    timezones: [ 'Asia/Dubai' ]\n  },\n  AF: {\n    id: 'AF',\n    name: 'Afghanistan',\n    timezones: [ 'Asia/Kabul' ]\n  },\n  AG: {\n    id: 'AG',\n    name: 'Antigua and Barbuda',\n    timezones: [ 'America/Puerto_Rico' ]\n  },\n  ...\n}\n\n*/\n```\n\n### `.getAllTimezones(options = {})`\n\nReturns an object with the data of all timezones.\n\nAccepts a parameter with [`options`](#options).\n\n#### Example\n\n```javascript\nconst ct = require(\"countries-and-timezones\");\n\nconst timezones = ct.getAllTimezones();\nconsole.log(timezones);\n\n/*\nPrints:\n\n{\n  \"Africa/Abidjan\": {\n    \"name\": \"Africa/Abidjan\",\n    \"countries\": [\n      \"CI\", \"BF\", \"GH\",\n      \"GM\", \"GN\", \"ML\",\n      \"MR\", \"SH\", \"SL\",\n      \"SN\", \"TG\"\n    ],\n    \"utcOffset\": 0,\n    \"utcOffsetStr\": \"+00:00\",\n    \"dstOffset\": 0,\n    \"dstOffsetStr\": \"+00:00\",\n    \"aliasOf\": null\n  },\n  \"Africa/Algiers\": {\n    \"name\": \"Africa/Algiers\",\n    \"countries\": [\n      \"DZ\"\n    ],\n    \"utcOffset\": 60,\n    \"utcOffsetStr\": \"+01:00\",\n    \"dstOffset\": 60,\n    \"dstOffsetStr\": \"+01:00\",\n    \"aliasOf\": null\n  },\n  \"Africa/Bissau\": {\n    \"name\": \"Africa/Bissau\",\n    \"countries\": [\n      \"GW\"\n    ],\n    \"utcOffset\": 0,\n    \"utcOffsetStr\": \"+00:00\",\n    \"dstOffset\": 0,\n    \"dstOffsetStr\": \"+00:00\",\n    \"aliasOf\": null\n  },\n  ...\n}\n\n*/\n```\n\n### `.getTimezonesForCountry(id, options = {})`\n\nReturns an array with all the timezones of a country given its `id`.\n\nAccepts a parameter with [`options`](#options).\n\n#### Example\n\n```javascript\nconst ct = require(\"countries-and-timezones\");\n\nconst timezones = ct.getTimezonesForCountry(\"MX\");\nconsole.log(timezones);\n\n/*\nPrints:\n\n[\n  {\n    \"name\": \"America/Bahia_Banderas\",\n    \"countries\": [ \"MX\" ],\n    \"utcOffset\": -360,\n    \"utcOffsetStr\": \"-06:00\",\n    \"dstOffset\": -300,\n    \"dstOffsetStr\": \"-05:00\",\n    \"aliasOf\": null\n  },\n  {\n    \"name\": \"America/Cancun\",\n    \"countries\": [ \"MX\" ],\n    \"utcOffset\": -300,\n    \"utcOffsetStr\": \"-05:00\",\n    \"dstOffset\": -300,\n    \"dstOffsetStr\": \"-05:00\",\n    \"aliasOf\": null\n  },\n  {\n    \"name\": \"America/Chihuahua\",\n    \"countries\": [ \"MX\" ],\n    \"utcOffset\": -420,\n    \"utcOffsetStr\": \"-07:00\",\n    \"dstOffset\": -360,\n    \"dstOffsetStr\": \"-06:00\",\n    \"aliasOf\": null\n  },\n  ...\n}\n\n*/\n```\n\n### `.getCountriesForTimezone(name, options = {})`\n\nReturns a list of the countries that uses a timezone given its `name`. When a timezone has multiple countries **the first element is more relevant** due to its geographical location.\n\nAccepts a parameter with [`options`](#options).\n\n#### Example\n\n```javascript\nconst ct = require(\"countries-and-timezones\");\n\nconst timezone = ct.getCountriesForTimezone(\"Europe/Zurich\");\nconsole.log(timezone);\n\n/*\nPrints:\n\n[\n  {\n    \"id\": \"CH\",\n    \"name\": \"Switzerland\",\n    \"timezones\": [\n      \"Europe/Zurich\"\n    ]\n  },\n  {\n    \"id\": \"DE\",\n    \"name\": \"Germany\",\n    \"timezones\": [\n      \"Europe/Berlin\",\n      \"Europe/Zurich\"\n    ]\n  },\n  {\n    \"id\": \"LI\",\n    \"name\": \"Liechtenstein\",\n    \"timezones\": [\n      \"Europe/Zurich\"\n    ]\n  }\n]\n\n*/\n```\n\n### `.getCountryForTimezone(name, options = {})`\n\nReturns a the most relevant country (due to its geographical location) that uses a timezone given its `name`.\n\nAccepts a parameter with [`options`](#options).\n\n#### Example\n\n```javascript\nconst ct = require(\"countries-and-timezones\");\n\nconst timezone = ct.getCountryForTimezone(\"Europe/Zurich\");\nconsole.log(timezone);\n\n/*\nPrints:\n\n{\n  \"id\": \"CH\",\n  \"name\": \"Switzerland\",\n  \"timezones\": [\n    \"Europe/Zurich\"\n  ]\n}\n\n*/\n```\n\n### `options`\n\nAvailable options for functions are:\n\n| Parameter    | Type    | Description                                                                                                          |\n| ------------ | ------- | -------------------------------------------------------------------------------------------------------------------- |\n| `deprecated` | Boolean | Indicates if the result should include deprecated timezones or not. By default no deprecated timezones are included. |\n\n## Data models\n\n### Country\n\nA country is defined by the following parameters:\n\n| Parameter   | Type          | Description                                                              |\n| ----------- | ------------- | ------------------------------------------------------------------------ |\n| `id`        | String        | The country [ISO 3166-1 code](https://es.wikipedia.org/wiki/ISO_3166-1). |\n| `name`      | String        | Preferred name of the country.                                           |\n| `timezones` | Array[String] | The list of timezones used in the country.                               |\n\n```javascript\n{\n  id: 'MX',\n  name: 'Mexico',\n  timezones: [\n    'America/Bahia_Banderas',\n    'America/Cancun',\n    'America/Chihuahua',\n    'America/Hermosillo',\n    'America/Matamoros',\n    'America/Mazatlan',\n    'America/Merida',\n    'America/Mexico_City',\n    'America/Monterrey',\n    'America/Ojinaga',\n    'America/Tijuana'\n  ]\n}\n```\n\n### Timezone\n\nA timezone is defined by the following parameters:\n\n| Parameter      | Type     | Description                                                                                                                                                                                                                                                                                                                     |\n| -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `name`         | String   | The name of the timezone, from [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).                                                                                                                                                                                                                     |\n| `countries`    | [String] | A list of [ISO 3166-1 codes](https://es.wikipedia.org/wiki/ISO_3166-1) of the countries where it's used. `Etc/*`, `GMT` and `UTC` timezones don't have associated countries.                                                                                                                                                    |\n| `utcOffset`    | Number   | The difference in **minutes** between the timezone and [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).                                                                                                                                                                                                         |\n| `utcOffsetStr` | String   | The difference in hours and minutes between the timezone and [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time), expressed as string with format: `±[hh]:[mm]`.                                                                                                                                                    |\n| `dstOffset`    | Number   | The difference in **minutes** between the timezone and [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) during daylight saving time ([DST](https://en.wikipedia.org/wiki/Daylight_saving_time)). When `utcOffset` and `dstOffset` are the same, means that the timezone does not observe a daylight saving time. |\n| `dstOffsetStr` | String   | The difference in hours and minutes between the timezone and [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) during daylight saving time ([DST](https://en.wikipedia.org/wiki/Daylight_saving_time), expressed as string with format: `±[hh]:[mm]`.                                                             |\n| `aliasOf`      | String   | The `name` of a primary timezone in case this is an alias. `null` means this is a primary timezone.                                                                                                                                                                                                                             |\n| `deprecated`   | Boolean  | `true` when the timezone has been deprecated, otherwise this property is not returned.                                                                                                                                                                                                                                          |\n\n```javascript\n{\n  name: 'Asia/Tel_Aviv',\n  countries: [ 'IL' ],\n  utcOffset: 120,\n  utcOffsetStr: '+02:00',\n  dstOffset: 180,\n  dstOffsetStr: '+03:00',\n  aliasOf: 'Asia/Jerusalem',\n  deprecated: true\n}\n```\n\n## Related projects\n\n- [countries-db](https://www.npmjs.com/package/countries-db): Minimalistic lib with countries data.\n- [location-by-ip](https://www.npmjs.com/package/location-by-ip): Get the location of any IP address.\n\n## Support\n\nConsider [sponsoring this project](https://github.com/sponsors/manuelmhtr).\n\n## Working on something more complex?\n\nMeet [Spott](https://spott.dev):\n\n- **Search any city, country or administrative division** in the world. By full strings or autocompletion.\n- Find a place by an IP address.\n- Access to more than 240,000 geographical places. In more than 20 languages.\n\n[![Spott API for cities, countries and administrative divisions](https://spott-assets.s3.amazonaws.com/marketing/banner-720px.png)](https://spott.dev)\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2020 Manuel de la Torre\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/countries-and-timezones/-/countries-and-timezones-3.8.0.tgz#8b04d0211af3a9dda379cb3bbdcb8d73530ca438",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/countries-and-timezones/-/countries-and-timezones-3.8.0.tgz",
    "hash": "8b04d0211af3a9dda379cb3bbdcb8d73530ca438",
    "integrity": "sha512-+Ze9h5f4dQpUwbzTm0DEkiPiZyim9VHV4/mSnT4zNYJnrnfwsKjAZPtnp7J5VzejCDgySs+2SSc6MDdCnD43GA==",
    "registry": "npm",
    "packageName": "countries-and-timezones",
    "cacheIntegrity": "sha512-+Ze9h5f4dQpUwbzTm0DEkiPiZyim9VHV4/mSnT4zNYJnrnfwsKjAZPtnp7J5VzejCDgySs+2SSc6MDdCnD43GA== sha1-iwTQIRrzqd2jecs7vcuNc1MMpDg="
  },
  "registry": "npm",
  "hash": "8b04d0211af3a9dda379cb3bbdcb8d73530ca438"
}