{
  "manifest": {
    "name": "node-id3",
    "version": "0.2.9",
    "description": "Pure JavaScript ID3v2 Tag writer and reader",
    "author": {
      "name": "Jan Metzger",
      "email": "jan.metzger@gmx.net"
    },
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Zazama/node-id3.git"
    },
    "bugs": {
      "url": "https://github.com/Zazama/node-id3/issues"
    },
    "keywords": [
      "ID3",
      "ID3v2",
      "metadata",
      "tags",
      "mp3",
      "audio",
      "music"
    ],
    "licenses": [
      {
        "type": "MIT",
        "url": "https://github.com/Zazama/node-id3/raw/master/LICENSE"
      }
    ],
    "homepage": "https://github.com/Zazama/node-id3#readme",
    "scripts": {
      "test": "mocha",
      "markdownlint": "markdownlint --fix README.md CHANGELOG.md",
      "eslint": "eslint **/*.js",
      "eslint-fix": "eslint --fix **/*.js"
    },
    "license": "MIT",
    "dependencies": {
      "iconv-lite": "0.6.2"
    },
    "devDependencies": {
      "chai": "^4.2.0",
      "chai-as-promised": "^7.1.1",
      "eslint": "^8.28.0",
      "eslint-plugin-mocha": "^10.1.0",
      "jsmediatags": "^3.9.3",
      "markdownlint-cli": "^0.32.2",
      "mocha": "8.1.3"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-node-id3-0.2.9-integrity/node_modules/node-id3/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-id3\n\n![GitHub package.json version](https://img.shields.io/github/package-json/v/zazama/node-id3?style=flat-square)\n![Travis (.org)](https://img.shields.io/travis/zazama/node-id3?style=flat-square)\n![Codecov](https://img.shields.io/codecov/c/github/Zazama/node-id3?style=flat-square)\n![Code Climate maintainability](https://img.shields.io/codeclimate/maintainability-percentage/Zazama/node-id3?style=flat-square)\n![npm](https://img.shields.io/npm/dt/node-id3?style=flat-square)\n\nnode-id3 is an ID3-Tag library written in JavaScript.\n\n## Installation\n\n```sh\nnpm install node-id3\n```\n\n## Usage\n\n```javascript\nconst NodeID3 = require('node-id3')\n\n/* Variables found in the following usage examples */\n\nconst filebuffer = Buffer.from(\"Some Buffer of a (mp3) file\")\nconst filepath = './path/to/(mp3)file'\n\nconst tags = {\n    title: \"Tomorrow\",\n    artist: \"Kevin Penkin\",\n    album: \"TVアニメ「メイドインアビス」オリジナルサウンドトラック\",\n    APIC: \"./example/mia_cover.jpg\",\n    TRCK: \"27\"\n}\n```\n\n### Write tags to file\n\nIf you have an existing file/buffer (e.g. an mp3 file) you can use the write method to write your tags into it. It will remove existing tags and add yours.\n\n```javascript\nconst success = NodeID3.write(tags, filepath) // Returns true/Error\n// async version\nNodeID3.write(tags, file, function(err) {  })\n```\n\n### Write tags to filebuffer\n\n```javascript\nconst success = NodeID3.write(tags, filebuffer) // Returns Buffer\n// async version\nNodeID3.write(tags, file, function(err, buffer) {  })\n```\n\n### Update existing tags of file or buffer\n\nThe update method works like the write method but will keep or overwrite existing tags instead of removing them.\n\n```javascript\nconst success = NodeID3.update(tags, filepath) //  Returns true/Error\nconst success = NodeID3.update(tags, filebuffer) //  Returns Buffer\nNodeID3.update(tags, filepath, function(err, buffer) {  })\nNodeID3.update(tags, filebuffer, function(err, buffer) {  })\n\n// Possible options\nconst options = {\n    include: ['TALB', 'TIT2'],    // only read the specified tags (default: all)\n    exclude: ['APIC']            // don't read the specified tags (default: [])\n}\n\nNodeID3.update(tags, filepath, options)\nconst success = NodeID3.update(tags, filebuffer, options)\nNodeID3.update(tags, filepath, options, function(err, buffer) {  })\nNodeID3.update(tags, filebuffer, options, function(err, buffer) {  })\n```\n\n### Create tags as buffer\n\nThe create method will return a buffer of your ID3-Tag. You can use it to e.g. write it into a file yourself instead of using the write method.\n\n```javascript\nconst success = NodeID3.create(tags) // Returns ID3-Tag Buffer\n// async version\nNodeID3.create(tags, function(buffer) {  })\n```\n\n### Reading ID3-Tags\n\n```javascript\nconst tags = NodeID3.read(file)\nNodeID3.read(file, function(err, tags) {})\n/*\n    tags: {\n        title: \"Tomorrow\",\n        artist: \"Kevin Penkin\",\n        image: {\n          mime: \"image/jpeg\",\n          type: {\n            id: 3,\n            name: \"front cover\"\n          },\n          description: String,\n          imageBuffer: Buffer\n        },\n        raw: {\n          TIT2: \"Tomorrow\",\n          TPE1: \"Kevin Penkin\",\n          APIC: Object (See above)\n        }\n      }\n*/\n\n// Possible options\nconst options = {\n    include: ['TALB', 'TIT2'],    // only read the specified tags (default: all)\n    exclude: ['APIC'],            // don't read the specified tags (default: [])\n    onlyRaw: false,               // only return raw object (default: false)\n    noRaw: false                  // don't generate raw object (default: false)\n}\nconst tags = NodeID3.read(file, options)\n```\n\n### Removing ID3-Tags from file/buffer\n\n```javascript\nconst success = NodeID3.removeTags(filepath)  //  returns true/Error\nNodeID3.removeTags(filepath, function(err) {  })\n\nlet bufferWithoutID3Frame = NodeID3.removeTagsFromBuffer(filebuffer)  //  Returns Buffer\n```\n\n### Using Promises (available starting with v0.2)\n\n```javascript\nconst NodeID3Promise = require('node-id3').Promise\n\nNodeID3.write(tags, fileOrBuffer)\nNodeID3.update(tags, fileOrBuffer)\nNodeID3.create(tags)\nNodeID3.read(filepath)\nNodeID3.removeTags(filepath)\n```\n\n## Supported aliases/fields\n\n```text\nalbum:\nbpm:\ncomposer:\ngenre:\ncopyright:\nencodingTime:\ndate:\nplaylistDelay:\noriginalReleaseTime:\nrecordingTime:\nreleaseTime:\ntaggingTime:\nencodedBy:\ntextWriter:\nfileType:\ninvolvedPeopleList:\ntime:\ncontentGroup:\ntitle:\nsubtitle:\ninitialKey:\nlanguage:\nlength:\nmusicianCreditsList:\nmediaType:\nmood:\noriginalTitle:\noriginalFilename:\noriginalTextwriter:\noriginalArtist:\noriginalYear:\nfileOwner:\nartist:\nperformerInfo: // (album artist)\nconductor:\nremixArtist:\npartOfSet:\nproducedNotice:\npublisher:\ntrackNumber:\nrecordingDates:\ninternetRadioName:\ninternetRadioOwner:\nalbumSortOrder:\nperformerSortOrder:\ntitleSortOrder:\nsize:\nISRC:\nencodingTechnology:\nsetSubtitle:\nyear:\ncomment: {\n  language: \"eng\",\n  text: \"mycomment\"\n}\nunsynchronisedLyrics: {\n  language: \"eng\",\n  text: \"lyrics\"\n}\n// See https://id3.org/ documentation for more details.\nsynchronisedLyrics: [{\n  language: \"eng\",\n  timeStampFormat: TagConstants.TimeStampFormat.MILLISECONDS,\n  contentType: TagConstants.SynchronisedLyrics.ContentType.LYRICS,\n  shortText: \"Content descriptor\",\n  synchronisedText: [{\n    text: \"part 1\",\n    timeStamp: 0 // Must be a positive integer value\n  }, {\n    text: \"part 2\",\n    timeStamp: 1000 // Must be a positive integer value\n  }]\n}]\nuserDefinedText: [{\n  description: \"txxx name\",\n  value: \"TXXX value text\"\n}, {\n  description: \"txxx name 2\",\n  value: \"TXXX value text 2\"\n}] // Care, update doesn't delete non-passed array items!\nimage: {\n  mime: \"image/png\",\n  type: {\n    id: TagConstants.AttachedPicture.PictureType.FRONT_COVER\n  }, // See https://en.wikipedia.org/wiki/ID3#ID3v2_embedded_image_extension\n  description: \"image description\",\n  imageBuffer: (file buffer)\n},\npopularimeter: {\n  email: \"mail@example.com\",\n  rating: 192,  // 1-255\n  counter: 12\n},\nprivate: [{\n  ownerIdentifier: \"AbC\",\n  data: \"asdoahwdiohawdaw\"\n}, {\n  ownerIdentifier: \"AbCSSS\",\n  data: Buffer.from([0x01, 0x02, 0x05])\n}],\nuniqueFileIdentifier: [{\n  ownerIdentifier: \"owner-id-1\",\n  identifier: Buffer.from(\"identifier-1\")\n}], {\n  ownerIdentifier: \"owner-id-2\",\n  identifier: Buffer.from(\"identifier-2\")\n},\nchapter: [{\n  elementID: \"Hey!\", // THIS MUST BE UNIQUE!\n  startTimeMs: 5000,\n  endTimeMs: 8000,\n  startOffsetBytes: 123, // OPTIONAL!\n  endOffsetBytes: 456,   // OPTIONAL!\n  tags: {                // OPTIONAL\n    title: \"abcdef\",\n    artist: \"akshdas\"\n  }\n}],\ntableOfContents: [{\n  elementID: \"toc1\",    // THIS MUST BE UNIQUE!\n  isOrdered: false,     // OPTIONAL, tells a player etc. if elements are in a specific order\n  elements: ['chap1'],  // OPTIONAL but most likely needed, contains the chapter/tableOfContents elementIDs\n  tags: {               // OPTIONAL\n    title: \"abcdef\"\n  }\n}],\ncommercialUrl: [\"commercialurl.com\"], // array or single string\ncopyrightUrl: \"example.com\",\nfileUrl: \"example.com\",\nartistUrl: [\"example.com\"], // array or single string\naudioSourceUrl: \"example.com\",\nradioStationUrl: \"example.com\",\npaymentUrl: \"example.com\",\npublisherUrl: \"example.com\",\nuserDefinedUrl: [{\n  description: \"URL description\"\n  url: \"https://example.com/\"\n}], // array or single object\neventTimingCodes: {\n  timeStampFormat: TagConstants.TimeStampFormat.MILLISECONDS,\n  keyEvents: [{\n    type: TagConstants.EventTimingCodes.EventType.INTRO_START,\n    timeStamp: 1000 // Must be a positive integer value\n  }]\n},\ncommercialFrame: [{\n  prices: {\n    'EUR': 15,\n    'DKK': 17.922\n  },\n  validUntil: { year: 2023, month: 9, day: 1},\n  contactUrl: 'https://example.com',\n  receivedAs: TagConstants.CommercialFrame.ReceivedAs.OTHER,\n  nameOfSeller: 'Someone',\n  description: 'Something',\n  sellerLogo: {\n    mimeType: 'image/',\n    picture: Buffer.alloc(15, 0x13)\n  }\n}]\ngeneralObject: [{\n  mimeType: 'application/octet-stream',\n  filename: 'filename',\n  contentDescription: 'description',\n  encapsulatedObject: Buffer.alloc(15, 0x13),\n}]\n```\n\n### Supported raw IDs\n\nYou can also use the currently supported raw tags like TALB instead of album etc.\n\n```text\nalbum:                \"TALB\"\nbpm:                  \"TBPM\"\ncomposer:             \"TCOM\"\ngenre:                \"TCON\"\ncopyright:            \"TCOP\"\ndate:                 \"TDAT\"\nencodingTime:         \"TDEN\"\nplaylistDelay:        \"TDLY\"\noriginalReleaseTime:  \"TDOR\"\nrecordingTime:        \"TDRC\"\nreleaseTime:          \"TDRL\"\ntaggingTime:          \"TDTG\"\nencodedBy:            \"TENC\"\ntextWriter:           \"TEXT\"\nfileType:             \"TFLT\"\ntime:                 \"TIME\"\ninvolvedPeopleList:   \"TIPL\"\ncontentGroup:         \"TIT1\"\ntitle:                \"TIT2\"\nsubtitle:             \"TIT3\"\ninitialKey:           \"TKEY\"\nlanguage:             \"TLAN\"\nlength:               \"TLEN\"\nmusicianCreditsList:  \"TMCL\"\nmediaType:            \"TMED\"\nmood:                 \"TMOO\"\noriginalTitle:        \"TOAL\"\noriginalFilename:     \"TOFN\"\noriginalTextwriter:   \"TOLY\"\noriginalArtist:       \"TOPE\"\noriginalYear:         \"TORY\"\nfileOwner:            \"TOWN\"\nartist:               \"TPE1\"\nperformerInfo:        \"TPE2\"    (album artist)\nconductor:            \"TPE3\"\nremixArtist:          \"TPE4\"\npartOfSet:            \"TPOS\"\nproducedNotice:       \"TPRO\"\npublisher:            \"TPUB\"\ntrackNumber:          \"TRCK\"\nrecordingDates:       \"TRDA\"\ninternetRadioName:    \"TRSN\"\ninternetRadioOwner:   \"TRSO\"\nsize:                 \"TSIZ\"\nalbumSortOrder:       \"TSOA\"\nperformerSortOrder:   \"TSOP\"\ntitleSortOrder:       \"TSOT\"\nISRC:                 \"TSRC\"\nencodingTechnology:   \"TSSE\"\nsetSubtitle:          \"TSST\"\nyear:                 \"TYER\"\ncomment:              \"COMM\"\nimage:                \"APIC\"\nunsynchronisedLyrics  \"USLT\"\nsynchronisedLyrics    \"SYLT\"\nuserDefinedText       \"TXXX\"\npopularimeter         \"POPM\"\nprivate               \"PRIV\"\nuniqueFileIdentifier  \"UFID\"\nchapter               \"CHAP\"\ntableOfContents       \"CTOC\"\ncommercialUrl         \"WCOM\"\ncopyrightUrl          \"WCOP\"\nfileUrl               \"WOAF\"\nartistUrl             \"WOAR\"\naudioSourceUrl        \"WOAS\"\nradioStationUrl       \"WORS\"\npaymentUrl            \"WPAY\"\npublisherUrl          \"WPUB\"\nuserDefinedUrl        \"WXXX\"\neventTimingCodes      \"ETCO\"\ncommercialFrame       \"COMR\"\ngeneralObject         \"GEOB\"\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Jan Metzger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/node-id3/-/node-id3-0.2.9.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/node-id3/-/node-id3-0.2.9.tgz",
    "hash": "",
    "integrity": "sha512-dSxhuxrkkGVRgUhDHFxdY0pilzOREcodO01HcZWfaRkCaPWGmo0dOgD8ygyL6ln4Iv4cmfRxAWn1WD9bIB9Bhw==",
    "registry": "npm",
    "packageName": "node-id3",
    "cacheIntegrity": "sha512-dSxhuxrkkGVRgUhDHFxdY0pilzOREcodO01HcZWfaRkCaPWGmo0dOgD8ygyL6ln4Iv4cmfRxAWn1WD9bIB9Bhw== sha1-l2rKxBpeHFYZxs4HYJdMWRzB9To="
  },
  "registry": "npm",
  "hash": "752c61bb1ae49065518148431c5c5d634a6297339111ca1d3b4d4771959f69190268f5869a8d1d3a00fcca0c8bea59f822fe1c99f4710169f5583f5b201f4187"
}