{
  "manifest": {
    "name": "promise-coalesce",
    "version": "1.1.2",
    "description": "Coalesces multiple promises for the same identifier into a single request",
    "keywords": [
      "promise",
      "coalesce",
      "async"
    ],
    "author": {
      "name": "Doug Ayers",
      "url": "https://github.com/douglascayers"
    },
    "repository": {
      "url": "git+https://github.com/douglascayers/promise-coalesce.git"
    },
    "bugs": {
      "url": "https://github.com/douglascayers/promise-coalesce/issues"
    },
    "homepage": "https://github.com/douglascayers/promise-coalesce#readme",
    "license": "BSD-3-Clause",
    "scripts": {
      "clean": "rm -rf dist && rm -rf coverage",
      "prettier": "prettier --check --ignore-unknown --no-error-on-unmatched-pattern .",
      "prettier:fix": "yarn prettier --write",
      "lint": "eslint --ext .ts,.tsx,.js,.json .",
      "lint:fix": "yarn lint --fix",
      "lint:staged": "lint-staged --concurrent 1",
      "format": "yarn prettier:fix && yarn lint:fix",
      "build": "yarn clean && tsc",
      "prepare": "yarn build && npx husky install",
      "test": "jest",
      "semantic-release": "semantic-release"
    },
    "files": [
      "dist"
    ],
    "release": {
      "branches": [
        "main"
      ],
      "plugins": [
        "@semantic-release/commit-analyzer",
        "@semantic-release/release-notes-generator",
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/git",
        "@semantic-release/github"
      ]
    },
    "exports": "./dist/index.js",
    "types": "./dist/index.d.ts",
    "engines": {
      "node": ">=16"
    },
    "dependencies": {},
    "devDependencies": {
      "@commitlint/cli": "^18.0.0",
      "@commitlint/config-conventional": "^18.0.0",
      "@semantic-release/changelog": "^6.0.3",
      "@semantic-release/git": "^10.0.1",
      "@types/jest": "^29.5.6",
      "@types/node": "^18.17.19",
      "@typescript-eslint/eslint-plugin": "^6.9.0",
      "@typescript-eslint/parser": "^6.9.0",
      "eslint": "^8.52.0",
      "eslint-config-prettier": "^9.0.0",
      "eslint-plugin-import": "^2.29.0",
      "eslint-plugin-prettier": "^5.0.1",
      "eslint-plugin-unused-imports": "^3.0.0",
      "husky": "^8.0.3",
      "jest": "^29.7.0",
      "lint-staged": "^15.0.2",
      "prettier": "^3.0.3",
      "semantic-release": "^22.0.5",
      "ts-jest": "^29.1.1",
      "ts-node": "^10.9.1",
      "typescript": "^5.2.2"
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "lint-staged": {
      "*.{ts,tsx,js,json}": "yarn lint:fix",
      "*": "yarn prettier:fix"
    },
    "_registry": "npm",
    "_loc": "/home/container/.cache/yarn/v6/npm-promise-coalesce-1.1.2-5d3bc4d0b2cf2e41e9df7cbeb6519b2a09459e3d-integrity/node_modules/promise-coalesce/package.json",
    "readmeFilename": "README.md",
    "readme": "## promise-coalesce\n\nCoalesces multiple promises for the same identifier into a single request.\n\nReduces load on downstream systems when requests occur at the same time,\nwithout dropping requests or needing exclusion locks or wait-and-retry attempts.\n\n## Install\n\nWith npm:\n\n```sh\nnpm install promise-coalesce\n```\n\nWith yarn:\n\n```sh\nyarn add promise-coalesce\n```\n\n## Usage\n\n```ts\nimport { coalesceAsync } from 'promise-coalesce';\n\nawait coalesceAsync('some-group-key', async () => {\n  /* your logic */\n});\n```\n\n## Example\n\n**Cache Miss Relief Buffer**\n\n```ts\nimport { coalesceAsync } from 'promise-coalesce';\n\n// Imagine you want to retrieve a value, and you have a cache to speed things up.\n// If the value isn't in the cache, you'll need to get it from the source system,\n// which can be a time-consuming process like a database query or an API request.\nasync function getValue(cacheKey: string): Promise<YourData> {\n  // When multiple requests try to fetch the same value from the cache at the same time,\n  // because of the way async operations work, yielding the event loop at each `await`,\n  // then they will all try to get it from the cache.\n  let cachedValue = await cache.get(cacheKey);\n  // They will take turns checking the condition and all see that the value is missing.\n  if (!cachedValue) {\n    // Here's where `coalesceAsync` comes to the rescue!\n    // Instead of making multiple expensive calls to the source system,\n    // we use `coalesceAsync`` to ensure it's called only once, and other requests\n    // wanting the same cache key wait for the result.\n    cachedValue = await coalesceAsync<YourData>(cacheKey, async () => {\n      // Now, we fetch the value from the source system.\n      const sourceValue = await getSourceValue();\n      // We also cache it for future use.\n      await cache.set(cacheKey, sourceValue, ttl);\n      // Now, the value is in the cache, and future requests will avoid calling the source system\n      // until the cached data expires (based on TTL).\n      return sourceValue;\n    });\n  }\n  return cachedValue;\n}\n```\n\n## Credits\n\nThis solution is inspired by [node-cache-manager](https://github.com/node-cache-manager/node-cache-manager)'s\n[CallbackFiller](https://github.com/node-cache-manager/node-cache-manager/blob/4.1.0/lib/callback_filler.js) from the `v4.x` line.\n\nIt was [removed](https://github.com/node-cache-manager/node-cache-manager/issues/417)\nin the `v5.x` line, and `promise-coalesce` is an attempt to recover that feature\nwhile also being generic enough for other applications.\n",
    "licenseText": "BSD 3-Clause License\n\nCopyright (c) 2023, Doug Ayers\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promise-coalesce/-/promise-coalesce-1.1.2.tgz#5d3bc4d0b2cf2e41e9df7cbeb6519b2a09459e3d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promise-coalesce/-/promise-coalesce-1.1.2.tgz",
    "hash": "5d3bc4d0b2cf2e41e9df7cbeb6519b2a09459e3d",
    "integrity": "sha512-zLaJ9b8hnC564fnJH6NFSOGZYYdzrAJn2JUUIwzoQb32fG2QAakpDNM+CZo1km6keXkRXRM+hml1BFAPVnPkxg==",
    "registry": "npm",
    "packageName": "promise-coalesce",
    "cacheIntegrity": "sha512-zLaJ9b8hnC564fnJH6NFSOGZYYdzrAJn2JUUIwzoQb32fG2QAakpDNM+CZo1km6keXkRXRM+hml1BFAPVnPkxg== sha1-XTvE0LLPLkHp33y+tlGbKglFnj0="
  },
  "registry": "npm",
  "hash": "5d3bc4d0b2cf2e41e9df7cbeb6519b2a09459e3d"
}